!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	block.c	/^static const int A[4][4] = {$/;"	v	file:
AC_next_state_LPS_64	biariencode.h	/^const unsigned short AC_next_state_LPS_64[64] =    $/;"	v
AC_next_state_MPS_64	biariencode.h	/^const unsigned short AC_next_state_MPS_64[64] =    $/;"	v
ADAPTIVE_CODING	global.h	/^  ADAPTIVE_CODING$/;"	e	enum:__anon22
ADD_UP_BLOCKS	mv-search.c	236;"	d	file:
ADD_XRATE1	context_ini.c	262;"	d	file:
ADD_XRATE1	context_ini.c	311;"	d	file:
ADD_XRATE2	context_ini.c	253;"	d	file:
ADD_XRATE2	context_ini.c	310;"	d	file:
AGGREGATION_PACKET_TYPE	sei.h	45;"	d
AGGREGATION_SEI	sei.h	49;"	d
ALPHA_TABLE	loopFilter.c	/^byte ALPHA_TABLE[52]  = {0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,4,4,5,6,  7,8,9,10,12,13,15,17,  20,22,25,28,32,36,40,45,  50,56,63,71,80,90,101,113,  127,144,162,182,203,226,255,255} ;$/;"	v
ANY_INTRA	loopFilter.c	208;"	d	file:
AWb	ratectl.c	/^double AWb;$/;"	v
AWb	ratectl.h	/^double AWb;$/;"	v
AWp	ratectl.c	/^double AWp;$/;"	v
AWp	ratectl.h	/^double AWp;$/;"	v
AddUpSADQuarter	fast_me.c	/^int AddUpSADQuarter(int pic_pix_x,int pic_pix_y,int blocksize_x,int blocksize_y,$/;"	f
AllocNALU	nalucommon.c	/^NALU_t *AllocNALU(int buffersize)$/;"	f
AllocNalPayloadBuffer	nal.c	/^void AllocNalPayloadBuffer()$/;"	f
AllocPPS	parsetcommon.c	/^pic_parameter_set_rbsp_t *AllocPPS ()$/;"	f
AllocSPS	parsetcommon.c	/^seq_parameter_set_rbsp_t *AllocSPS ()$/;"	f
AllowTransform8x8	global.h	/^  int AllowTransform8x8;$/;"	m	struct:__anon39
AlphaSec	fast_me.c	/^float AlphaSec[8];$/;"	v
AlphaSec	fast_me.h	/^float AlphaSec[8];$/;"	v
AlphaThird	fast_me.c	/^float AlphaThird[8];$/;"	v
AlphaThird	fast_me.h	/^float AlphaThird[8];$/;"	v
AppendTmpbits2Buf	sei.c	/^void AppendTmpbits2Buf( Bitstream* dest, Bitstream* source )$/;"	f
AverageMADPreviousFrame	ratectl.c	/^double AverageMADPreviousFrame;$/;"	v
AverageMADPreviousFrame	ratectl.h	/^double AverageMADPreviousFrame;$/;"	v
B	global.h	/^  int           B, BS;$/;"	m	struct:__anon30
B8Mode2Value	macroblock.c	/^B8Mode2Value (int b8mode, int b8pdir)$/;"	f
BETAP	ratectl.c	/^double BETAP;\/\/LIZG, JVT019r1$/;"	v
BETAP	ratectl.h	/^double BETAP;\/\/LIZG, JVT019r1$/;"	v
BETA_TABLE	loopFilter.c	/^byte  BETA_TABLE[52]  = {0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,2,2,2,3,  3,3,3, 4, 4, 4, 6, 6,   7, 7, 8, 8, 9, 9,10,10,  11,11,12,12,13,13, 14, 14,   15, 15, 16, 16, 17, 17, 18, 18} ;$/;"	v
BIARI_CTX_INIT1	context_ini.c	159;"	d	file:
BIARI_CTX_INIT2	context_ini.c	150;"	d	file:
BIDPartitionCost	mv-search.c	/^int BIDPartitionCost (int   blocktype,$/;"	f
BIPRED_SIMPLE	defines.h	191;"	d
BITS_CBP_MB	global.h	/^  BITS_CBP_MB,$/;"	e	enum:__anon25
BITS_COEFF_UV_MB	global.h	/^  BITS_COEFF_UV_MB,$/;"	e	enum:__anon25
BITS_COEFF_Y_MB	global.h	/^  BITS_COEFF_Y_MB,$/;"	e	enum:__anon25
BITS_DELTA_QUANT_MB	global.h	/^  BITS_DELTA_QUANT_MB,$/;"	e	enum:__anon25
BITS_HEADER	global.h	/^  BITS_HEADER,$/;"	e	enum:__anon25
BITS_INTER_MB	global.h	/^  BITS_INTER_MB,$/;"	e	enum:__anon25
BITS_MB_MODE	global.h	/^  BITS_MB_MODE,$/;"	e	enum:__anon25
BITS_TOTAL_MB	global.h	/^  BITS_TOTAL_MB,$/;"	e	enum:__anon25
BIT_SET	cabac.c	1078;"	d	file:
BI_PREDICTION	defines.h	28;"	d
BLK_4_TO_8	loopFilter.c	/^byte BLK_4_TO_8[16]    = {0,0,1,1,0,0,1,1,2,2,3,3,2,2,3,3} ;$/;"	v
BLK_NUM	loopFilter.c	/^byte BLK_NUM[2][4][4]  = {{{0,4,8,12},{1,5,9,13},{2,6,10,14},{3,7,11,15}},{{0,1,2,3},{4,5,6,7},{8,9,10,11},{12,13,14,15}}} ;$/;"	v
BLOCK_MULTIPLE	defines.h	179;"	d
BLOCK_SIZE	defines.h	142;"	d
BOTTOM_FIELD	global.h	/^  BOTTOM_FIELD$/;"	e	enum:__anon28
BPredPartitionCost	mv-search.c	/^int BPredPartitionCost (int   blocktype,$/;"	f
BRefPictures	global.h	/^  int BRefPictures;              \/\/!< B coded reference pictures replace P pictures (0: not used, 1: used)$/;"	m	struct:__anon39
BS	global.h	/^  int           B, BS;$/;"	m	struct:__anon30
BType2CtxRef	macroblock.c	/^int BType2CtxRef (int btype)$/;"	f
BUCFMAD	ratectl.c	/^double *BUCFMAD;$/;"	v
BUCFMAD	ratectl.h	/^double *BUCFMAD;$/;"	v
BUPFMAD	ratectl.c	/^double *BUPFMAD;$/;"	v
BUPFMAD	ratectl.h	/^double *BUPFMAD;$/;"	v
B_BITS	biariencode.h	40;"	d
B_List0_refs	global.h	/^  int B_List0_refs;$/;"	m	struct:__anon39
B_List1_refs	global.h	/^  int B_List1_refs;$/;"	m	struct:__anon39
B_SLICE	global.h	/^  B_SLICE,$/;"	e	enum:__anon29
BasicUnit	global.h	/^  int BasicUnit;$/;"	m	struct:__anon40
BasicUnitQP	global.h	/^  int BasicUnitQP;$/;"	m	struct:__anon40
Bframe_ctr	global.h	/^int  Iframe_ctr, Pframe_ctr,Bframe_ctr;$/;"	v
Bframe_ctr	lencod.c	/^int  Iframe_ctr, Pframe_ctr,Bframe_ctr;$/;"	v
BiContextType	global.h	/^} BiContextType;$/;"	t	typeref:struct:__anon31
BiContextTypePtr	global.h	/^typedef BiContextType *BiContextTypePtr;$/;"	t
BiPredMERefinements	global.h	/^  int BiPredMERefinements;$/;"	m	struct:__anon39
BiPredMESearchRange	global.h	/^  int BiPredMESearchRange;$/;"	m	struct:__anon39
BiPredMESubPel	global.h	/^  int BiPredMESubPel;$/;"	m	struct:__anon39
BiPredMotionEstimation	global.h	/^  int BiPredMotionEstimation;$/;"	m	struct:__anon39
BitCountType	global.h	/^} BitCountType;$/;"	t	typeref:enum:__anon25
BitDepthChroma	global.h	/^  int BitDepthChroma;$/;"	m	struct:__anon39
BitDepthLuma	global.h	/^  int BitDepthLuma;$/;"	m	struct:__anon39
BitRate	ratectl.c	/^FILE *BitRate;$/;"	v
Bit_Buffer	leaky_bucket.c	/^long Bit_Buffer[10000];$/;"	v
Bitstream	global.h	/^} Bitstream;$/;"	t	typeref:struct:__anon34
BlockMotionSearch	mv-search.c	/^BlockMotionSearch (short     ref,           \/\/!< reference idx$/;"	f
BlockSAD	mv-search.c	/^static int  *****BlockSAD;        \/\/!< SAD for all blocksize, ref. frames and motion vectors$/;"	v	file:
Boolean	parsetcommon.h	/^} Boolean;$/;"	t	typeref:enum:__anon1
Bsize	fast_me.c	/^float  Bsize[8];$/;"	v
Bsize	fast_me.h	/^float  Bsize[8];$/;"	v
BufferSize	ratectl.c	/^double BufferSize; \/\/LIZG 25\/10\/2002$/;"	v
BufferSize	ratectl.h	/^double BufferSize; \/\/LIZG 25\/10\/2002$/;"	v
Build_Status_Map	decoder.c	/^void Build_Status_Map(byte **s_map)$/;"	f
Bytes_After_Header	global.h	/^int Bytes_After_Header;$/;"	v
Bytes_After_Header	lencod.c	/^int Bytes_After_Header;$/;"	v
C	global.h	/^  int           C, CS;$/;"	m	struct:__anon30
CABAC	global.h	/^  CABAC$/;"	e	enum:__anon27
CALLBACK	global.h	/^  CALLBACK,$/;"	e	enum:__anon26
CAVLC_LEVEL_LIMIT	defines.h	55;"	d
CAVLC_init	lencod.c	/^void CAVLC_init()$/;"	f
CC	Makefile	/^CC=clang$/;"	m
CFLAGS	Makefile	/^CFLAGS=-DSPEC_CPU -DNDEBUG -O2 -DSPEC_CPU_LP64 -g$/;"	m
CHROMA_AC	defines.h	66;"	d
CHROMA_DC	defines.h	65;"	d
CHROMA_DC_2x4	defines.h	67;"	d
CHROMA_DC_4x4	defines.h	68;"	d
CLIP_TAB	loopFilter.c	/^byte CLIP_TAB[52][5]  =$/;"	v
COEFF_BIT_COST	block.h	/^const byte COEFF_BIT_COST[3][16][16]=$/;"	v
COEFF_COST	block.h	/^const byte COEFF_COST[2][16] =$/;"	v
COEFF_COST8x8	transform8x8.c	/^const byte COEFF_COST8x8[2][64] =$/;"	v
CONTEXT_INI_C	context_ini.c	16;"	d	file:
CQPOF	loopFilter.c	339;"	d	file:
CS	global.h	/^  int           C, CS;$/;"	m	struct:__anon30
CSobj	rdopt_coding_state.h	/^} CSobj;$/;"	t	typeref:struct:__anon19
CSptr	rdopt_coding_state.h	/^typedef CSobj* CSptr;$/;"	t
CTX_UNDEF	ctx_tables.h	17;"	d
CTX_UNUSED	ctx_tables.h	16;"	d
CalculateFrameNumber	image.c	/^static int CalculateFrameNumber()$/;"	f	file:
CalculateOffset8Param	q_offsets.c	/^void CalculateOffset8Param()$/;"	f
CalculateOffsetParam	q_offsets.c	/^ void CalculateOffsetParam()$/;"	f
CalculateQuant8Param	q_matrix.c	/^void CalculateQuant8Param()$/;"	f
CalculateQuantParam	q_matrix.c	/^void CalculateQuantParam(void)$/;"	f
CalculateSparePicture	sei.c	/^void CalculateSparePicture()$/;"	f
CeilLog2	configfile.c	/^unsigned CeilLog2( unsigned uiVal)$/;"	f
CheckAvailabilityOfNeighbors	mb_access.c	/^void CheckAvailabilityOfNeighbors()$/;"	f
CheckAvailabilityOfNeighborsCABAC	cabac.c	/^void CheckAvailabilityOfNeighborsCABAC()$/;"	f
CheckOffsetParameterName	q_offsets.c	/^int CheckOffsetParameterName (char *s, int *type)$/;"	f
CheckParameterName	q_matrix.c	/^int CheckParameterName (char *s, int *type)$/;"	f
CheckReliabilityOfRef	rdopt.c	/^int CheckReliabilityOfRef (int block, int list_idx, int ref, int mode)$/;"	f
ChromaIntraDisable	global.h	/^  int ChromaIntraDisable;$/;"	m	struct:__anon39
ChromaPrediction4x4	macroblock.c	/^ChromaPrediction4x4 (int   uv,           \/\/ <-- colour component$/;"	f
ChromaResidualCoding	macroblock.c	/^void ChromaResidualCoding (int* cr_cbp)$/;"	f
ClearFastFullIntegerSearch	mv-search.c	/^ClearFastFullIntegerSearch ()$/;"	f
ClearPanScanRectInfoPayload	sei.c	/^void ClearPanScanRectInfoPayload()$/;"	f
ClearRandomAccess	sei.c	/^void ClearRandomAccess()$/;"	f
ClearSubseqCharPayload	sei.c	/^void ClearSubseqCharPayload()$/;"	f
ClearSubseqInfoPayload	sei.c	/^void ClearSubseqInfoPayload(int currLayer)$/;"	f
ClearUser_data_registered_itu_t_t35	sei.c	/^void ClearUser_data_registered_itu_t_t35()$/;"	f
ClearUser_data_unregistered	sei.c	/^void ClearUser_data_unregistered()$/;"	f
Clear_Motion_Search_Module	mv-search.c	/^Clear_Motion_Search_Module ()$/;"	f
Clip	image.c	1371;"	d	file:
Clip1	defines.h	95;"	d
Clip1_Chr	defines.h	96;"	d
Clip3	defines.h	97;"	d
CloseAnnexbFile	annexb.c	/^void CloseAnnexbFile() {$/;"	f
ClosePanScanRectInfo	sei.c	/^void ClosePanScanRectInfo()$/;"	f
CloseRTPFile	rtp.c	/^void CloseRTPFile ()$/;"	f
CloseRandomAccess	sei.c	/^void CloseRandomAccess()$/;"	f
CloseSEIMessages	sei.c	/^void CloseSEIMessages()$/;"	f
CloseSceneInformation	sei.c	/^void CloseSceneInformation()$/;"	f
CloseSparePicture	sei.c	/^void CloseSparePicture()$/;"	f
CloseSubseqChar	sei.c	/^void CloseSubseqChar()$/;"	f
CloseSubseqInfo	sei.c	/^void CloseSubseqInfo(int currLayer)$/;"	f
CloseSubseqLayerInfo	sei.c	/^void CloseSubseqLayerInfo()$/;"	f
CloseUser_data_registered_itu_t_t35	sei.c	/^void CloseUser_data_registered_itu_t_t35()$/;"	f
CloseUser_data_unregistered	sei.c	/^void CloseUser_data_unregistered()$/;"	f
Co_located	mbuffer.c	/^ColocatedParams *Co_located = NULL;$/;"	v
CodedBasicUnit	ratectl.c	/^int CodedBasicUnit;$/;"	v
CodedBasicUnit	ratectl.h	/^int CodedBasicUnit;$/;"	v
CodingType	global.h	/^} CodingType;$/;"	t	typeref:enum:__anon22
ColocatedParams	mbuffer.h	/^} ColocatedParams;$/;"	t	typeref:struct:colocated_params
ComposeRTPPacket	rtp.c	/^int ComposeRTPPacket (RTPpacket_t *p)$/;"	f
ComposeSparePictureMessage	sei.c	/^void ComposeSparePictureMessage(int delta_spare_frame_num, int ref_area_indicator, Bitstream *tmpBitstream)$/;"	f
CompressSpareMBMap	sei.c	/^Boolean CompressSpareMBMap(unsigned char **map_sp, Bitstream *bitstream)$/;"	f
ComputeFrameMAD	ratectl.c	/^double ComputeFrameMAD()$/;"	f
Conceal_Error	decoder.c	/^void Conceal_Error(imgpel **inY, int mb_y, int mb_x, imgpel ***refY, byte **s_map)$/;"	f
Configure	configfile.c	/^void Configure (int ac, char *av[])$/;"	f
CurAveMBHeader	ratectl.c	/^int CurAveMBHeader;$/;"	v
CurAveMBHeader	ratectl.h	/^int CurAveMBHeader;$/;"	v
CurrentBUMAD	ratectl.c	/^double CurrentBUMAD;$/;"	v
CurrentBUMAD	ratectl.h	/^double CurrentBUMAD;$/;"	v
CurrentBufferFullness	ratectl.c	/^double CurrentBufferFullness; \/\/LIZG 25\/10\/2002$/;"	v
CurrentBufferFullness	ratectl.h	/^double CurrentBufferFullness; \/\/LIZG 25\/10\/2002$/;"	v
CurrentFrameMAD	ratectl.c	/^double CurrentFrameMAD;$/;"	v
CurrentFrameMAD	ratectl.h	/^double CurrentFrameMAD;$/;"	v
CurrentRTPSequenceNumber	rtp.c	/^int CurrentRTPSequenceNumber = 0; \/\/! The RTP sequence number of the current packet$/;"	v
CurrentRTPTimestamp	rtp.c	/^int CurrentRTPTimestamp = 0;      \/\/! The RTP timestamp of the current packet,$/;"	v
DC_PRED	defines.h	149;"	d
DC_PRED_16	defines.h	160;"	d
DC_PRED_8	defines.h	164;"	d
DDquant	ratectl.c	/^int DDquant;$/;"	v
DDquant	ratectl.h	/^int DDquant;$/;"	v
DEFAULTCONFIGFILENAME	configfile.h	16;"	d
DEFAULT_CTX_MODEL	context_ini.c	26;"	d	file:
DELTA_QP	rdopt.c	/^int DELTA_QP,DELTA_QP2;$/;"	v
DELTA_QP2	rdopt.c	/^int DELTA_QP,DELTA_QP2;$/;"	v
DIAG_DOWN_LEFT_PRED	defines.h	150;"	d
DIAG_DOWN_RIGHT_PRED	defines.h	151;"	d
DIR_SPATIAL	defines.h	138;"	d
DIR_TEMPORAL	defines.h	137;"	d
DQ_BITS	defines.h	194;"	d
DQ_BITS_8	defines.h	198;"	d
DQ_ROUND	defines.h	195;"	d
DQ_ROUND_8	defines.h	199;"	d
Data	global.h	/^  int Data;$/;"	m	struct:RMPNIbuffer_s
DataPartition	global.h	/^} DataPartition;$/;"	t	typeref:struct:datapartition
DeblockCall	global.h	/^  int DeblockCall;$/;"	m	struct:__anon40
DeblockFrame	loopFilter.c	/^void DeblockFrame(ImageParameters *img, imgpel **imgY, imgpel ***imgUV)$/;"	f
DeblockMb	loopFilter.c	/^void DeblockMb(ImageParameters *img, imgpel **imgY, imgpel ***imgUV, int MbQAddr)$/;"	f
DecOneForthPix	decoder.c	/^void DecOneForthPix(imgpel **dY, imgpel ***dref)$/;"	f
DecRefPicMarking_s	global.h	/^typedef struct DecRefPicMarking_s$/;"	s
DecRefPicMarking_t	global.h	/^} DecRefPicMarking_t;$/;"	t	typeref:struct:DecRefPicMarking_s
DecodedPictureBuffer	mbuffer.h	/^} DecodedPictureBuffer;$/;"	t	typeref:struct:decoded_picture_buffer
Decoders	global.h	/^} Decoders;$/;"	t	typeref:struct:__anon37
Default	configfile.h	/^  double Default;$/;"	m	struct:__anon44
DefineThreshold	fast_me.c	/^void DefineThreshold()$/;"	f
DefineThresholdMB	fast_me.c	/^void DefineThresholdMB()$/;"	f
DeltaP	ratectl.c	/^double DeltaP;$/;"	v
DisplayEncParams	global.h	/^  int DisplayEncParams;$/;"	m	struct:__anon39
DisplayEncoderParams	configfile.c	/^static int DisplayEncoderParams()$/;"	f	file:
DuantQp	ratectl.c	/^int DuantQp; $/;"	v
E	global.h	/^  int           E, ES;$/;"	m	struct:__anon30
EARLY_TERMINATION	fast_me.h	26;"	d
EOS	defines.h	170;"	d
ES	global.h	/^  int           E, ES;$/;"	m	struct:__anon30
ET_SIZE	global.h	545;"	d
ET_SIZE	global.h	616;"	d
EXT_VERSION	lencod.c	70;"	d	file:
Ebits_to_follow	biariencode.h	34;"	d
Ebits_to_follow	global.h	/^  unsigned int  Ebits_to_follow;$/;"	m	struct:__anon30
Ebits_to_followS	global.h	/^  unsigned int  Ebits_to_followS;$/;"	m	struct:__anon30
Ebits_to_go	biariencode.h	36;"	d
Ebits_to_go	global.h	/^  unsigned int  Ebits_to_go;$/;"	m	struct:__anon30
Ebits_to_goS	global.h	/^  unsigned int  Ebits_to_goS;$/;"	m	struct:__anon30
Ebuffer	biariencode.h	35;"	d
Ebuffer	global.h	/^  unsigned int  Ebuffer;$/;"	m	struct:__anon30
EbufferS	global.h	/^  unsigned int  EbufferS;$/;"	m	struct:__anon30
Ecodestrm	biariencode.h	37;"	d
Ecodestrm	global.h	/^  byte          *Ecodestrm;$/;"	m	struct:__anon30
EcodestrmS	global.h	/^  byte          *EcodestrmS;$/;"	m	struct:__anon30
Ecodestrm_laststartcode	biariencode.h	39;"	d
Ecodestrm_len	biariencode.h	38;"	d
Ecodestrm_len	global.h	/^  int           *Ecodestrm_len;$/;"	m	struct:__anon30
Ecodestrm_lenS	global.h	/^  int           *Ecodestrm_lenS;$/;"	m	struct:__anon30
EdgeLoop	loopFilter.c	/^void EdgeLoop(imgpel** Img, byte Strength[16],ImageParameters *img, int MbQAddr, int AlphaC0Offset, int BetaOffset,$/;"	f
Elow	biariencode.h	32;"	d
Elow	global.h	/^  unsigned int  Elow, Erange;$/;"	m	struct:__anon30
ElowS	global.h	/^  unsigned int  ElowS, ErangeS;$/;"	m	struct:__anon30
EncodingEnvironment	global.h	/^} EncodingEnvironment;$/;"	t	typeref:struct:__anon30
EncodingEnvironmentPtr	global.h	/^typedef EncodingEnvironment *EncodingEnvironmentPtr;$/;"	t
Erange	biariencode.h	33;"	d
Erange	global.h	/^  unsigned int  Elow, Erange;$/;"	m	struct:__anon30
ErangeS	global.h	/^  unsigned int  ElowS, ErangeS;$/;"	m	struct:__anon30
Error_Concealment	decoder.c	/^void Error_Concealment(imgpel **inY, byte **s_map, imgpel ***refY)$/;"	f
ExplicitPyramidFormat	global.h	/^  char ExplicitPyramidFormat[1024];  \/\/!< Explicit GOP format (PyramidCoding==3). $/;"	m	struct:__anon39
FALSE	parsetcommon.h	/^  FALSE,$/;"	e	enum:__anon1
FALSE	parsetcommon.h	37;"	d
FCBUCFMAD	ratectl.c	/^double *FCBUCFMAD;$/;"	v
FCBUCFMAD	ratectl.h	/^double *FCBUCFMAD;$/;"	v
FCBUPFMAD	ratectl.c	/^double *FCBUPFMAD;$/;"	v
FCBUPFMAD	ratectl.h	/^double *FCBUPFMAD;$/;"	v
FIELD_CODING	global.h	/^  FIELD_CODING,$/;"	e	enum:__anon22
FIELD_SCAN	block.h	/^const byte FIELD_SCAN[16][2] =$/;"	v
FIELD_SCAN8x8	transform8x8.c	/^const byte FIELD_SCAN8x8[64][2] = {   \/\/ 8x8$/;"	v
FILE_NAME_SIZE	global.h	659;"	d
FIXED	context_ini.c	29;"	d	file:
FIXED_MB	global.h	/^  FIXED_MB,$/;"	e	enum:__anon26
FIXED_RATE	global.h	/^  FIXED_RATE,$/;"	e	enum:__anon26
FME_blocktype	fast_me.c	/^int FME_blocktype;  \/\/blocktype for FME SetMotionVectorPredictor$/;"	v
FME_blocktype	fast_me.h	/^int FME_blocktype;  \/\/blocktype for FME SetMotionVectorPredictor$/;"	v
FMEnable	global.h	/^  int FMEnable;$/;"	m	struct:__anon39
FMO	global.h	/^  FMO$/;"	e	enum:__anon26
FRAME	global.h	/^  FRAME,$/;"	e	enum:__anon28
FRAME_CODING	global.h	/^  FRAME_CODING,$/;"	e	enum:__anon22
FRAME_TYPES	context_ini.c	28;"	d	file:
FREXT_HP	defines.h	33;"	d
FREXT_Hi10P	defines.h	34;"	d
FREXT_Hi422	defines.h	35;"	d
FREXT_Hi444	defines.h	36;"	d
FastFullPelBlockMotionSearch	mv-search.c	/^FastFullPelBlockMotionSearch (pel_t**   orig_pic,     \/\/ <--  not used$/;"	f
FastIntegerPelBlockMotionSearch	fast_me.c	/^FastIntegerPelBlockMotionSearch  (pel_t**   orig_pic,     \/\/ <--  not used$/;"	f
FastLine16Y_11	refbuf.c	/^pel_t *FastLine16Y_11 (pel_t *Pic, int y, int x, int height, int width)$/;"	f
FastLineX	refbuf.c	/^pel_t *FastLineX (int dummy, pel_t* Pic, int y, int x, int height, int width)$/;"	f
FastPelY_14	refbuf.c	/^pel_t FastPelY_14 (pel_t **Pic, int y, int x, int height, int width)$/;"	f
FastSubPelBlockMotionSearch	fast_me.c	/^FastSubPelBlockMotionSearch (pel_t**   orig_pic,      \/\/ <--  original pixel values for the AxB block$/;"	f
FieldAveHeaderBits	ratectl.c	/^int FieldAveHeaderBits;$/;"	v
FieldAveHeaderBits	ratectl.h	/^int FieldAveHeaderBits;$/;"	v
FieldControl	global.h	/^  int FieldControl;$/;"	m	struct:__anon40
FieldFrame	global.h	/^  int FieldFrame;$/;"	m	struct:__anon40
FieldQPBuffer	ratectl.c	/^int FieldQPBuffer;$/;"	v
FieldQPBuffer	ratectl.h	/^int FieldQPBuffer;$/;"	v
FinalizePanScanRectInfo	sei.c	/^void FinalizePanScanRectInfo()$/;"	f
FinalizeRandomAccess	sei.c	/^void FinalizeRandomAccess()$/;"	f
FinalizeSceneInformation	sei.c	/^void FinalizeSceneInformation()$/;"	f
FinalizeSpareMBMap	sei.c	/^void FinalizeSpareMBMap()$/;"	f
FinalizeSubseqChar	sei.c	/^void FinalizeSubseqChar()$/;"	f
FinalizeSubseqInfo	sei.c	/^void FinalizeSubseqInfo(int currLayer)$/;"	f
FinalizeSubseqLayerInfo	sei.c	/^void FinalizeSubseqLayerInfo()$/;"	f
FinalizeUser_data_registered_itu_t_t35	sei.c	/^void FinalizeUser_data_registered_itu_t_t35()$/;"	f
FinalizeUser_data_unregistered	sei.c	/^void FinalizeUser_data_unregistered()$/;"	f
FindSkipModeMotionVector	mv-search.c	/^void FindSkipModeMotionVector ()$/;"	f
FirstFrameIn2ndIGOP	lencod.c	/^int    FirstFrameIn2ndIGOP=0;$/;"	v
FirstMBInSlice	fmo.c	/^static int FirstMBInSlice[MAXSLICEGROUPIDS];$/;"	v	file:
FmoEndPicture	fmo.c	/^int FmoEndPicture ()$/;"	f
FmoGenerateMBAmap	fmo.c	/^static int FmoGenerateMBAmap (ImageParameters * img, seq_parameter_set_rbsp_t* sps)$/;"	f	file:
FmoGenerateMapUnitToSliceGroupMap	fmo.c	/^static int FmoGenerateMapUnitToSliceGroupMap (ImageParameters * img, pic_parameter_set_rbsp_t * pps)$/;"	f	file:
FmoGenerateType0MapUnitMap	fmo.c	/^static void FmoGenerateType0MapUnitMap (ImageParameters * img, pic_parameter_set_rbsp_t * pps )$/;"	f	file:
FmoGenerateType1MapUnitMap	fmo.c	/^static void FmoGenerateType1MapUnitMap (ImageParameters * img, pic_parameter_set_rbsp_t * pps )$/;"	f	file:
FmoGenerateType2MapUnitMap	fmo.c	/^static void FmoGenerateType2MapUnitMap (ImageParameters * img, pic_parameter_set_rbsp_t * pps )$/;"	f	file:
FmoGenerateType3MapUnitMap	fmo.c	/^static void FmoGenerateType3MapUnitMap (ImageParameters * img, pic_parameter_set_rbsp_t * pps )$/;"	f	file:
FmoGenerateType4MapUnitMap	fmo.c	/^static void FmoGenerateType4MapUnitMap (ImageParameters * img, pic_parameter_set_rbsp_t * pps )$/;"	f	file:
FmoGenerateType5MapUnitMap	fmo.c	/^static void FmoGenerateType5MapUnitMap (ImageParameters * img, pic_parameter_set_rbsp_t * pps )$/;"	f	file:
FmoGenerateType6MapUnitMap	fmo.c	/^static void FmoGenerateType6MapUnitMap (ImageParameters * img, pic_parameter_set_rbsp_t * pps )$/;"	f	file:
FmoGetFirstMBOfSliceGroup	fmo.c	/^int FmoGetFirstMBOfSliceGroup (int SliceGroupID)$/;"	f
FmoGetFirstMacroblockInSlice	fmo.c	/^int FmoGetFirstMacroblockInSlice ( int SliceGroup)$/;"	f
FmoGetLastCodedMBOfSliceGroup	fmo.c	/^int FmoGetLastCodedMBOfSliceGroup (int SliceGroupID)$/;"	f
FmoGetNextMBNr	fmo.c	/^int FmoGetNextMBNr (int CurrentMbNr)$/;"	f
FmoGetPreviousMBNr	fmo.c	/^int FmoGetPreviousMBNr (int CurrentMbNr)$/;"	f
FmoInit	fmo.c	/^int FmoInit(ImageParameters * img, pic_parameter_set_rbsp_t * pps, seq_parameter_set_rbsp_t * sps)$/;"	f
FmoMB2SliceGroup	fmo.c	/^int FmoMB2SliceGroup ( int mb)$/;"	f
FmoSetLastMacroblockInSlice	fmo.c	/^void FmoSetLastMacroblockInSlice ( int mb)$/;"	f
FmoSliceGroupCompletelyCoded	fmo.c	/^int FmoSliceGroupCompletelyCoded( int SliceGroupID)$/;"	f
FmoStartPicture	fmo.c	/^int FmoStartPicture ()$/;"	f
FmoUninit	fmo.c	/^void FmoUninit()$/;"	f
FrameAveHeaderBits	ratectl.c	/^int FrameAveHeaderBits;$/;"	v
FrameAveHeaderBits	ratectl.h	/^int FrameAveHeaderBits;$/;"	v
FrameHeightInMbs	global.h	/^  unsigned FrameHeightInMbs;$/;"	m	struct:__anon40
FrameQPBuffer	ratectl.c	/^int FrameQPBuffer;$/;"	v
FrameQPBuffer	ratectl.h	/^int FrameQPBuffer;$/;"	v
FrameRate	global.h	/^  double FrameRate;$/;"	m	struct:__anon39
FrameSizeInMbs	global.h	/^  unsigned FrameSizeInMbs;$/;"	m	struct:__anon40
FrameStore	mbuffer.h	/^} FrameStore;$/;"	t	typeref:struct:frame_store
Frame_Total_Number_MB	global.h	/^  int Frame_Total_Number_MB;$/;"	m	struct:__anon40
FreeNALU	nalucommon.c	/^void FreeNALU(NALU_t *n)$/;"	f
FreeNalPayloadBuffer	nal.c	/^void FreeNalPayloadBuffer()$/;"	f
FreePPS	parsetcommon.c	/^ void FreePPS (pic_parameter_set_rbsp_t *pps)$/;"	f
FreeParameterSets	parset.c	/^void FreeParameterSets ()$/;"	f
FreeSPS	parsetcommon.c	/^ void FreeSPS (seq_parameter_set_rbsp_t *sps)$/;"	f
FullPelBlockMotionBiPred	mv-search.c	/^FullPelBlockMotionBiPred (pel_t**   orig_pic,     \/\/ <--  original pixel values for the AxB block$/;"	f
FullPelBlockMotionSearch	mv-search.c	/^FullPelBlockMotionSearch (pel_t**   orig_pic,     \/\/ <--  original pixel values for the AxB block$/;"	f
GAMMAP	ratectl.c	/^double GAMMAP;\/\/LIZG, JVT019r1$/;"	v
GAMMAP	ratectl.h	/^double GAMMAP;\/\/LIZG, JVT019r1$/;"	v
GOPOverdue	ratectl.c	/^Boolean GOPOverdue;$/;"	v
GOPOverdue	ratectl.h	/^Boolean GOPOverdue;$/;"	v
GOPTargetBufferLevel	ratectl.c	/^double GOPTargetBufferLevel;$/;"	v
GOPTargetBufferLevel	ratectl.h	/^double GOPTargetBufferLevel;$/;"	v
GOP_DATA	global.h	/^} GOP_DATA;$/;"	t	typeref:struct:__anon43
GenerateFullPelRepresentation	image.c	/^static void GenerateFullPelRepresentation (pel_t ** Fourthpel,$/;"	f	file:
GenerateMultiplePPS	global.h	/^  int GenerateMultiplePPS;$/;"	m	struct:__anon39
GenerateParameterSets	parset.c	/^void GenerateParameterSets ()$/;"	f
GeneratePic_parameter_set_NALU	parset.c	/^NALU_t *GeneratePic_parameter_set_NALU(int PPS_id)$/;"	f
GeneratePic_parameter_set_rbsp	parset.c	/^int GeneratePic_parameter_set_rbsp (pic_parameter_set_rbsp_t *pps, char *rbsp)$/;"	f
GeneratePictureParameterSet	parset.c	/^void GeneratePictureParameterSet( pic_parameter_set_rbsp_t *pps, seq_parameter_set_rbsp_t *sps, int PPS_id, $/;"	f
GenerateSeq_parameter_set_NALU	parset.c	/^NALU_t *GenerateSeq_parameter_set_NALU ()$/;"	f
GenerateSeq_parameter_set_rbsp	parset.c	/^int GenerateSeq_parameter_set_rbsp (seq_parameter_set_rbsp_t *sps, char *rbsp)$/;"	f
GenerateSequenceParameterSet	parset.c	/^void GenerateSequenceParameterSet(seq_parameter_set_rbsp_t *sps, int SPS_id)$/;"	f
GenerateVUISequenceParameters	parset.c	/^static int GenerateVUISequenceParameters(DataPartition *partition)$/;"	f	file:
GetBestTransformP8x8	rdopt.c	/^int GetBestTransformP8x8()$/;"	f
GetConfigFileContent	configfile.c	/^char *GetConfigFileContent (char *Filename)$/;"	f
GetCtxModelNumber	context_ini.c	/^void GetCtxModelNumber (int* mnumber, MotionInfoContexts* mc, TextureInfoContexts* tc)$/;"	f
GetSkipCostMB	mv-search.c	/^int GetSkipCostMB (double lambda)$/;"	f
GetStrength	loopFilter.c	/^void GetStrength(byte Strength[16],ImageParameters *img,int MbQAddr,int dir,int edge, int mvlimit)$/;"	f
Get_Direct_Cost8x8	mv-search.c	/^int Get_Direct_Cost8x8 (int block, int *cost8x8)$/;"	f
Get_Direct_CostMB	mv-search.c	/^int Get_Direct_CostMB (double lambda)$/;"	f
Get_Direct_Motion_Vectors	mv-search.c	/^void Get_Direct_Motion_Vectors ()$/;"	f
Get_Reference_Block	decoder.c	/^void Get_Reference_Block(imgpel **imY, $/;"	f
Get_Reference_Pixel	decoder.c	/^byte Get_Reference_Pixel(imgpel **imY, int y_pos, int x_pos)$/;"	f
H26LPAYLOADTYPE	rtp.h	25;"	d
H26LSSRC	rtp.h	26;"	d
HALF	biariencode.h	42;"	d
HOR_DOWN_PRED	defines.h	153;"	d
HOR_PRED	defines.h	148;"	d
HOR_PRED_16	defines.h	159;"	d
HOR_PRED_8	defines.h	165;"	d
HOR_UP_PRED	defines.h	155;"	d
HaveAggregationSEI	sei.c	/^Boolean HaveAggregationSEI()$/;"	f
I16MB	defines.h	101;"	d
I16Offset	rdopt.c	/^int I16Offset (int cbp, int i16mode)$/;"	f
I4MB	defines.h	100;"	d
I8MB	defines.h	104;"	d
IBLOCK	defines.h	102;"	d
IClip	loopFilter.c	36;"	d	file:
IFLAG	global.h	/^  int IFLAG;$/;"	m	struct:__anon40
IMG_NUMBER	global.h	1447;"	d
IMG_PAD_SIZE	defines.h	88;"	d
INCLUDED_BY_CONFIGFILE_C	configfile.c	59;"	d	file:
INCREMENT	mv-search.c	237;"	d	file:
ININT_STRENGTH	loopFilter.c	/^int  ININT_STRENGTH[4] = {0x04040404, 0x03030303, 0x03030303, 0x03030303} ; $/;"	v
INIT_ABS_I	ctx_tables.h	/^static const int INIT_ABS_I[1][8][5][2] =$/;"	v
INIT_ABS_P	ctx_tables.h	/^static const int INIT_ABS_P[3][8][5][2] =$/;"	v
INIT_B8_TYPE_I	ctx_tables.h	/^static const int INIT_B8_TYPE_I[1][2][9][2] =$/;"	v
INIT_B8_TYPE_P	ctx_tables.h	/^static const int INIT_B8_TYPE_P[3][2][9][2] =$/;"	v
INIT_BCBP_I	ctx_tables.h	/^static const int INIT_BCBP_I[1][8][4][2] =$/;"	v
INIT_BCBP_P	ctx_tables.h	/^static const int INIT_BCBP_P[3][8][4][2] =$/;"	v
INIT_CBP_I	ctx_tables.h	/^static const int INIT_CBP_I[1][3][4][2] =$/;"	v
INIT_CBP_P	ctx_tables.h	/^static const int INIT_CBP_P[3][3][4][2] =$/;"	v
INIT_CIPR_I	ctx_tables.h	/^static const int INIT_CIPR_I[1][1][4][2] =$/;"	v
INIT_CIPR_P	ctx_tables.h	/^static const int INIT_CIPR_P[3][1][4][2] =$/;"	v
INIT_DELTA_QP_I	ctx_tables.h	/^static const int INIT_DELTA_QP_I[1][1][4][2]=$/;"	v
INIT_DELTA_QP_P	ctx_tables.h	/^static const int INIT_DELTA_QP_P[3][1][4][2]=$/;"	v
INIT_FLD_LAST_I	ctx_tables.h	/^static const int INIT_FLD_LAST_I[1][8][15][2] =$/;"	v
INIT_FLD_LAST_P	ctx_tables.h	/^static const int INIT_FLD_LAST_P[3][8][15][2] =$/;"	v
INIT_FLD_MAP_I	ctx_tables.h	/^static const int INIT_FLD_MAP_I[1][8][15][2] =$/;"	v
INIT_FLD_MAP_P	ctx_tables.h	/^static const int INIT_FLD_MAP_P[3][8][15][2] =$/;"	v
INIT_FRAME_RATE	defines.h	169;"	d
INIT_IPR_I	ctx_tables.h	/^static const int INIT_IPR_I[1][1][2][2] =$/;"	v
INIT_IPR_P	ctx_tables.h	/^static const int INIT_IPR_P[3][1][2][2] =$/;"	v
INIT_LAST_I	ctx_tables.h	/^static const int INIT_LAST_I[1][8][15][2] =$/;"	v
INIT_LAST_P	ctx_tables.h	/^static const int INIT_LAST_P[3][8][15][2] =$/;"	v
INIT_MAP_I	ctx_tables.h	/^static const int INIT_MAP_I[1][8][15][2] =$/;"	v
INIT_MAP_P	ctx_tables.h	/^static const int INIT_MAP_P[3][8][15][2] =$/;"	v
INIT_MB_AFF_I	ctx_tables.h	/^static const int INIT_MB_AFF_I[1][1][4][2] =$/;"	v
INIT_MB_AFF_P	ctx_tables.h	/^static const int INIT_MB_AFF_P[3][1][4][2] =$/;"	v
INIT_MB_TYPE_I	ctx_tables.h	/^static const int INIT_MB_TYPE_I[1][3][11][2] =$/;"	v
INIT_MB_TYPE_P	ctx_tables.h	/^static const int INIT_MB_TYPE_P[3][3][11][2] =$/;"	v
INIT_MV_RES_I	ctx_tables.h	/^static const int INIT_MV_RES_I[1][2][10][2] =$/;"	v
INIT_MV_RES_P	ctx_tables.h	/^static const int INIT_MV_RES_P[3][2][10][2] =$/;"	v
INIT_ONE_I	ctx_tables.h	/^static const int INIT_ONE_I[1][8][5][2] =$/;"	v
INIT_ONE_P	ctx_tables.h	/^static const int INIT_ONE_P[3][8][5][2] =$/;"	v
INIT_REF_NO_I	ctx_tables.h	/^static const int INIT_REF_NO_I[1][2][6][2] =$/;"	v
INIT_REF_NO_P	ctx_tables.h	/^static const int INIT_REF_NO_P[3][2][6][2] =$/;"	v
INIT_TRANSFORM_SIZE_I	ctx_tables.h	/^static const int INIT_TRANSFORM_SIZE_I[1][1][3][2]=$/;"	v
INIT_TRANSFORM_SIZE_P	ctx_tables.h	/^static const int INIT_TRANSFORM_SIZE_P[3][1][3][2]=$/;"	v
INT64_MIN	global.h	49;"	d
INTER_MB	global.h	/^  INTER_MB,$/;"	e	enum:__anon24
INTRA_MB_16x16	global.h	/^  INTRA_MB_16x16$/;"	e	enum:__anon24
INTRA_MB_4x4	global.h	/^  INTRA_MB_4x4,$/;"	e	enum:__anon24
INVALIDINDEX	defines.h	93;"	d
IPCM	defines.h	105;"	d
IS_BW	rdopt.c	1258;"	d	file:
IS_BW	rdopt.c	1360;"	d	file:
IS_COPY	defines.h	124;"	d
IS_DIRECT	defines.h	123;"	d
IS_FW	rdopt.c	1257;"	d	file:
IS_FW	rdopt.c	1359;"	d	file:
IS_INTER	defines.h	121;"	d
IS_INTERMV	defines.h	122;"	d
IS_INTRA	defines.h	117;"	d
IS_NEWINTRA	defines.h	118;"	d
IS_OLDINTRA	defines.h	119;"	d
IS_P8x8	defines.h	125;"	d
I_SLICE	global.h	/^  I_SLICE,$/;"	e	enum:__anon29
IdentifyLevel	parset.c	/^int IdentifyLevel()$/;"	f
IdentifyProfile	parset.c	/^int IdentifyProfile()$/;"	f
Iframe_ctr	global.h	/^int  Iframe_ctr, Pframe_ctr,Bframe_ctr;$/;"	v
Iframe_ctr	lencod.c	/^int  Iframe_ctr, Pframe_ctr,Bframe_ctr;$/;"	v
ImageParameters	global.h	/^} ImageParameters;$/;"	t	typeref:struct:__anon40
In2ndIGOP	lencod.c	/^Boolean In2ndIGOP = FALSE;$/;"	v
InitEncoderParams	configfile.c	/^static int InitEncoderParams()$/;"	f	file:
InitPanScanRectInfo	sei.c	/^void InitPanScanRectInfo()$/;"	f
InitRandomAccess	sei.c	/^void InitRandomAccess()$/;"	f
InitSEIMessages	sei.c	/^void InitSEIMessages()$/;"	f
InitSceneInformation	sei.c	/^void InitSceneInformation()$/;"	f
InitSparePicture	sei.c	/^void InitSparePicture()$/;"	f
InitSubseqChar	sei.c	/^void InitSubseqChar()$/;"	f
InitSubseqInfo	sei.c	/^void InitSubseqInfo(int currLayer)$/;"	f
InitSubseqLayerInfo	sei.c	/^void InitSubseqLayerInfo()$/;"	f
InitUser_data_registered_itu_t_t35	sei.c	/^void InitUser_data_registered_itu_t_t35()$/;"	f
InitUser_data_unregistered	sei.c	/^void InitUser_data_unregistered()$/;"	f
Init_Motion_Search_Module	mv-search.c	/^Init_Motion_Search_Module ()$/;"	f
Init_QMatrix	q_matrix.c	/^void Init_QMatrix (void)$/;"	f
Init_QOffsetMatrix	q_offsets.c	/^void Init_QOffsetMatrix ()$/;"	f
InitialDelayOffset	ratectl.c	/^double InitialDelayOffset;$/;"	v
InitializeFastFullIntegerSearch	mv-search.c	/^InitializeFastFullIntegerSearch ()$/;"	f
InputParameters	global.h	/^} InputParameters;$/;"	t	typeref:struct:__anon39
InterSearch16x16	global.h	/^  int InterSearch16x16;$/;"	m	struct:__anon39
InterSearch16x8	global.h	/^  int InterSearch16x8;$/;"	m	struct:__anon39
InterSearch4x4	global.h	/^  int InterSearch4x4;$/;"	m	struct:__anon39
InterSearch4x8	global.h	/^  int InterSearch4x8;$/;"	m	struct:__anon39
InterSearch8x16	global.h	/^  int InterSearch8x16;$/;"	m	struct:__anon39
InterSearch8x4	global.h	/^  int InterSearch8x4;$/;"	m	struct:__anon39
InterSearch8x8	global.h	/^  int InterSearch8x8;$/;"	m	struct:__anon39
Intra16x16ParDisable	global.h	/^  int Intra16x16ParDisable;$/;"	m	struct:__anon39
Intra16x16PlaneDisable	global.h	/^  int Intra16x16PlaneDisable;$/;"	m	struct:__anon39
Intra16x16_Mode_Decision	rdopt.c	/^Intra16x16_Mode_Decision (Macroblock* currMB, int* i16mode)$/;"	f
Intra4x4DiagDisable	global.h	/^  int Intra4x4DiagDisable;$/;"	m	struct:__anon39
Intra4x4DirDisable	global.h	/^  int Intra4x4DirDisable;$/;"	m	struct:__anon39
Intra4x4ParDisable	global.h	/^  int Intra4x4ParDisable;$/;"	m	struct:__anon39
IntraBottom	global.h	/^  int IntraBottom;            \/\/!< Force Intra Bottom at GOP periods.$/;"	m	struct:__anon39
IntraChromaPredModeFlag	global.h	/^  int                 IntraChromaPredModeFlag;$/;"	m	struct:macroblock
IntraChromaPrediction	macroblock.c	/^void IntraChromaPrediction (int *mb_up, int *mb_left, int*mb_up_left)$/;"	f
IntraChromaPrediction4x4	macroblock.c	/^void IntraChromaPrediction4x4 (int  uv,       \/\/ <-- colour component$/;"	f
IntraDisableInterOnly	global.h	/^  int IntraDisableInterOnly;$/;"	m	struct:__anon39
IntraInterDecision	global.h	/^} IntraInterDecision;$/;"	t	typeref:enum:__anon24
IntraMBs	intrarefresh.c	/^static int *IntraMBs;$/;"	v	file:
InvLevelScale4x4Chroma_Inter	q_matrix.c	/^int InvLevelScale4x4Chroma_Inter[2][6][4][4];$/;"	v
InvLevelScale4x4Chroma_Intra	q_matrix.c	/^int InvLevelScale4x4Chroma_Intra[2][6][4][4];$/;"	v
InvLevelScale4x4Luma_Inter	q_matrix.c	/^int InvLevelScale4x4Luma_Inter[6][4][4];$/;"	v
InvLevelScale4x4Luma_Intra	q_matrix.c	/^int InvLevelScale4x4Luma_Intra[6][4][4];$/;"	v
InvLevelScale8x8Luma_Inter	q_matrix.c	/^int InvLevelScale8x8Luma_Inter[6][8][8];$/;"	v
InvLevelScale8x8Luma_Intra	q_matrix.c	/^int InvLevelScale8x8Luma_Intra[6][8][8];$/;"	v
Iprev_bits	ratectl.c	/^int Iprev_bits=0;$/;"	v
JM	lencod.c	68;"	d	file:
JMHelpExit	configfile.c	/^void JMHelpExit ()$/;"	f
KS_MV	rdopt.c	38;"	d	file:
LAMBDA_ACCURACY_BITS	defines.h	109;"	d
LAMBDA_FACTOR	defines.h	110;"	d
LEVEL_IDC	configfile.h	19;"	d
LEVEL_NUM	defines.h	51;"	d
LFAlphaC0Offset	global.h	/^  int                 LFAlphaC0Offset;$/;"	m	struct:macroblock
LFAlphaC0Offset	global.h	/^  int LFAlphaC0Offset;$/;"	m	struct:__anon39
LFAlphaC0Offset	global.h	/^  int LFAlphaC0Offset;$/;"	m	struct:__anon40
LFBetaOffset	global.h	/^  int                 LFBetaOffset;$/;"	m	struct:macroblock
LFBetaOffset	global.h	/^  int LFBetaOffset;$/;"	m	struct:__anon39
LFBetaOffset	global.h	/^  int LFBetaOffset;$/;"	m	struct:__anon40
LFDisableIdc	global.h	/^  int                 LFDisableIdc;$/;"	m	struct:macroblock
LFDisableIdc	global.h	/^  int LFDisableIdc;$/;"	m	struct:__anon39
LFDisableIdc	global.h	/^  int LFDisableIdc;$/;"	m	struct:__anon40
LFSendParameters	global.h	/^  int LFSendParameters;$/;"	m	struct:__anon39
LIST_0	defines.h	43;"	d
LIST_1	defines.h	44;"	d
LOG2_MAX_FRAME_NUM_MINUS4	defines.h	133;"	d
LOG2_MAX_PIC_ORDER_CNT_LSB_MINUS4	defines.h	134;"	d
LUMA	defines.h	47;"	d
LUMA_16AC	defines.h	60;"	d
LUMA_16DC	defines.h	59;"	d
LUMA_4x4	defines.h	64;"	d
LUMA_4x8	defines.h	63;"	d
LUMA_8x4	defines.h	62;"	d
LUMA_8x8	defines.h	61;"	d
LUMA_INTRA16x16AC	defines.h	49;"	d
LUMA_INTRA16x16DC	defines.h	48;"	d
LambdaWeight	global.h	/^  double LambdaWeight[6];$/;"	m	struct:__anon39
LeakyBucketParamFile	global.h	/^  char LeakyBucketParamFile[FILE_NAME_SIZE];$/;"	m	struct:__anon39
LeakyBucketRateFile	global.h	/^  char LeakyBucketRateFile[FILE_NAME_SIZE];$/;"	m	struct:__anon39
LevelCheck	configfile.c	/^static void LevelCheck()$/;"	f	file:
LevelIDC	global.h	/^  int LevelIDC;                 \/\/!< level idc$/;"	m	struct:__anon39
LevelOffset4x4Chroma_Inter	q_offsets.c	/^int LevelOffset4x4Chroma_Inter[2][13][4][4];$/;"	v
LevelOffset4x4Chroma_Intra	q_offsets.c	/^int LevelOffset4x4Chroma_Intra[2][13][4][4];$/;"	v
LevelOffset4x4Luma_Inter	q_offsets.c	/^int LevelOffset4x4Luma_Inter[13][4][4];$/;"	v
LevelOffset4x4Luma_Intra	q_offsets.c	/^int LevelOffset4x4Luma_Intra[13][4][4];$/;"	v
LevelOffset8x8Luma_Inter	q_offsets.c	/^int LevelOffset8x8Luma_Inter[13][8][8];$/;"	v
LevelOffset8x8Luma_Intra	q_offsets.c	/^int LevelOffset8x8Luma_Intra[13][8][8];$/;"	v
LevelScale4x4Chroma_Inter	q_matrix.c	/^int LevelScale4x4Chroma_Inter[2][6][4][4];$/;"	v
LevelScale4x4Chroma_Intra	q_matrix.c	/^int LevelScale4x4Chroma_Intra[2][6][4][4];$/;"	v
LevelScale4x4Luma_Inter	q_matrix.c	/^int LevelScale4x4Luma_Inter[6][4][4];$/;"	v
LevelScale4x4Luma_Intra	q_matrix.c	/^int LevelScale4x4Luma_Intra[6][4][4];$/;"	v
LevelScale8x8Luma_Inter	q_matrix.c	/^int LevelScale8x8Luma_Inter[6][8][8];$/;"	v
LevelScale8x8Luma_Intra	q_matrix.c	/^int LevelScale8x8Luma_Intra[6][8][8];$/;"	v
Log2MaxFrameNum	global.h	/^  int Log2MaxFrameNum;$/;"	m	struct:__anon39
LossRateA	global.h	/^  int LossRateA;              \/\/!< assumed loss probablility of partition A (or full slice), in per cent, used for loss-aware R\/D optimization$/;"	m	struct:__anon39
LossRateB	global.h	/^  int LossRateB;              \/\/!< assumed loss probablility of partition B, in per cent, used for loss-aware R\/D $/;"	m	struct:__anon39
LossRateC	global.h	/^  int LossRateC;              \/\/!< assumed loss probablility of partition C, in per cent, used for loss-aware R\/D $/;"	m	struct:__anon39
LowPassForIntra8x8	global.h	/^  int LowPassForIntra8x8;$/;"	m	struct:__anon39
LowPassForIntra8x8Pred	transform8x8.c	/^void LowPassForIntra8x8Pred(int *PredPel, int block_up_left, int block_up, int block_left)$/;"	f
LowerBound	ratectl.c	/^long UpperBound1, UpperBound2, LowerBound;$/;"	v
LumaPrediction4x4	macroblock.c	/^LumaPrediction4x4 (int   block_x,    \/\/ <--  relative horizontal block coordinate of 4x4 block$/;"	f
LumaPrediction4x4Bi	macroblock.c	/^LumaPrediction4x4Bi (int  block_x,    \/\/ <--  relative horizontal block coordinate of 4x4 block$/;"	f
LumaResidualCoding	macroblock.c	/^LumaResidualCoding ()$/;"	f
LumaResidualCoding8x8	macroblock.c	/^LumaResidualCoding8x8 (int   *cbp,         \/\/  --> cbp (updated according to processed 8x8 luminance block)$/;"	f
MADModelEstimator	ratectl.c	/^void MADModelEstimator (int n_windowSize)$/;"	f
MADPictureC1	ratectl.c	/^double MADPictureC1;$/;"	v
MADPictureC1	ratectl.h	/^double MADPictureC1;$/;"	v
MADPictureC2	ratectl.c	/^double MADPictureC2;$/;"	v
MADPictureC2	ratectl.h	/^double MADPictureC2;$/;"	v
MADm_windowSize	ratectl.c	/^int MADm_windowSize;$/;"	v
MADm_windowSize	ratectl.h	/^int MADm_windowSize;$/;"	v
MADofMB	global.h	/^  double *MADofMB;$/;"	m	struct:__anon40
MAX	ratectl.h	23;"	d
MAXIMUMPARSETNALUSIZE	parsetcommon.h	30;"	d
MAXIMUMPARSETRBSPSIZE	parsetcommon.h	29;"	d
MAXIMUMVALUEOFcpb_cnt	parsetcommon.h	47;"	d
MAXMODE	defines.h	106;"	d
MAXPARTITIONMODES	elements.h	48;"	d
MAXPPS	parsetcommon.h	34;"	d
MAXRBSPSIZE	nalucommon.h	19;"	d
MAXRTPPACKETSIZE	rtp.h	24;"	d
MAXRTPPAYLOADLEN	rtp.h	23;"	d
MAXSLICEGROUPIDS	fmo.h	20;"	d
MAXSLICEPERPICTURE	global.h	474;"	d
MAXSPS	parsetcommon.h	33;"	d
MAX_BITCOUNTER_MB	global.h	/^  MAX_BITCOUNTER_MB$/;"	e	enum:__anon25
MAX_DEPENDENT_SUBSEQ	sei.h	19;"	d
MAX_FN	sei.h	43;"	d
MAX_ITEMS_TO_PARSE	configfile.c	93;"	d	file:
MAX_ITEMS_TO_PARSE	q_matrix.c	18;"	d	file:
MAX_ITEMS_TO_PARSE	q_offsets.c	18;"	d	file:
MAX_LAYER_NUMBER	sei.h	18;"	d
MAX_LIST_SIZE	mbuffer.c	47;"	d	file:
MAX_LIST_SIZE	mbuffer.h	18;"	d
MAX_PART_NR	defines.h	185;"	d
MAX_QP	defines.h	130;"	d
MAX_REFERENCE_PICTURES	defines.h	140;"	d
MAX_SYMBOLS_PER_MB	defines.h	181;"	d
MAX_VALUE	defines.h	91;"	d
MAXnum_ref_frames_in_pic_order_cnt_cycle	parsetcommon.h	148;"	d
MAXnum_slice_groups_minus1	parsetcommon.h	102;"	d
MBAmap	fmo.c	/^byte *MBAmap = NULL;   $/;"	v
MBPairIsField	global.h	/^int  MBPairIsField;     \/\/!< For MB level field\/frame coding tools$/;"	v
MBPairIsField	lencod.c	/^int  MBPairIsField;     \/\/!< For MB level field\/frame coding tools$/;"	v
MBPerRow	ratectl.c	/^int MBPerRow;$/;"	v
MBPerRow	ratectl.h	/^int MBPerRow;$/;"	v
MBType2Value	macroblock.c	/^MBType2Value (Macroblock* currMB)$/;"	f
MB_BLOCK_SIZE	defines.h	143;"	d
MB_SyntaxElements	global.h	/^  SyntaxElement   MB_SyntaxElements[MAX_SYMBOLS_PER_MB];    \/\/!< temporal storage for all chosen syntax elements of one MB$/;"	m	struct:__anon40
MC	transform8x8.c	1468;"	d	file:
MIN	ratectl.h	22;"	d
MINVALUE	ratectl.c	/^double MINVALUE;$/;"	v
MINVALUE	ratectl.h	/^double MINVALUE;$/;"	v
MIN_QP	defines.h	129;"	d
MODTAB	macroblock.h	/^const int  MODTAB[3][2]=$/;"	v
MPS	global.h	/^  unsigned char  MPS;           \/\/ Least Probable Symbol 0\/1 CP$/;"	m	struct:__anon31
MVPRED_L	defines.h	174;"	d
MVPRED_MEDIAN	defines.h	173;"	d
MVPRED_U	defines.h	175;"	d
MVPRED_UR	defines.h	176;"	d
MV_COST	defines.h	112;"	d
Macroblock	global.h	/^} Macroblock;$/;"	t	typeref:struct:macroblock
Map	configfile.h	/^Mapping Map[] = {$/;"	v
MapUnitToSliceGroupMap	fmo.c	/^byte *MapUnitToSliceGroupMap = NULL; $/;"	v
Mapping	configfile.h	/^} Mapping;$/;"	t	typeref:struct:__anon44
MatrixType4x4	q_matrix.c	/^static const char MatrixType4x4[6][20] =$/;"	v	file:
MatrixType8x8	q_matrix.c	/^static const char MatrixType8x8[2][20] =$/;"	v	file:
MbAffPostProc	image.c	/^void MbAffPostProc()$/;"	f
MbInterlace	global.h	/^  int MbInterlace;            \/\/!< macroblock adaptive frame\/field$/;"	m	struct:__anon39
MbaffFrameFlag	global.h	/^  int MbaffFrameFlag;    \/\/!< indicates frame with mb aff coding$/;"	m	struct:__anon40
MbaffFrameFlag	mbuffer.h	/^  int         MbaffFrameFlag;$/;"	m	struct:storable_picture
McostState	fast_me.c	/^int **McostState; \/\/state for integer pel search$/;"	v
McostState	fast_me.h	/^int **McostState; \/\/state for integer pel search$/;"	v
Mode_Decision_for_4x4IntraBlocks	rdopt.c	/^int Mode_Decision_for_4x4IntraBlocks (int  b8,  int  b4,  double  lambda,  int*  min_cost)$/;"	f
Mode_Decision_for_8x8IntraBlocks	rdopt.c	/^int Mode_Decision_for_8x8IntraBlocks(int b8,double lambda,int *cost)$/;"	f
Mode_Decision_for_Intra4x4Macroblock	rdopt.c	/^int Mode_Decision_for_Intra4x4Macroblock (double lambda,  int* cost)$/;"	f
Mode_Decision_for_new_8x8IntraBlocks	transform8x8.c	/^int Mode_Decision_for_new_8x8IntraBlocks (int b8, double lambda, int *min_cost)$/;"	f
Mode_Decision_for_new_Intra8x8Macroblock	transform8x8.c	/^int Mode_Decision_for_new_Intra8x8Macroblock (double lambda, int *min_cost)$/;"	f
MotionInfoContexts	global.h	/^} MotionInfoContexts;$/;"	t	typeref:struct:__anon32
MyInitialQp	ratectl.c	/^int MyInitialQp;$/;"	v
MyInitialQp	ratectl.h	/^int MyInitialQp;$/;"	v
NALU_PRIORITY_DISPOSABLE	nalucommon.h	37;"	d
NALU_PRIORITY_HIGH	nalucommon.h	35;"	d
NALU_PRIORITY_HIGHEST	nalucommon.h	34;"	d
NALU_PRIRITY_LOW	nalucommon.h	36;"	d
NALU_TYPE_AUD	nalucommon.h	29;"	d
NALU_TYPE_DPA	nalucommon.h	22;"	d
NALU_TYPE_DPB	nalucommon.h	23;"	d
NALU_TYPE_DPC	nalucommon.h	24;"	d
NALU_TYPE_EOSEQ	nalucommon.h	30;"	d
NALU_TYPE_EOSTREAM	nalucommon.h	31;"	d
NALU_TYPE_FILL	nalucommon.h	32;"	d
NALU_TYPE_IDR	nalucommon.h	25;"	d
NALU_TYPE_PPS	nalucommon.h	28;"	d
NALU_TYPE_SEI	nalucommon.h	26;"	d
NALU_TYPE_SLICE	nalucommon.h	21;"	d
NALU_TYPE_SPS	nalucommon.h	27;"	d
NALU_t	nalucommon.h	/^} NALU_t;$/;"	t	typeref:struct:__anon18
NAL_Payload_buffer	nal.c	/^static byte *NAL_Payload_buffer;$/;"	v	file:
NCBP	macroblock.h	/^const unsigned char NCBP[2][48][2]=$/;"	v
NORMAL_SEI	sei.h	48;"	d
NO_INTRA_PMODE	defines.h	145;"	d
NO_SLICES	global.h	/^  NO_SLICES,$/;"	e	enum:__anon26
NUM_ABS_CTX	global.h	278;"	d
NUM_B8_TYPE_CTX	global.h	250;"	d
NUM_BCBP_CTX	global.h	274;"	d
NUM_BLOCK_TYPES	defines.h	69;"	d
NUM_CBP_CTX	global.h	273;"	d
NUM_CIPR_CTX	global.h	272;"	d
NUM_CTX_MODELS_I	ctx_tables.h	22;"	d
NUM_CTX_MODELS_P	ctx_tables.h	23;"	d
NUM_DELTA_QP_CTX	global.h	253;"	d
NUM_IPR_CTX	global.h	271;"	d
NUM_LAST_CTX	global.h	276;"	d
NUM_MAP_CTX	global.h	275;"	d
NUM_MB_AFF_CTX	global.h	254;"	d
NUM_MB_TYPE_CTX	global.h	249;"	d
NUM_MV_RES_CTX	global.h	251;"	d
NUM_ONE_CTX	global.h	277;"	d
NUM_PIC_TYPE	global.h	1099;"	d
NUM_REF_NO_CTX	global.h	252;"	d
NUM_TRANSFORM_SIZE_CTX	global.h	256;"	d
Nb	ratectl.c	/^static int Np, Nb, bits_topfield;$/;"	v	file:
Next	global.h	/^  struct DecRefPicMarking_s *Next;$/;"	m	struct:DecRefPicMarking_s	typeref:struct:DecRefPicMarking_s::DecRefPicMarking_s
Next	global.h	/^  struct RMPNIbuffer_s *Next;$/;"	m	struct:RMPNIbuffer_s	typeref:struct:RMPNIbuffer_s::RMPNIbuffer_s
NoMbPartLessThan8x8Flag	global.h	/^  int                 NoMbPartLessThan8x8Flag;$/;"	m	struct:macroblock
NoMbPartLessThan8x8Flag	global.h	/^  int    NoMbPartLessThan8x8Flag;$/;"	m	struct:__anon42
NoMbPartLessThan8x8Flag	rdopt.c	/^int   NoMbPartLessThan8x8Flag;$/;"	v
NoOfDecoders	global.h	/^  int NoOfDecoders;$/;"	m	struct:__anon39
NoResidueDirect	global.h	/^  int NoResidueDirect;$/;"	m	struct:__anon40
Np	ratectl.c	/^static int Np, Nb, bits_topfield;$/;"	v	file:
NumFrameIn2ndIGOP	global.h	/^  int NumFrameIn2ndIGOP;$/;"	m	struct:__anon39
NumFramesInELSubSeq	global.h	/^  int NumFramesInELSubSeq;$/;"	m	struct:__anon39
NumberIntraPerPicture	intrarefresh.c	/^static int NumberIntraPerPicture;$/;"	v	file:
NumberLeakyBuckets	global.h	/^  int NumberLeakyBuckets;$/;"	m	struct:__anon39
NumberOfMBs	intrarefresh.c	/^static int NumberOfMBs = 0;$/;"	v	file:
NumberofBFrames	ratectl.c	/^int NumberofBFrames;$/;"	v
NumberofBFrames	ratectl.h	/^int NumberofBFrames;$/;"	v
NumberofBasicUnit	ratectl.c	/^int NumberofBasicUnit;$/;"	v
NumberofBasicUnit	ratectl.h	/^int NumberofBasicUnit;$/;"	v
NumberofBasicUnitHeaderBits	global.h	/^  int NumberofBasicUnitHeaderBits;$/;"	m	struct:__anon40
NumberofBasicUnitTextureBits	global.h	/^  int NumberofBasicUnitTextureBits;$/;"	m	struct:__anon40
NumberofCodedBFrame	global.h	/^  int NumberofCodedBFrame; $/;"	m	struct:__anon40
NumberofCodedMacroBlocks	global.h	/^  int NumberofCodedMacroBlocks;$/;"	m	struct:__anon40
NumberofCodedPFrame	global.h	/^  int NumberofCodedPFrame;$/;"	m	struct:__anon40
NumberofGOP	global.h	/^  int NumberofGOP;$/;"	m	struct:__anon40
NumberofHeaderBits	global.h	/^  int NumberofHeaderBits; $/;"	m	struct:__anon40
NumberofMBHeaderBits	global.h	/^  int NumberofMBHeaderBits;$/;"	m	struct:__anon40
NumberofMBTextureBits	global.h	/^  int NumberofMBTextureBits;$/;"	m	struct:__anon40
NumberofPPicture	global.h	/^  int NumberofPPicture;$/;"	m	struct:__anon40
NumberofTextureBits	global.h	/^  int NumberofTextureBits;$/;"	m	struct:__anon40
OBJS	Makefile	/^OBJS=annexb.bc biariencode.bc block.bc cabac.bc configfile.bc context_ini.bc decoder.bc explicit_gop.bc fast_me.bc filehandle.bc fmo.bc header.bc image.bc intrarefresh.bc leaky_bucket.bc lencod.bc loopFilter.bc macroblock.bc mb_access.bc mbuffer.bc memalloc.bc mv-search.bc nal.bc nalu.bc nalucommon.bc output.bc parset.bc parsetcommon.bc q_matrix.bc q_offsets.bc ratectl.bc rdopt.bc rdopt_coding_state.bc rdpicdecision.bc refbuf.bc rtp.bc sei.bc slice.bc transform8x8.bc vlc.bc weighted_prediction.bc specrand.bc$/;"	m
OMEGA	ratectl.c	/^const double OMEGA=0.9;$/;"	v
ONE	biariencode.h	41;"	d
ONE_FOURTH_TAP	image.c	/^const int ONE_FOURTH_TAP[3][2] =$/;"	v
OPENFLAGS_READ	global.h	77;"	d
OPENFLAGS_READ	global.h	80;"	d
OPENFLAGS_WRITE	global.h	75;"	d
OPENFLAGS_WRITE	global.h	79;"	d
OPEN_PERMISSIONS	global.h	76;"	d
OPEN_PERMISSIONS	global.h	81;"	d
Offset8_inter_default	q_offsets.c	/^static const short Offset8_inter_default[64] =$/;"	v	file:
Offset8_intra_default_inter	q_offsets.c	/^static const short Offset8_intra_default_inter[64] =$/;"	v	file:
Offset8_intra_default_intra	q_offsets.c	/^static const short Offset8_intra_default_intra[64] =$/;"	v	file:
OffsetList4x4	q_offsets.c	/^short OffsetList4x4[9][16];$/;"	v
OffsetList4x4input	q_offsets.c	/^short OffsetList4x4input[9][16];$/;"	v
OffsetList8x8	q_offsets.c	/^short OffsetList8x8[3][64];$/;"	v
OffsetList8x8input	q_offsets.c	/^short OffsetList8x8input[3][64];$/;"	v
OffsetMatrixPresentFlag	global.h	/^  int  OffsetMatrixPresentFlag;                  \/\/!< Enable Explicit Quantization Offset Matrices$/;"	m	struct:__anon39
OffsetType4x4	q_offsets.c	/^static const char OffsetType4x4[9][24] =$/;"	v	file:
OffsetType8x8	q_offsets.c	/^static const char OffsetType8x8[3][24] =$/;"	v	file:
Offset_inter_default	q_offsets.c	/^static const short Offset_inter_default[16] =$/;"	v	file:
Offset_intra_default_inter	q_offsets.c	/^static const short Offset_intra_default_inter[16] =$/;"	v	file:
Offset_intra_default_intra	q_offsets.c	/^static const short Offset_intra_default_intra[16] =$/;"	v	file:
OneComponentChromaPrediction4x4	macroblock.c	/^OneComponentChromaPrediction4x4 (int*        mpred,      \/\/!< array to store prediction values$/;"	f
OneComponentLumaPrediction4x4	macroblock.c	/^OneComponentLumaPrediction4x4 (int*   mpred,      \/\/  --> array of prediction values (row by row)$/;"	f
OpenAnnexbFile	annexb.c	/^void OpenAnnexbFile (char *Filename)$/;"	f
OpenRTPFile	rtp.c	/^void OpenRTPFile (char *Filename)$/;"	f
P8x8	defines.h	99;"	d
PAR_DP_1	global.h	/^  PAR_DP_1,   \/\/!< no data partitioning is supported$/;"	e	enum:__anon20
PAR_DP_3	global.h	/^  PAR_DP_3,   \/\/!< data partitioning with 3 partitions$/;"	e	enum:__anon20
PAR_DP_TYPE	global.h	/^} PAR_DP_TYPE;$/;"	t	typeref:enum:__anon20
PAR_OF_ANNEXB	global.h	/^  PAR_OF_ANNEXB,    \/\/!< Annex B byte stream format$/;"	e	enum:__anon21
PAR_OF_RTP	global.h	/^  PAR_OF_RTP,       \/\/!< RTP packets in outfile$/;"	e	enum:__anon21
PAR_OF_TYPE	global.h	/^} PAR_OF_TYPE;$/;"	t	typeref:enum:__anon21
PAveFrameQP	ratectl.c	/^int PAveFrameQP;$/;"	v
PAveFrameQP	ratectl.h	/^int PAveFrameQP;$/;"	v
PAveHeaderBits1	ratectl.c	/^int PAveHeaderBits1;$/;"	v
PAveHeaderBits1	ratectl.h	/^int PAveHeaderBits1;$/;"	v
PAveHeaderBits2	ratectl.c	/^int PAveHeaderBits2;$/;"	v
PAveHeaderBits2	ratectl.h	/^int PAveHeaderBits2;$/;"	v
PAveHeaderBits3	ratectl.c	/^int PAveHeaderBits3;$/;"	v
PAveHeaderBits3	ratectl.h	/^int PAveHeaderBits3;$/;"	v
PAverageQp	ratectl.c	/^int PAverageQp;$/;"	v
PAverageQp	ratectl.h	/^int PAverageQp;$/;"	v
PDuantQp	ratectl.c	/^int PDuantQp;$/;"	v
PLANE_16	defines.h	161;"	d
PLANE_8	defines.h	167;"	d
PMADPictureC1	ratectl.c	/^double PMADPictureC1;$/;"	v
PMADPictureC1	ratectl.h	/^double PMADPictureC1;$/;"	v
PMADPictureC2	ratectl.c	/^double PMADPictureC2;$/;"	v
PMADPictureC2	ratectl.h	/^double PMADPictureC2;$/;"	v
PPictureMAD	ratectl.c	/^double PPictureMAD[21];$/;"	v
PPictureMAD	ratectl.h	/^double PPictureMAD[21];$/;"	v
PPreHeader	ratectl.c	/^int PPreHeader;$/;"	v
PPreHeader	ratectl.h	/^int PPreHeader;$/;"	v
PRINT_PAN_SCAN_RECT	sei.c	1287;"	d	file:
PRINT_RANDOM_ACCESS	sei.c	1635;"	d	file:
PRINT_USER_DATA_REGISTERED_ITU_T_T35_INFO	sei.c	1526;"	d	file:
PRINT_USER_DATA_UNREGISTERED_INFO	sei.c	1389;"	d	file:
PROFILE_IDC	configfile.h	18;"	d
P_A	block.c	77;"	d	file:
P_A	transform8x8.c	652;"	d	file:
P_B	block.c	78;"	d	file:
P_B	transform8x8.c	653;"	d	file:
P_C	block.c	79;"	d	file:
P_C	transform8x8.c	654;"	d	file:
P_D	block.c	80;"	d	file:
P_D	transform8x8.c	655;"	d	file:
P_E	block.c	81;"	d	file:
P_E	transform8x8.c	656;"	d	file:
P_F	block.c	82;"	d	file:
P_F	transform8x8.c	657;"	d	file:
P_G	block.c	83;"	d	file:
P_G	transform8x8.c	658;"	d	file:
P_H	block.c	84;"	d	file:
P_H	transform8x8.c	659;"	d	file:
P_I	block.c	85;"	d	file:
P_I	transform8x8.c	660;"	d	file:
P_J	block.c	86;"	d	file:
P_J	transform8x8.c	661;"	d	file:
P_K	block.c	87;"	d	file:
P_K	transform8x8.c	662;"	d	file:
P_L	block.c	88;"	d	file:
P_L	transform8x8.c	663;"	d	file:
P_List0_refs	global.h	/^  int P_List0_refs;$/;"	m	struct:__anon39
P_M	transform8x8.c	664;"	d	file:
P_N	transform8x8.c	665;"	d	file:
P_O	transform8x8.c	666;"	d	file:
P_P	transform8x8.c	667;"	d	file:
P_Q	transform8x8.c	668;"	d	file:
P_R	transform8x8.c	669;"	d	file:
P_S	transform8x8.c	670;"	d	file:
P_SLICE	global.h	/^  P_SLICE = 0,$/;"	e	enum:__anon29
P_T	transform8x8.c	671;"	d	file:
P_U	transform8x8.c	672;"	d	file:
P_V	transform8x8.c	673;"	d	file:
P_W	transform8x8.c	674;"	d	file:
P_X	block.c	76;"	d	file:
P_X	transform8x8.c	675;"	d	file:
P_Z	transform8x8.c	651;"	d	file:
PaddAutoCropBorders	image.c	/^static void PaddAutoCropBorders (int org_size_x, int org_size_y, int img_size_x, int img_size_y,$/;"	f	file:
ParameterNameToMapIndex	configfile.c	/^static int ParameterNameToMapIndex (char *s)$/;"	f	file:
ParseContent	configfile.c	/^void ParseContent (char *buf, int bufsize)$/;"	f
ParseMatrix	q_matrix.c	/^void ParseMatrix (char *buf, int bufsize)$/;"	f
ParseQOffsetMatrix	q_offsets.c	/^void ParseQOffsetMatrix (char *buf, int bufsize)$/;"	f
PartCalMad	fast_me.c	/^int PartCalMad(pel_t *ref_pic,pel_t** orig_pic,pel_t *(*get_ref_line)(int, pel_t*, int, int, int, int), int blocksize_y,int blocksize_x, int blocksize_x4,int mcost,int min_mcost,int cand_x,int cand_y)$/;"	f
PartitionMotionSearch	mv-search.c	/^PartitionMotionSearch (int    blocktype,$/;"	f
Partition_BC_Header	header.c	/^int Partition_BC_Header(int PartNo)$/;"	f
PatchInp	configfile.c	/^static void PatchInp ()$/;"	f	file:
PatchInputNoFrames	configfile.c	/^void PatchInputNoFrames()$/;"	f
PatchMatrix	q_matrix.c	/^void PatchMatrix(void)$/;"	f
PelY_14	fast_me.c	/^static pel_t (*PelY_14) (pel_t**, int, int, int, int);$/;"	v	file:
PelY_14	mv-search.c	/^static pel_t  (*PelY_14)     (pel_t**, int, int, int, int);$/;"	v	file:
PelY_14b	mv-search.c	/^static pel_t  (*PelY_14b)    (pel_t**, int, int, int, int);$/;"	v	file:
PelYline_11	mv-search.c	/^static pel_t *(*PelYline_11) (pel_t *, int, int, int, int);$/;"	v	file:
Pframe_ctr	global.h	/^int  Iframe_ctr, Pframe_ctr,Bframe_ctr;$/;"	v
Pframe_ctr	lencod.c	/^int  Iframe_ctr, Pframe_ctr,Bframe_ctr;$/;"	v
PicHeightInMapUnits	global.h	/^  unsigned PicHeightInMapUnits;$/;"	m	struct:__anon40
PicHeightInMbs	global.h	/^  unsigned PicHeightInMbs;$/;"	m	struct:__anon40
PicInterlace	global.h	/^  int PicInterlace;           \/\/!< picture adaptive frame\/field$/;"	m	struct:__anon39
PicParSet	parset.c	/^pic_parameter_set_rbsp_t PicParSet[MAXPPS];$/;"	v
PicSizeInMapUnits	fmo.c	/^unsigned PicSizeInMapUnits;$/;"	v
PicSizeInMbs	global.h	/^  unsigned PicSizeInMbs;$/;"	m	struct:__anon40
PicWidthInMbs	global.h	/^  unsigned PicWidthInMbs;$/;"	m	struct:__anon40
Picture	global.h	/^} Picture;$/;"	t	typeref:struct:__anon36
PictureMAD	ratectl.c	/^double PictureMAD[21];$/;"	v
PictureMAD	ratectl.h	/^double PictureMAD[21];$/;"	v
PictureRejected	ratectl.c	/^Boolean PictureRejected[21];$/;"	v
PictureRejected	ratectl.h	/^Boolean PictureRejected[21];$/;"	v
PictureStructure	global.h	/^} PictureStructure;           \/\/!< New enum for field processing$/;"	t	typeref:enum:__anon28
PixelPos	global.h	/^} PixelPos;$/;"	t	typeref:struct:pix_pos
Place	configfile.h	/^  void *Place;$/;"	m	struct:__anon44
Pm_Hp	ratectl.c	/^int Pm_Hp;$/;"	v
Pm_Hp	ratectl.h	/^int Pm_Hp;$/;"	v
Pm_Qp	ratectl.c	/^int Pm_Qp;$/;"	v
Pm_Qp	ratectl.h	/^int Pm_Qp;$/;"	v
Pm_X1	ratectl.c	/^double Pm_X1;$/;"	v
Pm_X1	ratectl.h	/^double Pm_X1;$/;"	v
Pm_X2	ratectl.c	/^double Pm_X2;$/;"	v
Pm_X2	ratectl.h	/^double Pm_X2;$/;"	v
Pm_rgQp	ratectl.c	/^double Pm_rgQp[20];$/;"	v
Pm_rgQp	ratectl.h	/^double Pm_rgQp[20];$/;"	v
Pm_rgRp	ratectl.c	/^double Pm_rgRp[20];$/;"	v
Pm_rgRp	ratectl.h	/^double Pm_rgRp[20];$/;"	v
PocMemoryManagement	global.h	/^  int PocMemoryManagement;       \/\/!< Memory management based on Poc distances for PyramidCoding$/;"	m	struct:__anon39
Pprev_bits	ratectl.c	/^int Pprev_bits=0;$/;"	v
PreAveMBHeader	ratectl.c	/^int PreAveMBHeader;$/;"	v
PreAveMBHeader	ratectl.h	/^int PreAveMBHeader;$/;"	v
PreviousBit_Rate	ratectl.c	/^double PreviousBit_Rate;\/\/LIZG  25\/10\/2002$/;"	v
PreviousBit_Rate	ratectl.h	/^double PreviousBit_Rate;\/\/LIZG  25\/10\/2002$/;"	v
PreviousFrameMAD	ratectl.c	/^double PreviousFrameMAD;$/;"	v
PreviousFrameMAD	ratectl.h	/^double PreviousFrameMAD;$/;"	v
PreviousPictureMAD	ratectl.c	/^double PreviousPictureMAD;$/;"	v
PreviousPictureMAD	ratectl.h	/^double PreviousPictureMAD;$/;"	v
PreviousQp1	ratectl.c	/^int PreviousQp1;$/;"	v
PreviousQp1	ratectl.h	/^int PreviousQp1;$/;"	v
PreviousQp2	ratectl.c	/^int PreviousQp2;$/;"	v
PreviousQp2	ratectl.h	/^int PreviousQp2;$/;"	v
ProfileCheck	configfile.c	/^static void ProfileCheck()$/;"	f	file:
ProfileIDC	global.h	/^  int ProfileIDC;               \/\/!< profile idc$/;"	m	struct:__anon39
PutBigDoubleWord	leaky_bucket.c	/^void PutBigDoubleWord(unsigned long dw, FILE *fp)$/;"	f
PutPel_11	refbuf.c	/^void PutPel_11 (pel_t *Pic, int y, int x, pel_t val, int width)$/;"	f
PutPel_14	refbuf.c	/^void PutPel_14 (pel_t **Pic, int y, int x, pel_t val)$/;"	f
PyramidCoding	global.h	/^  int PyramidCoding;$/;"	m	struct:__anon39
PyramidRefReorder	global.h	/^  int PyramidRefReorder;       \/\/!< Reordering based on Poc distances for PyramidCoding$/;"	m	struct:__anon39
QOffsetMatrixFile	global.h	/^  char QOffsetMatrixFile[FILE_NAME_SIZE];        \/\/!< Quantization Offset matrix cfg file$/;"	m	struct:__anon39
QP	image.c	/^int    QP;$/;"	v
QP	lencod.c	/^int QP,QP2; \/\/ added by SPEC because QP is defined in ratectl.c and image.c$/;"	v
QP	rdopt.c	/^int QP,QP2;$/;"	v
QP2	lencod.c	/^int QP,QP2; \/\/ added by SPEC because QP is defined in ratectl.c and image.c$/;"	v
QP2	rdopt.c	/^int QP,QP2;$/;"	v
QP2QUANT	mv-search.h	/^const int QP2QUANT[40]=$/;"	v
QP2Qstep	ratectl.c	/^double QP2Qstep( int QP )$/;"	f
QPLastGOP	ratectl.c	/^int QPLastGOP;$/;"	v
QPLastGOP	ratectl.h	/^int QPLastGOP;$/;"	v
QPLastPFrame	ratectl.c	/^int QPLastPFrame;$/;"	v
QPLastPFrame	ratectl.h	/^int QPLastPFrame;$/;"	v
QP_SCALE_CR	block.h	/^const byte QP_SCALE_CR[52]=$/;"	v
QUARTER	biariencode.h	43;"	d
Q_BITS	defines.h	193;"	d
Q_BITS	fast_me.c	54;"	d	file:
Q_BITS_8	defines.h	197;"	d
QmatrixFile	global.h	/^  char QmatrixFile[FILE_NAME_SIZE];        \/\/!< Q matrix cfg file$/;"	m	struct:__anon39
Qstep2QP	ratectl.c	/^int Qstep2QP( double Qstep )$/;"	f
Quant8_inter_default	q_matrix.c	/^static const short Quant8_inter_default[64] =$/;"	v	file:
Quant8_intra_default	q_matrix.c	/^static const short Quant8_intra_default[64] =$/;"	v	file:
Quant_inter_default	q_matrix.c	/^static const short Quant_inter_default[16] =$/;"	v	file:
Quant_intra_default	q_matrix.c	/^static const short Quant_intra_default[16] =$/;"	v	file:
Quantize_step	fast_me.c	/^float Quantize_step;$/;"	v
Quantize_step	fast_me.h	/^float Quantize_step;$/;"	v
R	ratectl.c	/^static int R,T_field;$/;"	v	file:
RBSPtoEBSP	nal.c	/^int RBSPtoEBSP(byte *streamBuffer, int begin_bytepos, int end_bytepos, int min_num_bytes)$/;"	f
RBSPtoNALU	nalu.c	/^int RBSPtoNALU (char *rbsp, NALU_t *nalu, int rbsp_size, int nal_unit_type, int nal_reference_idc, $/;"	f
RCEnable	global.h	/^  int RCEnable;    $/;"	m	struct:__anon39
RCModelEstimator	ratectl.c	/^void RCModelEstimator (int n_windowSize)$/;"	f
RC_MAX_QUANT	ratectl.c	/^int RC_MAX_QUANT;\/\/LIZG 28\/10\/2002$/;"	v
RC_MAX_QUANT	ratectl.h	/^int RC_MAX_QUANT;\/\/LIZG 28\/10\/2002$/;"	v
RC_MIN_QUANT	ratectl.c	/^int RC_MIN_QUANT;\/\/LIZG 28\/10\/2002$/;"	v
RC_MIN_QUANT	ratectl.h	/^int RC_MIN_QUANT;\/\/LIZG 28\/10\/2002$/;"	v
RDBSliceWeightOnly	global.h	/^  int RDBSliceWeightOnly;        \/\/!< If enabled, does not check QP variations for B slices.$/;"	m	struct:__anon39
RDCost_for_4x4Blocks_Chroma	rdopt.c	/^int RDCost_for_4x4Blocks_Chroma (int     b8,$/;"	f
RDCost_for_4x4IntraBlocks	rdopt.c	/^double RDCost_for_4x4IntraBlocks (int*    nonzero,$/;"	f
RDCost_for_8x8IntraBlocks	transform8x8.c	/^double RDCost_for_8x8IntraBlocks(int *nonzero, int b8, int ipmode, double lambda, double min_rdcost, int mostProbableMode)$/;"	f
RDCost_for_8x8blocks	rdopt.c	/^double RDCost_for_8x8blocks (int*    cnt_nonz,   \/\/ --> number of nonzero coefficients$/;"	f
RDCost_for_macroblocks	rdopt.c	/^int RDCost_for_macroblocks (double   lambda,       \/\/ <-- lagrange multiplier$/;"	f
RDPSliceWeightOnly	global.h	/^  int RDPSliceWeightOnly;        \/\/!< If enabled, does not check QP variations for P slices.$/;"	m	struct:__anon39
RDPictureDecision	global.h	/^  int RDPictureDecision;         \/\/!< Perform RD optimal decision between various coded versions of same picture$/;"	m	struct:__anon39
RDPictureIntra	global.h	/^  int RDPictureIntra;            \/\/!< Enabled RD pic decision for intra as well.$/;"	m	struct:__anon39
RD_DATA	global.h	/^} RD_DATA;$/;"	t	typeref:struct:__anon42
REF_COST	defines.h	115;"	d
RELIABLE_COUNT	context_ini.c	27;"	d	file:
RMPNI	global.h	/^  int RMPNI;$/;"	m	struct:RMPNIbuffer_s
RMPNIbuffer_s	global.h	/^typedef struct RMPNIbuffer_s$/;"	s
RMPNIbuffer_t	global.h	/^} RMPNIbuffer_t;$/;"	t	typeref:struct:RMPNIbuffer_s
RSD	mbuffer.c	2742;"	d	file:
RTPUpdateTimestamp	rtp.c	/^void RTPUpdateTimestamp (int tr)$/;"	f
RTP_TR_TIMESTAMP_MULT	rtp.h	27;"	d
RTPpacket_t	rtp.h	/^} RTPpacket_t;$/;"	t	typeref:struct:__anon17
RUNBEFORE_NUM	defines.h	53;"	d
RandomIntra	intrarefresh.c	/^int RandomIntra (int mb)$/;"	f
RandomIntraInit	intrarefresh.c	/^void RandomIntraInit(int xsize, int ysize, int refresh)$/;"	f
RandomIntraMBRefresh	global.h	/^  int RandomIntraMBRefresh;     \/\/!< Number of pseudo-random intra-MBs per picture$/;"	m	struct:__anon39
RandomIntraNewPicture	intrarefresh.c	/^void RandomIntraNewPicture ()$/;"	f
RandomIntraUninit	intrarefresh.c	/^void RandomIntraUninit()$/;"	f
ReadOneFrame	image.c	/^static void ReadOneFrame (int FrameNoInFile, int HeaderSize, int xs, int ys, int xs_cr, int ys_cr)$/;"	f	file:
ReconFile	global.h	/^  char ReconFile[FILE_NAME_SIZE];          \/\/!< Reconstructed Pictures$/;"	m	struct:__anon39
RefBlock	global.h	/^  imgpel **RefBlock;$/;"	m	struct:__anon37
ReferenceMAD	ratectl.c	/^double ReferenceMAD[21];$/;"	v
ReferenceMAD	ratectl.h	/^double ReferenceMAD[21];$/;"	v
RefreshPattern	intrarefresh.c	/^static int *RefreshPattern;$/;"	v	file:
ReportB	image.c	/^static void ReportB(int tmp_time, int me_time)$/;"	f	file:
ReportFirstframe	image.c	/^static void ReportFirstframe(int tmp_time,int me_time)$/;"	f	file:
ReportFrameStats	global.h	/^  int ReportFrameStats;$/;"	m	struct:__anon39
ReportIntra	image.c	/^static void ReportIntra(int tmp_time, int me_time)$/;"	f	file:
ReportNALNonVLCBits	image.c	/^static void ReportNALNonVLCBits(int tmp_time, int me_time)$/;"	f	file:
ReportP	image.c	/^static void ReportP(int tmp_time, int me_time)$/;"	f	file:
ReportRB	image.c	/^static void ReportRB(int tmp_time, int me_time)$/;"	f	file:
ReportSP	image.c	/^static void ReportSP(int tmp_time, int me_time)$/;"	f	file:
ResendPPS	global.h	/^  int ResendPPS;$/;"	m	struct:__anon39
ResetFastFullIntegerSearch	mv-search.c	/^ResetFastFullIntegerSearch ()$/;"	f
RestoreMV8x8	rdopt.c	/^void RestoreMV8x8(int dir)$/;"	f
RestoreMVBlock8x8	rdopt.c	/^void RestoreMVBlock8x8(int dir, int block8x8, int mode, int ref, int bw_ref, int pdir8, int bframe)$/;"	f
RestrictRef	global.h	/^  int RestrictRef;$/;"	m	struct:__anon39
SATD	mv-search.c	/^SATD (int* diff, int use_hadamard)$/;"	f
SATD8X8	mv-search.c	/^SATD8X8 (int* diff, int use_hadamard)$/;"	f
SCAN_YUV422	block.h	/^const byte SCAN_YUV422  [8][2] =$/;"	v
SEARCH_ONE_PIXEL	fast_me.h	53;"	d
SEARCH_ONE_PIXEL1	fast_me.h	68;"	d
SEI_BUFFERING_PERIOD	sei.h	/^  SEI_BUFFERING_PERIOD,$/;"	e	enum:__anon6
SEI_CLOCK_TIMESTAMP	sei.h	/^  SEI_CLOCK_TIMESTAMP,$/;"	e	enum:__anon6
SEI_FILLER_PAYLOAD	sei.h	/^  SEI_FILLER_PAYLOAD,$/;"	e	enum:__anon6
SEI_H	sei.h	16;"	d
SEI_HRD_PICTURE	sei.h	/^  SEI_HRD_PICTURE,$/;"	e	enum:__anon6
SEI_MAX_ELEMENTS	sei.h	/^  SEI_MAX_ELEMENTS  \/\/!< number of maximum syntax elements$/;"	e	enum:__anon6
SEI_PACKET_TYPE	sei.h	46;"	d
SEI_PANSCAN_RECT	sei.h	/^  SEI_PANSCAN_RECT,$/;"	e	enum:__anon6
SEI_RANDOM_ACCESS_POINT	sei.h	/^  SEI_RANDOM_ACCESS_POINT,$/;"	e	enum:__anon6
SEI_REF_PIC_BUFFER_MANAGEMENT_REPETITION	sei.h	/^  SEI_REF_PIC_BUFFER_MANAGEMENT_REPETITION,$/;"	e	enum:__anon6
SEI_SCENE_INFORMATION	sei.h	/^  SEI_SCENE_INFORMATION,$/;"	e	enum:__anon6
SEI_SPARE_PICTURE	sei.h	/^  SEI_SPARE_PICTURE,$/;"	e	enum:__anon6
SEI_SUBSEQ_CHARACTERISTICS	sei.h	/^  SEI_SUBSEQ_CHARACTERISTICS,$/;"	e	enum:__anon6
SEI_SUBSEQ_INFORMATION	sei.h	/^  SEI_SUBSEQ_INFORMATION,$/;"	e	enum:__anon6
SEI_SUBSEQ_LAYER_CHARACTERISTICS	sei.h	/^  SEI_SUBSEQ_LAYER_CHARACTERISTICS,$/;"	e	enum:__anon6
SEI_TEMPORAL_REF	sei.h	/^  SEI_TEMPORAL_REF,$/;"	e	enum:__anon6
SEI_USER_DATA_REGISTERED_ITU_T_T35	sei.h	/^  SEI_USER_DATA_REGISTERED_ITU_T_T35,$/;"	e	enum:__anon6
SEI_USER_DATA_UNREGISTERED	sei.h	/^  SEI_USER_DATA_UNREGISTERED,$/;"	e	enum:__anon6
SEI_ZERO	sei.h	/^  SEI_ZERO,        \/\/!< 0 is undefined, useless$/;"	e	enum:__anon6
SEI_type	sei.h	/^} SEI_type;$/;"	t	typeref:enum:__anon6
SE_BFRAME	global.h	/^  SE_BFRAME,$/;"	e	enum:__anon23
SE_CBP_INTER	global.h	/^  SE_CBP_INTER,$/;"	e	enum:__anon23
SE_CBP_INTRA	global.h	/^  SE_CBP_INTRA,$/;"	e	enum:__anon23
SE_CHR_AC_INTER	global.h	/^  SE_CHR_AC_INTER,$/;"	e	enum:__anon23
SE_CHR_AC_INTRA	global.h	/^  SE_CHR_AC_INTRA,$/;"	e	enum:__anon23
SE_CHR_DC_INTER	global.h	/^  SE_CHR_DC_INTER,$/;"	e	enum:__anon23
SE_CHR_DC_INTRA	global.h	/^  SE_CHR_DC_INTRA,$/;"	e	enum:__anon23
SE_DELTA_QUANT_INTER	global.h	/^  SE_DELTA_QUANT_INTER,$/;"	e	enum:__anon23
SE_DELTA_QUANT_INTRA	global.h	/^  SE_DELTA_QUANT_INTRA,$/;"	e	enum:__anon23
SE_EOS	global.h	/^  SE_EOS,$/;"	e	enum:__anon23
SE_HEADER	global.h	/^  SE_HEADER,$/;"	e	enum:__anon23
SE_INTRAPREDMODE	global.h	/^  SE_INTRAPREDMODE,$/;"	e	enum:__anon23
SE_LUM_AC_INTER	global.h	/^  SE_LUM_AC_INTER,$/;"	e	enum:__anon23
SE_LUM_AC_INTRA	global.h	/^  SE_LUM_AC_INTRA,$/;"	e	enum:__anon23
SE_LUM_DC_INTER	global.h	/^  SE_LUM_DC_INTER,$/;"	e	enum:__anon23
SE_LUM_DC_INTRA	global.h	/^  SE_LUM_DC_INTRA,$/;"	e	enum:__anon23
SE_MAX_ELEMENTS	global.h	/^  SE_MAX_ELEMENTS  \/\/!< number of maximum syntax elements$/;"	e	enum:__anon23
SE_MBTYPE	global.h	/^  SE_MBTYPE,$/;"	e	enum:__anon23
SE_MVD	global.h	/^  SE_MVD,$/;"	e	enum:__anon23
SE_PTYPE	global.h	/^  SE_PTYPE,$/;"	e	enum:__anon23
SE_REFFRAME	global.h	/^  SE_REFFRAME,$/;"	e	enum:__anon23
SE_TRANSFORM_SIZE_FLAG	global.h	/^  SE_TRANSFORM_SIZE_FLAG,$/;"	e	enum:__anon23
SE_type	global.h	/^} SE_type;         \/\/ substituting the definitions in elements.h$/;"	t	typeref:enum:__anon23
SHIFT_QP	defines.h	131;"	d
SI4MB	defines.h	103;"	d
SIZEslice_group_id	parsetcommon.h	31;"	d
SI_SLICE	global.h	/^  SI_SLICE$/;"	e	enum:__anon29
SNGL_SCAN	block.h	/^const byte SNGL_SCAN[16][2] =$/;"	v
SNGL_SCAN8x8	transform8x8.c	/^const byte SNGL_SCAN8x8[64][2] = {$/;"	v
SNRParameters	global.h	/^} SNRParameters;$/;"	t	typeref:struct:__anon38
SODBtoRBSP	nal.c	/^void SODBtoRBSP(Bitstream *currStream)$/;"	f
SPDetectionThreshold	global.h	/^  int SPDetectionThreshold;$/;"	m	struct:__anon39
SPPercentageThreshold	global.h	/^  int SPPercentageThreshold;$/;"	m	struct:__anon39
SP_SLICE	global.h	/^  SP_SLICE,$/;"	e	enum:__anon29
SYMTRACESTRING	header.c	33;"	d	file:
SYMTRACESTRING	header.c	35;"	d	file:
SYMTRACESTRING	rtp.c	28;"	d	file:
SYMTRACESTRING	rtp.c	30;"	d	file:
SYMTRACESTRING	vlc.c	29;"	d	file:
SYMTRACESTRING	vlc.c	31;"	d	file:
ScalingList4x4	q_matrix.c	/^short ScalingList4x4[6][16];$/;"	v
ScalingList4x4input	q_matrix.c	/^short ScalingList4x4input[6][16];$/;"	v
ScalingList8x8	q_matrix.c	/^short ScalingList8x8[2][64];$/;"	v
ScalingList8x8input	q_matrix.c	/^short ScalingList8x8input[2][64];$/;"	v
ScalingListPresentFlag	global.h	/^  int ScalingListPresentFlag[8];$/;"	m	struct:__anon39
ScalingMatrixPresentFlag	global.h	/^  int ScalingMatrixPresentFlag;$/;"	m	struct:__anon39
Scaling_List	parset.c	/^int Scaling_List(short *scalingListinput, short *scalingList, int sizeOfScalingList, short *UseDefaultScalingMatrix, DataPartition *partition)$/;"	f
SearchState	fast_me.c	/^byte **SearchState; \/\/state for fractional pel search$/;"	v
SearchState	fast_me.h	/^byte **SearchState; \/\/state for fractional pel search$/;"	v
SeinitialQP	global.h	/^  int SeinitialQP;$/;"	m	struct:__anon39
SeqParSet	parset.c	/^seq_parameter_set_rbsp_t SeqParSet[MAXSPS];$/;"	v
SetCoeffAndReconstruction8x8	rdopt.c	/^void SetCoeffAndReconstruction8x8 (Macroblock* currMB)$/;"	f
SetCtxModelNumber	context_ini.c	/^void SetCtxModelNumber ()$/;"	f
SetImgType	lencod.c	/^void SetImgType()$/;"	f
SetModesAndRefframe	macroblock.c	/^SetModesAndRefframe (int b8, short* p_dir, int* fw_mode, int* bw_mode, short* fw_ref, short* bw_ref)$/;"	f
SetModesAndRefframeForBlocks	rdopt.c	/^void SetModesAndRefframeForBlocks (int mode)$/;"	f
SetMotionVectorPredictor	mv-search.c	/^void SetMotionVectorPredictor (short  pmv[2],$/;"	f
SetMotionVectorsMB	rdopt.c	/^void SetMotionVectorsMB (Macroblock* currMB, int bframe)$/;"	f
SetRefAndMotionVectors	rdopt.c	/^void SetRefAndMotionVectors (int block, int mode, int pdir, int fwref, int bwref)$/;"	f
SetupFastFullPelSearch	mv-search.c	/^void SetupFastFullPelSearch (short ref, int list)  \/\/ <--  reference frame parameter, list0 or 1$/;"	f
SetupLargerBlocks	mv-search.c	/^SetupLargerBlocks (int list, int refindex, int max_pos)$/;"	f
SkipIntraInInterSlices	global.h	/^  int SkipIntraInInterSlices;    \/\/!< Skip intra type checking in inter slices if best_mode is skip\/direct$/;"	m	struct:__anon39
Slice	global.h	/^} Slice;$/;"	t	typeref:struct:__anon35
SliceGroupConfigFileName	global.h	/^  char SliceGroupConfigFileName[FILE_NAME_SIZE];    \/\/!< Filename for config info fot type 0, 2, 6	$/;"	m	struct:__anon39
SliceHeader	header.c	/^int SliceHeader()$/;"	f
SliceMode	global.h	/^} SliceMode;$/;"	t	typeref:enum:__anon26
SliceType	global.h	/^} SliceType;$/;"	t	typeref:enum:__anon29
Sort	leaky_bucket.c	/^void Sort(unsigned long NumberLeakyBuckets, unsigned long *Rmin)$/;"	f
SparePictureOption	global.h	/^  int SparePictureOption;$/;"	m	struct:__anon39
StatParameters	global.h	/^} StatParameters;$/;"	t	typeref:struct:__anon41
StorablePicture	mbuffer.h	/^} StorablePicture;$/;"	t	typeref:struct:storable_picture
StoreMV8x8	rdopt.c	/^void StoreMV8x8(int dir)$/;"	f
StoreMVBlock8x8	rdopt.c	/^void StoreMVBlock8x8(int dir, int block8x8, int mode, int ref, int bw_ref, int pdir8, int bframe)$/;"	f
StoreNewMotionVectorsBlock8x8	rdopt.c	/^void StoreNewMotionVectorsBlock8x8(int dir, int block8x8, int mode, int fw_ref, int bw_ref, int pdir8, int bframe)$/;"	f
SubPelBlockMotionSearch	mv-search.c	/^SubPelBlockMotionSearch (pel_t**   orig_pic,      \/\/ <--  original pixel values for the AxB block$/;"	f
SubPelBlockSearchBiPred	mv-search.c	/^SubPelBlockSearchBiPred (pel_t**   orig_pic,      \/\/ <--  original pixel values for the AxB block$/;"	f
Switch	ratectl.c	/^const int Switch=0;$/;"	v
SymbolMode	global.h	/^} SymbolMode;$/;"	t	typeref:enum:__anon27
SyntaxElement	global.h	/^} SyntaxElement;$/;"	t	typeref:struct:syntaxelement
T	ratectl.c	/^long T,T1;$/;"	v
T1	ratectl.c	/^long T,T1;$/;"	v
THETA	ratectl.c	/^const double THETA=1.3636;$/;"	v
TOP_FIELD	global.h	/^  TOP_FIELD,$/;"	e	enum:__anon28
TOTRUN_NUM	defines.h	52;"	d
TRACE	defines.h	23;"	d
TRACE	defines.h	25;"	d
TRACESTRING_SIZE	global.h	339;"	d
TRUE	parsetcommon.h	/^  TRUE$/;"	e	enum:__anon1
TRUE	parsetcommon.h	38;"	d
T_field	ratectl.c	/^static int R,T_field;$/;"	v	file:
TargetBufferLevel	ratectl.c	/^double TargetBufferLevel;\/\/LIZG 25\/10\/2002$/;"	v
TargetBufferLevel	ratectl.h	/^double TargetBufferLevel;\/\/LIZG 25\/10\/2002$/;"	v
TestEncoderParams	configfile.c	/^static int TestEncoderParams(int bitdepth_qp_scale)$/;"	f	file:
TextureInfoContexts	global.h	/^} TextureInfoContexts;$/;"	t	typeref:struct:__anon33
ThisPOC	global.h	/^    signed int ThisPOC;     \/\/!< current picture POC$/;"	m	struct:__anon40
Thresh4x4	fast_me.c	/^int Thresh4x4;$/;"	v
Thresh4x4	fast_me.h	/^int Thresh4x4;$/;"	v
TokenName	configfile.h	/^  char *TokenName;$/;"	m	struct:__anon44
TopFieldFlag	global.h	/^  int TopFieldFlag;$/;"	m	struct:__anon40
TotalBUMAD	ratectl.c	/^double TotalBUMAD;$/;"	v
TotalBUMAD	ratectl.h	/^double TotalBUMAD;$/;"	v
TotalBasicUnitBits	ratectl.c	/^int TotalBasicUnitBits;$/;"	v
TotalBasicUnitBits	ratectl.h	/^int TotalBasicUnitBits;$/;"	v
TotalFrameQP	ratectl.c	/^int TotalFrameQP;$/;"	v
TotalFrameQP	ratectl.h	/^int TotalFrameQP;$/;"	v
TotalMADBasicUnit	global.h	/^  double TotalMADBasicUnit;$/;"	m	struct:__anon40
TotalNumberofBasicUnit	ratectl.c	/^int TotalNumberofBasicUnit;$/;"	v
TotalNumberofBasicUnit	ratectl.h	/^int TotalNumberofBasicUnit;$/;"	v
TotalPFrame	ratectl.c	/^int TotalPFrame;$/;"	v
TotalQpforPPicture	global.h	/^  int TotalQpforPPicture;$/;"	m	struct:__anon40
TraceFile	global.h	/^  char TraceFile[FILE_NAME_SIZE];          \/\/!< Trace Outputs$/;"	m	struct:__anon39
TransformDecision	macroblock.c	/^TransformDecision (int block_check, int *cost)$/;"	f
Type	configfile.h	/^  int Type;$/;"	m	struct:__anon44
UMVLine16Y_11	refbuf.c	/^pel_t *UMVLine16Y_11 (pel_t *Pic, int y, int x, int height, int width)$/;"	f
UMVLineX	refbuf.c	/^pel_t *UMVLineX (int size, pel_t* Pic, int y, int x, int height, int width)$/;"	f
UMVPelY_14	refbuf.c	/^pel_t UMVPelY_14 (pel_t **Pic, int y, int x, int height, int width)$/;"	f
UVLC	global.h	/^  UVLC,$/;"	e	enum:__anon27
UnifiedOneForthPix	image.c	/^void UnifiedOneForthPix (StorablePicture *s)$/;"	f
UpdateDecoders	decoder.c	/^void UpdateDecoders()$/;"	f
UpdatePanScanRectInfo	sei.c	/^void UpdatePanScanRectInfo()$/;"	f
UpdatePixelMap	rdopt.c	/^void UpdatePixelMap()$/;"	f
UpdateRandomAccess	sei.c	/^void UpdateRandomAccess()$/;"	f
UpdateSceneInformation	sei.c	/^void UpdateSceneInformation(Boolean HasSceneInformation, int sceneID, int sceneTransType, int secondSceneID)$/;"	f
UpdateSubseqChar	sei.c	/^void UpdateSubseqChar()$/;"	f
UpdateSubseqInfo	sei.c	/^void UpdateSubseqInfo(int currLayer)$/;"	f
UpdateUser_data_registered_itu_t_t35	sei.c	/^void UpdateUser_data_registered_itu_t_t35()$/;"	f
UpdateUser_data_unregistered	sei.c	/^void UpdateUser_data_unregistered()$/;"	f
UpperBound1	ratectl.c	/^long UpperBound1, UpperBound2, LowerBound;$/;"	v
UpperBound2	ratectl.c	/^long UpperBound1, UpperBound2, LowerBound;$/;"	v
UseConstrainedIntraPred	global.h	/^  int UseConstrainedIntraPred;  \/\/!< 0: Inter MB pixels are allowed for intra prediction 1: Not allowed$/;"	m	struct:__anon39
UseDefaultScalingMatrix4x4Flag	q_matrix.c	/^short UseDefaultScalingMatrix4x4Flag[6];$/;"	v
UseDefaultScalingMatrix8x8Flag	q_matrix.c	/^short UseDefaultScalingMatrix8x8Flag[2];$/;"	v
UseExplicitLambdaParams	global.h	/^  int UseExplicitLambdaParams;$/;"	m	struct:__anon39
UseWeightedReferenceME	global.h	/^  int UseWeightedReferenceME;    \/\/!< Use Weighted Reference for ME.$/;"	m	struct:__anon39
VERSION	lencod.c	69;"	d	file:
VERT_LEFT_PRED	defines.h	154;"	d
VERT_PRED	defines.h	147;"	d
VERT_PRED_16	defines.h	158;"	d
VERT_PRED_8	defines.h	166;"	d
VERT_RIGHT_PRED	defines.h	152;"	d
Valid	parsetcommon.h	/^  Boolean   Valid;                  \/\/ indicates the parameter set is valid$/;"	m	struct:__anon4
Valid	parsetcommon.h	/^  Boolean   Valid;                  \/\/ indicates the parameter set is valid$/;"	m	struct:__anon5
WEIGHTED_COST	defines.h	111;"	d
WalkAround	intrarefresh.c	/^static int WalkAround = 0;$/;"	v	file:
Wb	ratectl.c	/^double Wp,Wb; $/;"	v
WeightedBiprediction	global.h	/^  int WeightedBiprediction;      \/\/!< Weighted prediciton for B frames (0: not used, 1: explicit, 2: implicit)$/;"	m	struct:__anon39
WeightedPrediction	global.h	/^  int WeightedPrediction;        \/\/!< Weighted prediciton for P frames (0: not used, 1: explicit)$/;"	m	struct:__anon39
Wp	ratectl.c	/^double Wp,Wb; $/;"	v
WriteAnnexbNALU	annexb.c	/^int WriteAnnexbNALU (NALU_t *n)$/;"	f
WriteNALU	nalu.c	/^int (*WriteNALU)(NALU_t *n);     \/\/! Hides the write function in Annex B or RTP$/;"	v
WriteNALU	nalu.h	/^int (*WriteNALU)(NALU_t *n);     \/\/! Hides the write function in Annex B or RTP$/;"	v
WriteRTPNALU	rtp.c	/^int WriteRTPNALU (NALU_t *n)$/;"	f
WriteRTPPacket	rtp.c	/^int WriteRTPPacket (RTPpacket_t *p, FILE *f)$/;"	f
XRate	context_ini.c	/^double XRate (BiContextTypePtr ctx, const int* model)$/;"	f
Xb	ratectl.c	/^int Xp, Xb;$/;"	v
Xp	ratectl.c	/^int Xp, Xb;$/;"	v
YUV400	defines.h	38;"	d
YUV420	defines.h	39;"	d
YUV422	defines.h	40;"	d
YUV444	defines.h	41;"	d
ZEROBYTES_SHORTSTARTCODE	defines.h	190;"	d
ZEROSNR	defines.h	45;"	d
ZZ_SCAN	parset.c	/^static const byte ZZ_SCAN[16]  =$/;"	v	file:
ZZ_SCAN8	parset.c	/^static const byte ZZ_SCAN8[64] =$/;"	v	file:
ZeroRef	macroblock.c	/^ZeroRef (Macroblock* currMB)$/;"	f
_ADAPT_LAST_GROUP_	defines.h	75;"	d
_ANNEXB_H_	annexb.h	17;"	d
_A_MULTIPLIER	specrand.c	26;"	d	file:
_BIARIENCOD_H_	biariencode.h	22;"	d
_BLOCK_H_	block.h	19;"	d
_CABAC_H_	cabac.h	21;"	d
_CHANGE_QP_	defines.h	76;"	d
_CHROMA_COEFF_COST_	defines.h	84;"	d
_CONFIGFILE_H_	configfile.h	14;"	d
_CONTEXT_INI_	context_ini.h	17;"	d
_DEFINES_H_	defines.h	20;"	d
_ELEMENTS_H_	elements.h	23;"	d
_EXPLICIT_GOP_H_	explicit_gop.h	16;"	d
_FAST_FULL_ME_	defines.h	72;"	d
_FAST_ME_H_	fast_me.h	22;"	d
_FMO_H_	fmo.h	18;"	d
_FULL_SEARCH_RANGE_	defines.h	74;"	d
_GLOBAL_H_	global.h	29;"	d
_HEADER_H_	header.h	12;"	d
_IMAGE_H_	image.h	15;"	d
_INTRAREFRESH_H_	intrarefresh.h	18;"	d
_LEAKYBUCKET_	defines.h	77;"	d
_LEAKY_BUCKET_H_	leaky_bucket.h	16;"	d
_LUMA_8x8_COEFF_COST_	defines.h	86;"	d
_LUMA_COEFF_COST_	defines.h	83;"	d
_LUMA_MB_COEFF_COST_	defines.h	85;"	d
_MACROBLOCK_H_	macroblock.h	19;"	d
_MBUFFER_H_	mbuffer.h	16;"	d
_MB_ACCESS_H_	mb_access.h	16;"	d
_MEMALLOC_H_	memalloc.h	15;"	d
_MINMAX_	minmax.h	11;"	d
_MV_SEARCH_H_	mv-search.h	17;"	d
_M_MODULUS	specrand.c	27;"	d	file:
_NALUCOMMON_H_	nalucommon.h	17;"	d
_NALU_H_	nalu.h	18;"	d
_OUTPUT_H_	output.h	15;"	d
_PARSETCOMMON_H_	parsetcommon.h	27;"	d
_PARSET_H_	parset.h	18;"	d
_Q_MATRIX_H_	q_matrix.h	16;"	d
_Q_OFFSETS_H_	q_offsets.h	16;"	d
_Q_QUOTIENT	specrand.c	28;"	d	file:
_RATE_CTL_H_	ratectl.h	19;"	d
_RD_OPT_CS_H_	rdopt_coding_state.h	20;"	d
_REBUF_H_	refbuf.h	11;"	d
_RTP_H_	rtp.h	19;"	d
_R_REMAINDER	specrand.c	29;"	d	file:
_TRANSFORM8X8_H_	transform8x8.h	19;"	d
_VLC_H_	vlc.h	14;"	d
abs_contexts	global.h	/^  BiContextType  abs_contexts [NUM_BLOCK_TYPES][NUM_ABS_CTX];$/;"	m	struct:__anon33
abs_diff_pic_num_minus1_l0	global.h	/^  int                 *abs_diff_pic_num_minus1_l0;$/;"	m	struct:__anon35
abs_diff_pic_num_minus1_l1	global.h	/^  int                 *abs_diff_pic_num_minus1_l1;$/;"	m	struct:__anon35
absm	defines.h	90;"	d
active_pps	global.h	/^pic_parameter_set_rbsp_t *active_pps;$/;"	v
active_pps	lencod.c	/^pic_parameter_set_rbsp_t *active_pps;$/;"	v
active_sps	global.h	/^seq_parameter_set_rbsp_t *active_sps;$/;"	v
active_sps	lencod.c	/^seq_parameter_set_rbsp_t *active_sps;$/;"	v
actj	global.h	/^  double              actj;               \/\/ macroblock activity measure for macroblock j$/;"	m	struct:macroblock
adaptive_memory_management	mbuffer.c	/^static void adaptive_memory_management(StorablePicture* p)$/;"	f	file:
adaptive_ref_pic_buffering_flag	global.h	/^  int adaptive_ref_pic_buffering_flag;$/;"	m	struct:__anon40
all_blk_8x8	global.h	/^  int                 all_blk_8x8;$/;"	m	struct:macroblock
all_bwmincost	fast_me.c	/^int *****all_bwmincost;\/\/store for backward prediction$/;"	v
all_bwmincost	fast_me.h	/^int *****all_bwmincost;\/\/store for backward prediction$/;"	v
all_mincost	fast_me.c	/^int *****all_mincost;\/\/store the MV and SAD information needed;$/;"	v
all_mincost	fast_me.h	/^int *****all_mincost;\/\/store the MV and SAD information needed;$/;"	v
all_mv	global.h	/^  short  ******all_mv;         \/\/!< all modes motion vectors$/;"	m	struct:__anon42
all_mv	global.h	/^  short****** all_mv;                  \/\/!< replaces local all_mv$/;"	m	struct:__anon40
all_mv8x8	rdopt.c	/^short all_mv8x8[2][2][4][4][2];       \/\/[8x8_data\/temp_data][LIST][block_x][block_y][MVx\/MVy]$/;"	v
alloc_colocated	mbuffer.c	/^ColocatedParams* alloc_colocated(int size_x, int size_y, int mb_adaptive_frame_field_flag)$/;"	f
alloc_frame_store	mbuffer.c	/^FrameStore* alloc_frame_store()$/;"	f
alloc_ref_pic_list_reordering_buffer	mbuffer.c	/^void alloc_ref_pic_list_reordering_buffer(Slice *currSlice)$/;"	f
alloc_storable_picture	mbuffer.c	/^StorablePicture* alloc_storable_picture(PictureStructure structure, int size_x, int size_y, int size_x_cr, int size_y_cr)$/;"	f
arienco_bits_written	biariencode.c	/^int arienco_bits_written(EncodingEnvironmentPtr eep)$/;"	f
arienco_create_encoding_environment	biariencode.c	/^EncodingEnvironmentPtr arienco_create_encoding_environment()$/;"	f
arienco_delete_encoding_environment	biariencode.c	/^void arienco_delete_encoding_environment(EncodingEnvironmentPtr eep)$/;"	f
arienco_done_encoding	biariencode.c	/^void arienco_done_encoding(EncodingEnvironmentPtr eep)$/;"	f
arienco_start_encoding	biariencode.c	/^void arienco_start_encoding(EncodingEnvironmentPtr eep,$/;"	f
aspect_ratio_idc	parsetcommon.h	/^    unsigned  aspect_ratio_idc;                               \/\/ u(8)$/;"	m	struct:__anon3
aspect_ratio_info_present_flag	parsetcommon.h	/^  Boolean      aspect_ratio_info_present_flag;                   \/\/ u(1)$/;"	m	struct:__anon3
assignSE2partition	header.c	/^int * assignSE2partition[2] ;$/;"	v
assignSE2partition_DP	header.c	/^int assignSE2partition_DP[SE_MAX_ELEMENTS] =$/;"	v
assignSE2partition_NoDP	header.c	/^int assignSE2partition_NoDP[SE_MAX_ELEMENTS] =$/;"	v
auto_crop_bottom	global.h	/^  int auto_crop_bottom;$/;"	m	struct:__anon40
auto_crop_right	global.h	/^  int auto_crop_right;$/;"	m	struct:__anon40
available	global.h	/^  int available;$/;"	m	struct:pix_pos
available	sei.h	/^  Boolean available;$/;"	m	struct:__anon7
average_bit_rate	sei.h	/^  unsigned int average_bit_rate;$/;"	m	struct:__anon11
average_frame_rate	sei.h	/^  unsigned int average_frame_rate;$/;"	m	struct:__anon11
average_rate_flag	sei.h	/^  unsigned int average_rate_flag;$/;"	m	struct:__anon11
b4_intra_pred_modes	rdopt.c	/^int   b4_ipredmode[16], b4_intra_pred_modes[16];$/;"	v
b4_ipredmode	rdopt.c	/^int   b4_ipredmode[16], b4_intra_pred_modes[16];$/;"	v
b8_intra_pred_modes8x8	global.h	/^int b8_ipredmode8x8[4][4], b8_intra_pred_modes8x8[16];$/;"	v
b8_intra_pred_modes8x8	lencod.c	/^int b8_ipredmode8x8[4][4], b8_intra_pred_modes8x8[16];$/;"	v
b8_ipredmode8x8	global.h	/^int b8_ipredmode8x8[4][4], b8_intra_pred_modes8x8[16];$/;"	v
b8_ipredmode8x8	lencod.c	/^int b8_ipredmode8x8[4][4], b8_intra_pred_modes8x8[16];$/;"	v
b8_mode_0_use	global.h	/^  int   b8_mode_0_use[NUM_PIC_TYPE][2];$/;"	m	struct:__anon41
b8_type_contexts	global.h	/^  BiContextType b8_type_contexts [2][NUM_B8_TYPE_CTX];$/;"	m	struct:__anon32
b8mode	global.h	/^  int                 b8mode[4];$/;"	m	struct:macroblock
b8mode	global.h	/^  int    b8mode[4], b8pdir[4];$/;"	m	struct:__anon42
b8mode	rdopt.c	/^short   frefframe[4][4], brefframe[4][4], b8mode[4], b8pdir[4];$/;"	v
b8pdir	global.h	/^  int                 b8pdir[4];$/;"	m	struct:macroblock
b8pdir	global.h	/^  int    b8mode[4], b8pdir[4];$/;"	m	struct:__anon42
b8pdir	rdopt.c	/^short   frefframe[4][4], brefframe[4][4], b8mode[4], b8pdir[4];$/;"	v
b_frame_to_code	global.h	/^  int b_frame_to_code;$/;"	m	struct:__anon40
b_interval	global.h	/^  double b_interval;$/;"	m	struct:__anon40
basicunit	global.h	/^  int basicunit;$/;"	m	struct:__anon39
bcbp_contexts	global.h	/^  BiContextType  bcbp_contexts[NUM_BLOCK_TYPES][NUM_BCBP_CTX];$/;"	m	struct:__anon33
best8x8bwref	rdopt.c	/^short   best8x8bwref [MAXMODE][4];       \/\/ [mode][block]$/;"	v
best8x8fwref	rdopt.c	/^short   best8x8fwref [MAXMODE][4];       \/\/ [mode][block]$/;"	v
best8x8mode	rdopt.c	/^short   best8x8mode [4];                \/\/ [block]$/;"	v
best8x8pdir	rdopt.c	/^short   best8x8pdir  [MAXMODE][4];       \/\/ [mode][block]$/;"	v
best_c_imode	rdopt.c	/^int   best_c_imode;$/;"	v
best_i16offset	rdopt.c	/^int   best_i16offset;$/;"	v
best_mode	rdopt.c	/^int   best_mode;$/;"	v
best_transform_size	rdopt.c	/^int   best_transform_size[4];$/;"	v
bi_pred_me	global.h	/^  int    bi_pred_me;$/;"	m	struct:__anon42
bi_pred_me	global.h	/^  int    bi_pred_me;$/;"	m	struct:macroblock
bi_pred_me	global.h	/^  short bi_pred_me[MAXMODE];$/;"	m	struct:__anon40
bi_pred_me	rdopt.c	/^int    bi_pred_me;$/;"	v
biari_encode_symbol	biariencode.c	/^void biari_encode_symbol(EncodingEnvironmentPtr eep, signed short symbol, BiContextTypePtr bi_ct )$/;"	f
biari_encode_symbol_eq_prob	biariencode.c	/^void biari_encode_symbol_eq_prob(EncodingEnvironmentPtr eep, signed short symbol)$/;"	f
biari_encode_symbol_final	biariencode.c	/^void biari_encode_symbol_final(EncodingEnvironmentPtr eep, signed short symbol)$/;"	f
biari_init_context	biariencode.c	/^void biari_init_context (BiContextTypePtr ctx, const int* ini)$/;"	f
binCount	biariencode.c	/^int binCount = 0;$/;"	v
bipred_mv1	global.h	/^  short  ******bipred_mv1;     \/\/!< all modes motion vectors$/;"	m	struct:__anon42
bipred_mv1	global.h	/^  short****** bipred_mv1;              \/\/!< Biprediction MVs$/;"	m	struct:__anon40
bipred_mv2	global.h	/^  short  ******bipred_mv2;     \/\/!< all modes motion vectors$/;"	m	struct:__anon42
bipred_mv2	global.h	/^  short****** bipred_mv2;              \/\/!< Biprediction MVs$/;"	m	struct:__anon40
bit_ctr	global.h	/^  int   bit_ctr;                \/\/!< counter for bit usage$/;"	m	struct:__anon41
bit_ctr_B	global.h	/^  int   bit_ctr_B;$/;"	m	struct:__anon41
bit_ctr_I	global.h	/^  int   bit_ctr_I;$/;"	m	struct:__anon41
bit_ctr_P	global.h	/^  int   bit_ctr_P;$/;"	m	struct:__anon41
bit_ctr_emulationprevention	global.h	/^  int   bit_ctr_emulationprevention; \/\/!< stored bits needed to prevent start code emulation$/;"	m	struct:__anon41
bit_ctr_n	global.h	/^  int   bit_ctr_n;              \/\/!< bit usage for the current frame$/;"	m	struct:__anon41
bit_ctr_parametersets	global.h	/^  int   bit_ctr_parametersets;$/;"	m	struct:__anon41
bit_ctr_parametersets_n	global.h	/^  int   bit_ctr_parametersets_n;$/;"	m	struct:__anon41
bit_depth_chroma_minus8	parsetcommon.h	/^  unsigned  bit_depth_chroma_minus8;                          \/\/ ue(v)$/;"	m	struct:__anon5
bit_depth_luma_minus8	parsetcommon.h	/^  unsigned  bit_depth_luma_minus8;                            \/\/ ue(v)$/;"	m	struct:__anon5
bit_rate	global.h	/^  int bit_rate;$/;"	m	struct:__anon39
bit_rate	ratectl.c	/^double bit_rate; $/;"	v
bit_rate	ratectl.h	/^double bit_rate; $/;"	v
bit_rate	sei.h	/^  unsigned short bit_rate[MAX_LAYER_NUMBER];$/;"	m	struct:__anon10
bit_rate_scale	parsetcommon.h	/^  unsigned  bit_rate_scale;                                   \/\/ u(4)$/;"	m	struct:__anon2
bit_rate_value	parsetcommon.h	/^    unsigned  bit_rate_value [MAXIMUMVALUEOFcpb_cnt];         \/\/ ue(v)$/;"	m	struct:__anon2
bit_slice	global.h	/^  int   bit_slice;              \/\/!< number of bits in current slice$/;"	m	struct:__anon41
bit_use_coeffC	global.h	/^  int   bit_use_coeffC      [NUM_PIC_TYPE];$/;"	m	struct:__anon41
bit_use_coeffY	global.h	/^  int   bit_use_coeffY      [NUM_PIC_TYPE];$/;"	m	struct:__anon41
bit_use_delta_quant	global.h	/^  int   bit_use_delta_quant [NUM_PIC_TYPE];$/;"	m	struct:__anon41
bit_use_header	global.h	/^  int   bit_use_header      [NUM_PIC_TYPE];$/;"	m	struct:__anon41
bit_use_mb_type	global.h	/^  int   bit_use_mb_type     [NUM_PIC_TYPE];$/;"	m	struct:__anon41
bit_use_mode	global.h	/^  int   bit_use_mode        [NUM_PIC_TYPE][MAXMODE]; \/\/!< statistics of bit usage$/;"	m	struct:__anon41
bit_use_mode_Bframe	global.h	/^  int   *bit_use_mode_Bframe;$/;"	m	struct:__anon41
bit_use_stuffingBits	global.h	/^  int   bit_use_stuffingBits[NUM_PIC_TYPE];$/;"	m	struct:__anon41
bitcounter	global.h	/^  int                 bitcounter[MAX_BITCOUNTER_MB];$/;"	m	struct:macroblock
bitcounter	rdopt_coding_state.h	/^  int                   bitcounter[MAX_BITCOUNTER_MB];$/;"	m	struct:__anon19
bitdepth_chroma	global.h	/^  int bitdepth_chroma;$/;"	m	struct:__anon40
bitdepth_chroma_qp_scale	global.h	/^  int bitdepth_chroma_qp_scale;$/;"	m	struct:__anon40
bitdepth_lambda_scale	global.h	/^  int bitdepth_lambda_scale;$/;"	m	struct:__anon40
bitdepth_luma	global.h	/^  int bitdepth_luma;$/;"	m	struct:__anon40
bitdepth_luma_qp_scale	global.h	/^  int bitdepth_luma_qp_scale;$/;"	m	struct:__anon40
bitpattern	global.h	/^  unsigned int        bitpattern;     \/\/!< UVLC bitpattern$/;"	m	struct:syntaxelement
bitr	global.h	/^  float bitr;                   \/\/!< bit rate for current frame, used only for output til terminal$/;"	m	struct:__anon41
bitrate	global.h	/^  float bitrate;                \/\/!< average bit rate for the sequence except first frame$/;"	m	struct:__anon41
bitrate_B	global.h	/^  float bitrate_B;$/;"	m	struct:__anon41
bitrate_I	global.h	/^  float bitrate_I;$/;"	m	struct:__anon41
bitrate_P	global.h	/^  float bitrate_P;$/;"	m	struct:__anon41
bits_per_picture	global.h	/^  int bits_per_picture;$/;"	m	struct:__anon36
bits_to_go	global.h	/^  int             bits_to_go;         \/\/!< current bitcounter$/;"	m	struct:__anon34
bits_to_go_skip	global.h	/^  int             bits_to_go_skip;    \/\/!< storage for bitcounter$/;"	m	struct:__anon34
bits_topfield	ratectl.c	/^static int Np, Nb, bits_topfield;$/;"	v	file:
bitstream	global.h	/^  Bitstream           *bitstream;$/;"	m	struct:datapartition
bitstream	rdopt_coding_state.h	/^  Bitstream            *bitstream;$/;"	m	struct:__anon19
bitstream_restriction_flag	parsetcommon.h	/^  Boolean      bitstream_restriction_flag;                       \/\/ u(1)$/;"	m	struct:__anon3
blc_size	global.h	/^  int blc_size[8][2];           \/\/!< array for different block sizes$/;"	m	struct:__anon39
block_c_x	global.h	/^  int block_c_x;               \/\/!< current block chroma vertical$/;"	m	struct:__anon40
block_x	global.h	/^  int block_x;                 \/\/!< current block horizontal$/;"	m	struct:__anon40
block_y	global.h	/^  int block_y;                 \/\/!< current block vertical$/;"	m	struct:__anon40
bot_MB	global.h	/^  int bot_MB;$/;"	m	struct:__anon40
bottom_field	mbuffer.h	/^  StorablePicture *bottom_field;$/;"	m	struct:frame_store
bottom_field	mbuffer.h	/^  struct storable_picture *bottom_field;  \/\/ for mb aff, if frame for referencing the bottom field$/;"	m	struct:storable_picture	typeref:struct:storable_picture::storable_picture
bottom_moving_block	mbuffer.h	/^  byte **     bottom_moving_block;$/;"	m	struct:colocated_params
bottom_mv	mbuffer.h	/^  short ****  bottom_mv;            \/\/!< motion vector       [list][subblock_x][subblock_y][component] $/;"	m	struct:colocated_params
bottom_pic	global.h	/^Picture *bottom_pic;$/;"	v
bottom_pic	lencod.c	/^Picture *bottom_pic;$/;"	v
bottom_poc	mbuffer.h	/^  int         bottom_poc;$/;"	m	struct:storable_picture
bottom_ref_idx	mbuffer.h	/^  short ***   bottom_ref_idx;       \/\/!< reference picture   [list][subblock_x][subblock_y]$/;"	m	struct:colocated_params
bottom_ref_pic_id	mbuffer.h	/^  int64 ***   bottom_ref_pic_id;    \/\/!< reference picture identifier [list][subblock_x][subblock_y]$/;"	m	struct:colocated_params
bottom_ref_pic_num	mbuffer.h	/^  int64       bottom_ref_pic_num[6][MAX_LIST_SIZE];  $/;"	m	struct:colocated_params
bottom_ref_pic_num	mbuffer.h	/^  int64       bottom_ref_pic_num[6][MAX_LIST_SIZE];$/;"	m	struct:storable_picture
bottom_right	global.h	/^  int *bottom_right; $/;"	m	struct:__anon39
bottom_right	parsetcommon.h	/^      unsigned  bottom_right[MAXnum_slice_groups_minus1];     \/\/ ue(v)$/;"	m	struct:__anon4
bottompoc	global.h	/^    signed int bottompoc;   \/\/!< for completeness - poc of bottom field of a frame (always = poc+1)$/;"	m	struct:__anon40
brefframe	rdopt.c	/^short   frefframe[4][4], brefframe[4][4], b8mode[4], b8pdir[4];$/;"	v
broken_link_flag	sei.h	/^  unsigned char broken_link_flag;$/;"	m	struct:__anon16
buf	nalucommon.h	/^  byte *buf;        \/\/! conjtains the first byte followed by the EBSP$/;"	m	struct:__anon18
buf2img	image.c	/^void buf2img (imgpel** imgX, unsigned char* buf, int size_x, int size_y, int symbol_size_in_bytes)$/;"	f
buf_cycle	global.h	/^  int buf_cycle;$/;"	m	struct:__anon40
bw_mb_mode	global.h	/^  int bw_mb_mode;$/;"	m	struct:__anon40
byte	defines.h	/^typedef unsigned char byte;    \/\/!< byte type definition$/;"	t
byte	sei.h	/^  char *byte;$/;"	m	struct:__anon14
byte	sei.h	/^  char *byte;$/;"	m	struct:__anon15
byte_abs	mv-search.c	/^int*    byte_abs;$/;"	v
byte_buf	global.h	/^  byte            byte_buf;           \/\/!< current buffer for last written byte$/;"	m	struct:__anon34
byte_buf_skip	global.h	/^  byte            byte_buf_skip;      \/\/!< current buffer for last written byte$/;"	m	struct:__anon34
byte_pos	global.h	/^  int             byte_pos;           \/\/!< current position in bitstream;$/;"	m	struct:__anon34
byte_pos_skip	global.h	/^  int             byte_pos_skip;      \/\/!< storage for position in bitstream;$/;"	m	struct:__anon34
c1isdc	cabac.c	/^static const int c1isdc       [] = { 1,  0,  1,  1,  1,  1,  1,  0,  1,  1};$/;"	v	file:
c_ipred_mode	global.h	/^  int                 c_ipred_mode;      \/\/!< chroma intra prediction mode$/;"	m	struct:macroblock
c_ipred_mode	global.h	/^  int    c_ipred_mode;$/;"	m	struct:__anon42
cabac_encoding	lencod.c	/^int    cabac_encoding = 0;$/;"	v
cabac_new_slice	cabac.c	/^void cabac_new_slice()$/;"	f
calc_MAD	ratectl.c	/^double calc_MAD()$/;"	f
calc_buffer	leaky_bucket.c	/^void calc_buffer()$/;"	f
cb_qp_index_offset	global.h	/^  int cb_qp_index_offset;$/;"	m	struct:__anon39
cb_qp_index_offset	parsetcommon.h	/^  int       cb_qp_index_offset;                               \/\/ se(v)$/;"	m	struct:__anon4
cbp	global.h	/^  int                 cbp ;$/;"	m	struct:macroblock
cbp	global.h	/^  int    cbp;$/;"	m	struct:__anon42
cbp	rdopt.c	/^int   cbp, cbp8x8, cnt_nonz_8x8;$/;"	v
cbp8_8x8ts	rdopt.c	/^int      cbp8_8x8ts;$/;"	v
cbp8x8	rdopt.c	/^int   cbp, cbp8x8, cnt_nonz_8x8;$/;"	v
cbp_bits	global.h	/^  unsigned long       cbp_bits;$/;"	m	struct:macroblock
cbp_bits	rdopt_coding_state.h	/^  unsigned long         cbp_bits;$/;"	m	struct:__anon19
cbp_blk	global.h	/^  int64               cbp_blk ;    \/\/!< 1 bit set for every 4x4 block with coefs (not implemented for INTRA)$/;"	m	struct:macroblock
cbp_blk	global.h	/^  int64  cbp_blk;$/;"	m	struct:__anon42
cbp_blk	rdopt.c	/^int64 cbp_blk;$/;"	v
cbp_blk8_8x8ts	rdopt.c	/^int64    cbp_blk8_8x8ts;$/;"	v
cbp_blk8x8	rdopt.c	/^int   cbp_blk8x8;$/;"	v
cbp_blk_chroma	block.h	/^static unsigned char cbp_blk_chroma[8][4] =$/;"	v
cbp_chroma_block	global.h	/^int   cbp_chroma_block[2][4][4], cbp_chroma_block_temp[2][4][4];$/;"	v
cbp_chroma_block	lencod.c	/^int cbp_chroma_block[2][4][4], cbp_chroma_block_temp[2][4][4];$/;"	v
cbp_chroma_block_temp	global.h	/^int   cbp_chroma_block[2][4][4], cbp_chroma_block_temp[2][4][4];$/;"	v
cbp_chroma_block_temp	lencod.c	/^int cbp_chroma_block[2][4][4], cbp_chroma_block_temp[2][4][4];$/;"	v
cbp_contexts	global.h	/^  BiContextType  cbp_contexts [3][NUM_CBP_CTX];$/;"	m	struct:__anon33
cbp_linfo_inter	vlc.c	/^void cbp_linfo_inter(int cbp, int dummy, int *len,int *info)$/;"	f
cbp_linfo_intra	vlc.c	/^void cbp_linfo_intra(int cbp, int dummy, int *len,int *info)$/;"	f
cc	rtp.h	/^  unsigned int cc;         \/*!< CSRC count, normally 0 in the absence $/;"	m	struct:__anon17
channel_type	global.h	/^  int channel_type;$/;"	m	struct:__anon39
chroma_edge	loopFilter.c	/^char chroma_edge[2][4][4] = \/\/[dir][edge][yuv_format]$/;"	v
chroma_format_idc	mbuffer.h	/^  int         chroma_format_idc;$/;"	m	struct:storable_picture
chroma_format_idc	parsetcommon.h	/^  unsigned  chroma_format_idc;                                \/\/ ue(v)$/;"	m	struct:__anon5
chroma_location_field	parsetcommon.h	/^    unsigned  chroma_location_field;                          \/\/ ue(v)$/;"	m	struct:__anon3
chroma_location_frame	parsetcommon.h	/^    unsigned  chroma_location_frame;                          \/\/ ue(v)$/;"	m	struct:__anon3
chroma_location_info_present_flag	parsetcommon.h	/^  Boolean      chroma_location_info_present_flag;                \/\/ u(1)$/;"	m	struct:__anon3
chroma_log_weight_denom	global.h	/^int chroma_log_weight_denom;$/;"	v
chroma_log_weight_denom	lencod.c	/^int chroma_log_weight_denom;$/;"	v
chroma_qp_index_offset	global.h	/^  int chroma_qp_index_offset;$/;"	m	struct:__anon39
chroma_qp_index_offset	parsetcommon.h	/^  int       chroma_qp_index_offset;                           \/\/ se(v)$/;"	m	struct:__anon4
chroma_qp_offset	global.h	/^  int chroma_qp_offset[2];      \/\/!< offset for qp for chroma [0-Cb, 1-Cr] $/;"	m	struct:__anon40
chroma_vector_adjustment	mbuffer.h	/^  int         chroma_vector_adjustment;$/;"	m	struct:storable_picture
cipr_contexts	global.h	/^  BiContextType  cipr_contexts[NUM_CIPR_CTX]; $/;"	m	struct:__anon33
clear_gop_structure	explicit_gop.c	/^void clear_gop_structure()$/;"	f
clear_picture	output.c	/^void clear_picture(StorablePicture *p)$/;"	f
clear_rdopt	rdopt.c	/^void clear_rdopt ()$/;"	f
clear_sei_message	sei.c	/^void clear_sei_message(int id)$/;"	f
clip1a	macroblock.c	/^int clip1a(int a)$/;"	f
clip1a_chr	macroblock.c	/^int clip1a_chr(int a)$/;"	f
close	global.h	70;"	d
cnt_nonz8_8x8ts	rdopt.c	/^int      cnt_nonz8_8x8ts;$/;"	v
cnt_nonz_8x8	rdopt.c	/^int   cbp, cbp8x8, cnt_nonz_8x8;$/;"	v
cod_counter	global.h	/^  int cod_counter;             \/\/!< Current count of number of skipped macroblocks in a row$/;"	m	struct:__anon40
code_a_picture	image.c	/^void code_a_picture(Picture *pic)$/;"	f
coded_frame	mbuffer.h	/^  int         coded_frame;$/;"	m	struct:storable_picture
cofAC	global.h	/^  int    ****cofAC;$/;"	m	struct:__anon42
cofAC	global.h	/^  int ****cofAC;               \/\/!< AC coefficients [8x8block][4x4block][level\/run][scan_pos]$/;"	m	struct:__anon40
cofAC	rdopt.c	/^int   ****cofAC=NULL, ****cofAC8x8=NULL;        \/\/ [8x8block][4x4block][level\/run][scan_pos]$/;"	v
cofAC4x4	rdopt.c	/^int   **cofAC4x4=NULL, ****cofAC4x4intern=NULL; \/\/ [level\/run][scan_pos]$/;"	v
cofAC4x4_chroma	rdopt.c	/^int   cofAC4x4_chroma[2][2][18];$/;"	v
cofAC4x4intern	rdopt.c	/^int   **cofAC4x4=NULL, ****cofAC4x4intern=NULL; \/\/ [level\/run][scan_pos]$/;"	v
cofAC8x8	rdopt.c	/^int   ****cofAC=NULL, ****cofAC8x8=NULL;        \/\/ [8x8block][4x4block][level\/run][scan_pos]$/;"	v
cofAC8x8_chroma	transform8x8.c	/^int   cofAC8x8_chroma[2][4][2][18];$/;"	v
cofAC_8x8ts	rdopt.c	/^int   ****cofAC_8x8ts = NULL;        \/\/ [8x8block][4x4block][level\/run][scan_pos]$/;"	v
cofDC	global.h	/^  int    ***cofDC;$/;"	m	struct:__anon42
cofDC	global.h	/^  int ***cofDC;                \/\/!< DC coefficients [yuv][level\/run][scan_pos]$/;"	m	struct:__anon40
cofDC	rdopt.c	/^int   ***cofDC=NULL;                       \/\/ [yuv][level\/run][scan_pos]$/;"	v
colocated_params	mbuffer.h	/^typedef struct colocated_params$/;"	s
colour_description_present_flag	parsetcommon.h	/^    Boolean      colour_description_present_flag;                \/\/ u(1)$/;"	m	struct:__anon3
colour_primaries	parsetcommon.h	/^      unsigned  colour_primaries;                             \/\/ u(8)$/;"	m	struct:__anon3
combine_field	lencod.c	/^void combine_field()$/;"	f
compare_fs_by_frame_num_desc	mbuffer.c	/^static int compare_fs_by_frame_num_desc( const void *arg1, const void *arg2 )$/;"	f	file:
compare_fs_by_lt_pic_idx_asc	mbuffer.c	/^static int compare_fs_by_lt_pic_idx_asc( const void *arg1, const void *arg2 )$/;"	f	file:
compare_fs_by_poc_asc	mbuffer.c	/^static int compare_fs_by_poc_asc( const void *arg1, const void *arg2 )$/;"	f	file:
compare_fs_by_poc_desc	mbuffer.c	/^static int compare_fs_by_poc_desc( const void *arg1, const void *arg2 )$/;"	f	file:
compare_pic_by_lt_pic_num_asc	mbuffer.c	/^static int compare_pic_by_lt_pic_num_asc( const void *arg1, const void *arg2 )$/;"	f	file:
compare_pic_by_pic_num_desc	mbuffer.c	/^static int compare_pic_by_pic_num_desc( const void *arg1, const void *arg2 )$/;"	f	file:
compare_pic_by_poc_asc	mbuffer.c	/^static int compare_pic_by_poc_asc( const void *arg1, const void *arg2 )$/;"	f	file:
compare_pic_by_poc_desc	mbuffer.c	/^static int compare_pic_by_poc_desc( const void *arg1, const void *arg2 )$/;"	f	file:
compute_colocated	mbuffer.c	/^void compute_colocated(ColocatedParams* p, StorablePicture **listX[6])$/;"	f
compute_residue_b8block	decoder.c	/^void compute_residue_b8block (int b8block, int i16mode) \/\/ if not INTRA16x16 it has to be -1$/;"	f
compute_residue_mb	decoder.c	/^void compute_residue_mb (int i16mode)$/;"	f
configinput	configfile.c	/^InputParameters configinput;$/;"	v
configinput	configfile.h	/^InputParameters configinput;$/;"	v
constrained_intra_pred_flag	parsetcommon.h	/^  Boolean   constrained_intra_pred_flag;                      \/\/ u(1)$/;"	m	struct:__anon4
constrained_set0_flag	parsetcommon.h	/^  Boolean   constrained_set0_flag;                            \/\/ u(1)$/;"	m	struct:__anon5
constrained_set1_flag	parsetcommon.h	/^  Boolean   constrained_set1_flag;                            \/\/ u(1)$/;"	m	struct:__anon5
constrained_set2_flag	parsetcommon.h	/^  Boolean   constrained_set2_flag;                            \/\/ u(1)$/;"	m	struct:__anon5
constrained_set3_flag	parsetcommon.h	/^  Boolean   constrained_set3_flag;                            \/\/ u(1)$/;"	m	struct:__anon5
context	global.h	/^  int                 context;        \/\/!< CABAC context$/;"	m	struct:syntaxelement
context_init_method	global.h	/^  int context_init_method;$/;"	m	struct:__anon39
copy_motion_vectors_MB	image.c	/^static void copy_motion_vectors_MB ()$/;"	f	file:
copy_params	image.c	/^void copy_params()$/;"	f
copy_rdopt_data	image.c	/^void copy_rdopt_data (int bot_block)$/;"	f
copyblock4x4	macroblock.c	/^copyblock4x4 (int*   mpred,      \/\/  --> array of prediction values (row by row)$/;"	f
copyblock_sp	block.c	/^void copyblock_sp(int block_x,int block_y)$/;"	f
cost8_8x8ts	rdopt.c	/^int      cost8_8x8ts;$/;"	v
count	global.h	/^  unsigned long  count;$/;"	m	struct:__anon31
cpb_cnt	parsetcommon.h	/^  unsigned  cpb_cnt;                                          \/\/ ue(v)$/;"	m	struct:__anon2
cpb_removal_delay_length_minus1	parsetcommon.h	/^  unsigned  cpb_removal_delay_length_minus1;                  \/\/ u(5)$/;"	m	struct:__anon2
cpb_size_scale	parsetcommon.h	/^  unsigned  cpb_size_scale;                                   \/\/ u(4)$/;"	m	struct:__anon2
cpb_size_value	parsetcommon.h	/^    unsigned  cpb_size_value[MAXIMUMVALUEOFcpb_cnt];          \/\/ ue(v)$/;"	m	struct:__anon2
cr_qp_index_offset	global.h	/^  int cr_qp_index_offset;$/;"	m	struct:__anon39
cr_qp_index_offset	parsetcommon.h	/^  int       cr_qp_index_offset;                               \/\/ se(v)$/;"	m	struct:__anon4
create_coding_state	rdopt_coding_state.c	/^create_coding_state ()$/;"	f
create_context_memory	context_ini.c	/^void create_context_memory ()$/;"	f
create_contexts_MotionInfo	cabac.c	/^MotionInfoContexts* create_contexts_MotionInfo(void)$/;"	f
create_contexts_TextureInfo	cabac.c	/^TextureInfoContexts* create_contexts_TextureInfo(void)$/;"	f
create_pyramid	explicit_gop.c	/^void create_pyramid()$/;"	f
cs_b8	rdopt.c	/^CSptr cs_mb=NULL, cs_b8=NULL, cs_cm=NULL, cs_imb=NULL, cs_ib8=NULL, cs_ib4=NULL, cs_pc=NULL;$/;"	v
cs_cm	rdopt.c	/^CSptr cs_mb=NULL, cs_b8=NULL, cs_cm=NULL, cs_imb=NULL, cs_ib8=NULL, cs_ib4=NULL, cs_pc=NULL;$/;"	v
cs_ib4	rdopt.c	/^CSptr cs_mb=NULL, cs_b8=NULL, cs_cm=NULL, cs_imb=NULL, cs_ib8=NULL, cs_ib4=NULL, cs_pc=NULL;$/;"	v
cs_ib8	rdopt.c	/^CSptr cs_mb=NULL, cs_b8=NULL, cs_cm=NULL, cs_imb=NULL, cs_ib8=NULL, cs_ib4=NULL, cs_pc=NULL;$/;"	v
cs_imb	rdopt.c	/^CSptr cs_mb=NULL, cs_b8=NULL, cs_cm=NULL, cs_imb=NULL, cs_ib8=NULL, cs_ib4=NULL, cs_pc=NULL;$/;"	v
cs_mb	rdopt.c	/^CSptr cs_mb=NULL, cs_b8=NULL, cs_cm=NULL, cs_imb=NULL, cs_ib8=NULL, cs_ib4=NULL, cs_pc=NULL;$/;"	v
cs_pc	rdopt.c	/^CSptr cs_mb=NULL, cs_b8=NULL, cs_cm=NULL, cs_imb=NULL, cs_ib8=NULL, cs_ib4=NULL, cs_pc=NULL;$/;"	v
currSEnr	global.h	/^  int                 currSEnr;                   \/\/!< number of current syntax element$/;"	m	struct:macroblock
currSEnr	rdopt_coding_state.h	/^  int                   currSEnr;$/;"	m	struct:__anon19
currentPicture	global.h	/^  Picture     *currentPicture; \/\/!< The coded picture currently in the works (typically frame_pic, top_pic, or bottom_pic)$/;"	m	struct:__anon40
currentSlice	global.h	/^  Slice       *currentSlice;                                \/\/!< pointer to current Slice data struct$/;"	m	struct:__anon40
current_mb_nr	global.h	/^  int current_mb_nr;$/;"	m	struct:__anon40
current_slice_nr	global.h	/^  int current_slice_nr;$/;"	m	struct:__anon40
data	sei.h	/^  Bitstream *data;$/;"	m	struct:__anon13
data	sei.h	/^  Bitstream *data;$/;"	m	struct:__anon14
data	sei.h	/^  Bitstream *data;$/;"	m	struct:__anon15
data	sei.h	/^  Bitstream *data;$/;"	m	struct:__anon16
data	sei.h	/^  Bitstream* data;$/;"	m	struct:__anon11
data	sei.h	/^  Bitstream* data;$/;"	m	struct:__anon12
data	sei.h	/^  Bitstream* data;$/;"	m	struct:__anon8
data	sei.h	/^  Bitstream* data;$/;"	m	struct:__anon9
data	sei.h	/^  byte data[4*MAX_LAYER_NUMBER];$/;"	m	struct:__anon10
data	sei.h	/^  byte* data;$/;"	m	struct:__anon7
datapartition	global.h	/^typedef struct datapartition$/;"	s
dc_level	global.h	/^int dc_level[2][4][4], dc_level_temp[2][4][4];$/;"	v
dc_level	lencod.c	/^int dc_level[2][4][4], dc_level_temp[2][4][4];$/;"	v
dc_level_temp	global.h	/^int dc_level[2][4][4], dc_level_temp[2][4][4];$/;"	v
dc_level_temp	lencod.c	/^int dc_level[2][4][4], dc_level_temp[2][4][4];$/;"	v
dc_pred_value	global.h	/^  unsigned int dc_pred_value;   \/\/!< value for DC prediction (depends on pel bit depth)$/;"	m	struct:__anon40
dct_chroma	block.c	/^int dct_chroma(int uv,int cr_cbp)$/;"	f
dct_chroma4x4	block.c	/^int dct_chroma4x4(int uv, int b8, int b4)$/;"	f
dct_chroma_DC	block.c	/^int dct_chroma_DC(int uv, int cr_cbp)$/;"	f
dct_chroma_sp	block.c	/^int dct_chroma_sp(int uv,int cr_cbp)$/;"	f
dct_luma	block.c	/^int dct_luma(int block_x,int block_y,int *coeff_cost, int intra)$/;"	f
dct_luma8x8	transform8x8.c	/^int dct_luma8x8(int b8,int *coeff_cost, int intra)$/;"	f
dct_luma_16x16	block.c	/^int dct_luma_16x16(int new_intra_mode)$/;"	f
dct_luma_sp	block.c	/^int dct_luma_sp(int block_x,int block_y,int *coeff_cost)$/;"	f
deblocking_filter_control_present_flag	parsetcommon.h	/^  Boolean   deblocking_filter_control_present_flag;           \/\/ u(1)$/;"	m	struct:__anon4
decY	global.h	/^  imgpel ***decY;            \/\/!< Decoded values at the simulated decoders$/;"	m	struct:__anon37
decY_best	global.h	/^  imgpel ***decY_best;       \/\/!< Decoded frames for the best mode for all decoders$/;"	m	struct:__anon37
dec_mb_mode	global.h	/^  byte **dec_mb_mode;$/;"	m	struct:__anon37
dec_ref_pic_marking	header.c	/^static int dec_ref_pic_marking()$/;"	f	file:
dec_ref_pic_marking_buffer	global.h	/^  DecRefPicMarking_t *dec_ref_pic_marking_buffer;$/;"	m	struct:__anon40
decide_fld_frame	lencod.c	/^int decide_fld_frame(float snr_frame_Y, float snr_field_Y, int bit_field, int bit_frame, double lambda_picture)$/;"	f
decide_intrabk_SAD	fast_me.c	/^void   decide_intrabk_SAD()$/;"	f
decode_one_b8block	decoder.c	/^void decode_one_b8block (int decoder, int mbmode, int b8block, int b8mode, int b8ref)$/;"	f
decode_one_mb	decoder.c	/^void decode_one_mb (int decoder, Macroblock* currMB)$/;"	f
decoded_picture_buffer	mbuffer.h	/^typedef struct decoded_picture_buffer$/;"	s
decoders	lencod.c	/^Decoders decoders, *decs=&decoders;$/;"	v
decref	global.h	/^  imgpel ****decref;         \/\/!< Reference frames of the simulated decoders$/;"	m	struct:__anon37
decs	lencod.c	/^Decoders decoders, *decs=&decoders;$/;"	v
delete_coding_state	rdopt_coding_state.c	/^delete_coding_state (CSptr cs)$/;"	f
delete_contexts_MotionInfo	cabac.c	/^void delete_contexts_MotionInfo(MotionInfoContexts *enco_ctx)$/;"	f
delete_contexts_TextureInfo	cabac.c	/^void delete_contexts_TextureInfo(TextureInfoContexts *enco_ctx)$/;"	f
delta_pic_order_always_zero_flag	global.h	/^  unsigned int delta_pic_order_always_zero_flag;$/;"	m	struct:__anon40
delta_pic_order_always_zero_flag	parsetcommon.h	/^    Boolean delta_pic_order_always_zero_flag;               \/\/ u(1)$/;"	m	struct:__anon5
delta_pic_order_cnt	global.h	/^           int delta_pic_order_cnt[2];$/;"	m	struct:__anon40
delta_pic_order_cnt_bottom	global.h	/^           int delta_pic_order_cnt_bottom;$/;"	m	struct:__anon40
delta_qp	global.h	/^  int                 delta_qp;$/;"	m	struct:macroblock
delta_qp_contexts	global.h	/^  BiContextType delta_qp_contexts   [NUM_DELTA_QP_CTX];$/;"	m	struct:__anon32
dequant_coef	block.c	/^const int dequant_coef[6][4][4] = {$/;"	v
dequant_coef8	transform8x8.c	/^const int dequant_coef8[6][8][8] = $/;"	v
difference_of_pic_nums_minus1	global.h	/^  int difference_of_pic_nums_minus1;$/;"	m	struct:DecRefPicMarking_s
diffy	ratectl.c	/^int diffy[16][16];$/;"	v
diffy	ratectl.h	/^int diffy[16][16];$/;"	v
diffy	rdopt.c	/^int diffy[16][16];$/;"	v
diffy8	ratectl.c	/^int diffy8[16][16];\/\/for P8X8 mode $/;"	v
diffy8	ratectl.h	/^int diffy8[16][16];\/\/for P8X8 mode $/;"	v
diffyy	ratectl.c	/^int diffyy[16][16];$/;"	v
diffyy	ratectl.h	/^int diffyy[16][16];$/;"	v
directInferenceFlag	global.h	/^  int directInferenceFlag;      \/\/!< Direct Inference Flag$/;"	m	struct:__anon39
direct_8x8_inference_flag	parsetcommon.h	/^  Boolean   direct_8x8_inference_flag;                        \/\/ u(1)$/;"	m	struct:__anon5
direct_intraP_ref	global.h	/^  int direct_intraP_ref[4][4];$/;"	m	struct:__anon40
direct_output	output.c	/^void direct_output(StorablePicture *p, int p_out)$/;"	f
direct_pdir	global.h	/^short    **direct_pdir;              \/\/!< direct mode reference index buffer$/;"	v
direct_pdir	lencod.c	/^short    **direct_pdir;        \/\/!< direct mode reference index buffer$/;"	v
direct_ref_idx	global.h	/^short   ***direct_ref_idx;           \/\/!< direct mode reference index buffer$/;"	v
direct_ref_idx	lencod.c	/^short   ***direct_ref_idx;     \/\/!< direct mode reference index buffer$/;"	v
direct_spatial_mv_pred_flag	global.h	/^  int direct_spatial_mv_pred_flag;              \/\/!< Direct Mode type to be used (0: Temporal, 1: Spatial)$/;"	m	struct:__anon39
direct_spatial_mv_pred_flag	global.h	/^  int direct_spatial_mv_pred_flag;              \/\/!< Direct Mode type to be used (0: Temporal, 1: Spatial)$/;"	m	struct:__anon40
display_no	global.h	/^  int display_no;       \/\/! GOP Display order$/;"	m	struct:__anon43
disthres	global.h	/^  int disthres;$/;"	m	struct:__anon39
distortion_fld	image.c	/^static void distortion_fld (float *dis_fld_y, float *dis_fld_u, float *dis_fld_v)$/;"	f	file:
distortion_u	global.h	/^  float distortion_u;$/;"	m	struct:__anon36
distortion_v	global.h	/^  float distortion_v;$/;"	m	struct:__anon36
distortion_y	global.h	/^  float distortion_y;$/;"	m	struct:__anon36
dpb	mbuffer.c	/^DecodedPictureBuffer dpb;$/;"	v
dpb_combine_field	mbuffer.c	/^void dpb_combine_field(FrameStore *fs)$/;"	f
dpb_output_delay_length_minus1	parsetcommon.h	/^  unsigned  dpb_output_delay_length_minus1;                   \/\/ u(5)$/;"	m	struct:__anon2
dpb_split_field	mbuffer.c	/^void dpb_split_field(FrameStore *fs)$/;"	f
dq	macroblock.c	/^int predict_error,dq;$/;"	v
dummy_slice_too_big	image.c	/^Boolean dummy_slice_too_big (int bits_slice)$/;"	f
dump_dpb	mbuffer.c	/^void dump_dpb()$/;"	f
duration_flag	sei.h	/^  int duration_flag;$/;"	m	struct:__anon11
ee_cabac	global.h	/^  EncodingEnvironment ee_cabac;$/;"	m	struct:datapartition
em_prev_bits	global.h	/^  int  *em_prev_bits;$/;"	m	struct:__anon41
em_prev_bits_fld	global.h	/^  int   em_prev_bits_fld;$/;"	m	struct:__anon41
em_prev_bits_frm	global.h	/^  int   em_prev_bits_frm;$/;"	m	struct:__anon41
enc_bottom_picture	image.c	/^StorablePicture *enc_bottom_picture;$/;"	v
enc_frame_picture	image.c	/^StorablePicture *enc_frame_picture;$/;"	v
enc_frame_picture2	image.c	/^StorablePicture *enc_frame_picture2;$/;"	v
enc_frame_picture3	image.c	/^StorablePicture *enc_frame_picture3;$/;"	v
enc_picture	image.c	/^StorablePicture *enc_picture;$/;"	v
enc_top_picture	image.c	/^StorablePicture *enc_top_picture;$/;"	v
encenv	rdopt_coding_state.h	/^  EncodingEnvironment  *encenv;$/;"	m	struct:__anon19
encode_enhancement_layer	explicit_gop.c	/^void encode_enhancement_layer()$/;"	f
encode_one_frame	image.c	/^int encode_one_frame ()$/;"	f
encode_one_macroblock	rdopt.c	/^ void encode_one_macroblock ()$/;"	f
encode_one_slice	slice.c	/^int encode_one_slice (int SliceGroupId, Picture *pic)$/;"	f
entropy	context_ini.c	/^double entropy    [128];$/;"	v
entropy_coding_mode_flag	parsetcommon.h	/^  Boolean   entropy_coding_mode_flag;                         \/\/ u(1)$/;"	m	struct:__anon4
error	filehandle.c	/^void error(char *text, int code)$/;"	f
errortext	global.h	/^char errortext[ET_SIZE]; \/\/!< buffer for error message for exit with error()$/;"	v
errortext	lencod.c	/^char errortext[ET_SIZE]; \/\/!< buffer for error message for exit with error()$/;"	v
estimate_weighting_factor_B_slice	weighted_prediction.c	/^void estimate_weighting_factor_B_slice()$/;"	f
estimate_weighting_factor_P_slice	weighted_prediction.c	/^void estimate_weighting_factor_P_slice(int select_offset)$/;"	f
exact_match_flag	sei.h	/^  unsigned char exact_match_flag;$/;"	m	struct:__anon16
exp_golomb_encode_eq_prob	cabac.c	/^void exp_golomb_encode_eq_prob( EncodingEnvironmentPtr eep_dp,$/;"	f
f	annexb.c	/^static FILE *f = NULL;    \/\/ the output file$/;"	v	file:
f	rtp.c	/^FILE *f;$/;"	v
fieldModeFilteringFlag	loopFilter.c	/^byte mixedModeEdgeFlag, fieldModeFilteringFlag;$/;"	v
field_ctx	global.h	/^  int                 field_ctx[3][2]; \/\/GB$/;"	m	struct:__anon35
field_flag_inference	rdopt.c	/^int field_flag_inference()$/;"	f
field_frame	mbuffer.h	/^  byte **     field_frame;         \/\/!< indicates if co_located is field or frame.$/;"	m	struct:colocated_params
field_frame	mbuffer.h	/^  byte **     field_frame;         \/\/!< indicates if co_located is field or frame.$/;"	m	struct:storable_picture
field_mode	global.h	/^  int field_mode;     \/\/!< For MB level field\/frame -- field mode on flag$/;"	m	struct:__anon40
field_mode_buffer	image.c	/^static void field_mode_buffer (int bit_field, float snr_field_y, float snr_field_u, float snr_field_v)$/;"	f	file:
field_picture	global.h	/^  unsigned int field_picture;$/;"	m	struct:__anon40
field_picture	image.c	/^void field_picture (Picture *top, Picture *bottom)$/;"	f
fill_frame_num_gap	mbuffer.c	/^void fill_frame_num_gap(ImageParameters *img)$/;"	f
finalize_sei_message	sei.c	/^void finalize_sei_message(int id)$/;"	f
find_SATD	mv-search.c	/^find_SATD (int curr_diff[MB_BLOCK_SIZE][MB_BLOCK_SIZE], int use_hadamard, int blocktype)$/;"	f
find_distortion	image.c	/^static void find_distortion ()$/;"	f	file:
find_sad_16x16	macroblock.c	/^int find_sad_16x16(int *intra_mode)$/;"	f
find_snr	image.c	/^static void find_snr ()$/;"	f	file:
fixed_frame_rate_flag	parsetcommon.h	/^    Boolean      fixed_frame_rate_flag;                          \/\/ u(1)$/;"	m	struct:__anon3
flag_intra	fast_me.c	/^int  *flag_intra;$/;"	v
flag_intra	fast_me.h	/^int  *flag_intra;$/;"	v
flag_intra_SAD	fast_me.c	/^int  flag_intra_SAD;$/;"	v
flag_intra_SAD	fast_me.h	/^int  flag_intra_SAD;$/;"	v
fld_flag	global.h	/^  unsigned int fld_flag;                                $/;"	m	struct:__anon40
fld_last_contexts	global.h	/^  BiContextType  fld_last_contexts[NUM_BLOCK_TYPES][NUM_LAST_CTX];$/;"	m	struct:__anon33
fld_map_contexts	global.h	/^  BiContextType  fld_map_contexts [NUM_BLOCK_TYPES][NUM_MAP_CTX];$/;"	m	struct:__anon33
fld_type	global.h	/^  int fld_type;                        \/\/!< top or bottom field$/;"	m	struct:__anon40
flush_direct_output	output.c	/^void flush_direct_output(int p_out)$/;"	f
flush_dpb	mbuffer.c	/^void flush_dpb()$/;"	f
forbidden_bit	nalucommon.h	/^  int forbidden_bit;            \/\/! should be always FALSE$/;"	m	struct:__anon18
frame	mbuffer.h	/^  StorablePicture *frame;$/;"	m	struct:frame_store
frame	mbuffer.h	/^  struct storable_picture *frame;         \/\/ for mb aff, if field for referencing the combined frame$/;"	m	struct:storable_picture	typeref:struct:storable_picture::storable_picture
frame_cropping_flag	mbuffer.h	/^  int         frame_cropping_flag;$/;"	m	struct:storable_picture
frame_cropping_flag	parsetcommon.h	/^  Boolean   frame_cropping_flag;                              \/\/ u(1)$/;"	m	struct:__anon5
frame_cropping_rect_bottom_offset	mbuffer.h	/^  int         frame_cropping_rect_bottom_offset;$/;"	m	struct:storable_picture
frame_cropping_rect_bottom_offset	parsetcommon.h	/^    unsigned  frame_cropping_rect_bottom_offset;              \/\/ ue(v)$/;"	m	struct:__anon5
frame_cropping_rect_left_offset	mbuffer.h	/^  int         frame_cropping_rect_left_offset;$/;"	m	struct:storable_picture
frame_cropping_rect_left_offset	parsetcommon.h	/^    unsigned  frame_cropping_rect_left_offset;                \/\/ ue(v)$/;"	m	struct:__anon5
frame_cropping_rect_right_offset	mbuffer.h	/^  int         frame_cropping_rect_right_offset;$/;"	m	struct:storable_picture
frame_cropping_rect_right_offset	parsetcommon.h	/^    unsigned  frame_cropping_rect_right_offset;               \/\/ ue(v)$/;"	m	struct:__anon5
frame_cropping_rect_top_offset	mbuffer.h	/^  int         frame_cropping_rect_top_offset;$/;"	m	struct:storable_picture
frame_cropping_rect_top_offset	parsetcommon.h	/^    unsigned  frame_cropping_rect_top_offset;                 \/\/ ue(v)$/;"	m	struct:__anon5
frame_mbs_only_flag	mbuffer.h	/^  int         frame_mbs_only_flag;$/;"	m	struct:storable_picture
frame_mbs_only_flag	parsetcommon.h	/^  Boolean   frame_mbs_only_flag;                              \/\/ u(1)$/;"	m	struct:__anon5
frame_mode_buffer	image.c	/^static void frame_mode_buffer (int bit_frame, float snr_frame_y, float snr_frame_u, float snr_frame_v)$/;"	f	file:
frame_no	global.h	/^int  frame_no, nextP_tr_fld, nextP_tr_frm;$/;"	v
frame_no	lencod.c	/^int  frame_no, nextP_tr_fld, nextP_tr_frm;$/;"	v
frame_num	global.h	/^  unsigned int frame_num;   \/\/!< frame_num for this frame$/;"	m	struct:__anon40
frame_num	mbuffer.h	/^  unsigned    frame_num;$/;"	m	struct:storable_picture
frame_num	mbuffer.h	/^  unsigned  frame_num;$/;"	m	struct:frame_store
frame_num_wrap	mbuffer.h	/^  int       frame_num_wrap;$/;"	m	struct:frame_store
frame_pic	global.h	/^Picture *frame_pic;$/;"	v
frame_pic	lencod.c	/^Picture *frame_pic;$/;"	v
frame_pic2	global.h	/^Picture *frame_pic2;$/;"	v
frame_pic2	lencod.c	/^Picture *frame_pic2;$/;"	v
frame_pic3	global.h	/^Picture *frame_pic3;$/;"	v
frame_pic3	lencod.c	/^Picture *frame_pic3;$/;"	v
frame_picture	image.c	/^void frame_picture (Picture *frame, int rd_pass)$/;"	f
frame_poc	mbuffer.h	/^  int         frame_poc;$/;"	m	struct:storable_picture
frame_rate	ratectl.c	/^double frame_rate;$/;"	v
frame_rate	ratectl.h	/^double frame_rate;$/;"	v
frame_rate	sei.h	/^  unsigned short frame_rate[MAX_LAYER_NUMBER];$/;"	m	struct:__anon10
frame_statistic_start	lencod.c	/^int    frame_statistic_start;$/;"	v
frame_store	mbuffer.h	/^typedef struct frame_store$/;"	s
framepoc	global.h	/^    signed int framepoc;    \/\/!< min (toppoc, bottompoc)$/;"	m	struct:__anon40
framerate	global.h	/^  float framerate;$/;"	m	struct:__anon40
free_colocated	mbuffer.c	/^void free_colocated(ColocatedParams* p)$/;"	f
free_context_memory	context_ini.c	/^void free_context_memory ()$/;"	f
free_dpb	mbuffer.c	/^void free_dpb()$/;"	f
free_frame_store	mbuffer.c	/^void free_frame_store(FrameStore* f)$/;"	f
free_global_buffers	lencod.c	/^void free_global_buffers()$/;"	f
free_img	lencod.c	/^void free_img ()$/;"	f
free_mem2D	memalloc.c	/^void free_mem2D(byte **array2D)$/;"	f
free_mem2Dint	memalloc.c	/^void free_mem2Dint(int **array2D)$/;"	f
free_mem2Dint64	memalloc.c	/^void free_mem2Dint64(int64 **array2D)$/;"	f
free_mem2Dpel	memalloc.c	/^void free_mem2Dpel(imgpel **array2D)$/;"	f
free_mem2Dshort	memalloc.c	/^void free_mem2Dshort(short **array2D)$/;"	f
free_mem3D	memalloc.c	/^void free_mem3D(byte ***array3D, int frames)$/;"	f
free_mem3Dint	memalloc.c	/^void free_mem3Dint(int ***array3D, int frames)$/;"	f
free_mem3Dint64	memalloc.c	/^void free_mem3Dint64(int64 ***array3D, int frames)$/;"	f
free_mem3Dpel	memalloc.c	/^void free_mem3Dpel(imgpel ***array3D, int frames)$/;"	f
free_mem3Dshort	memalloc.c	/^void free_mem3Dshort(short ***array3D, int frames)$/;"	f
free_mem4Dint	memalloc.c	/^void free_mem4Dint(int ****array4D, int idx, int frames )$/;"	f
free_mem4Dshort	memalloc.c	/^void free_mem4Dshort(short ****array4D, int idx, int frames )$/;"	f
free_mem_ACcoeff	lencod.c	/^void free_mem_ACcoeff (int**** cofAC)$/;"	f
free_mem_DCcoeff	lencod.c	/^void free_mem_DCcoeff (int*** cofDC)$/;"	f
free_mem_FME	fast_me.c	/^void free_mem_FME()$/;"	f
free_mem_bwmincost	fast_me.c	/^void free_mem_bwmincost (int***** mv)$/;"	f
free_mem_mincost	fast_me.c	/^void free_mem_mincost (int***** mv)$/;"	f
free_mem_mv	lencod.c	/^void free_mem_mv (short****** mv)$/;"	f
free_orig_planes	lencod.c	/^void free_orig_planes()$/;"	f
free_picture	lencod.c	/^void free_picture(Picture *pic)$/;"	f
free_ref_pic_list_reordering_buffer	mbuffer.c	/^void free_ref_pic_list_reordering_buffer(Slice *currSlice)$/;"	f
free_slice	slice.c	/^static void free_slice(Slice *slice)$/;"	f	file:
free_slice_list	slice.c	/^void free_slice_list(Picture *currPic)$/;"	f
free_storable_picture	mbuffer.c	/^void free_storable_picture(StorablePicture* p)$/;"	f
free_top_bot_planes	memalloc.c	/^void free_top_bot_planes(imgpel **imgTopField, imgpel **imgBotField)$/;"	f
frefframe	rdopt.c	/^short   frefframe[4][4], brefframe[4][4], b8mode[4], b8pdir[4];$/;"	v
frm_ref_pic_num	mbuffer.h	/^  int64       frm_ref_pic_num[6][MAX_LIST_SIZE];$/;"	m	struct:storable_picture
fs	mbuffer.h	/^  FrameStore  **fs;$/;"	m	struct:decoded_picture_buffer
fs_ltref	mbuffer.h	/^  FrameStore  **fs_ltref;$/;"	m	struct:decoded_picture_buffer
fs_ref	mbuffer.h	/^  FrameStore  **fs_ref;$/;"	m	struct:decoded_picture_buffer
fsync	global.h	74;"	d
full_search	global.h	/^  int full_search;$/;"	m	struct:__anon39
fw_mb_mode	global.h	/^  int fw_mb_mode;$/;"	m	struct:__anon40
gaps_in_frame_num_value_allowed_flag	parsetcommon.h	/^  Boolean   gaps_in_frame_num_value_allowed_flag;             \/\/ u(1)$/;"	m	struct:__anon5
gen_field_ref_ids	mbuffer.c	/^void gen_field_ref_ids(StorablePicture *p)$/;"	f
gen_pic_list_from_frame_list	mbuffer.c	/^static void gen_pic_list_from_frame_list(PictureStructure currStrcture, FrameStore **fs_list, int list_idx, StorablePicture **list, int *list_size, int long_term)$/;"	f	file:
getAffNeighbour	mb_access.c	/^void getAffNeighbour(unsigned int curr_mb_nr, int xN, int yN, int luma, PixelPos *pix)$/;"	f
getChroma4x4Neighbour	mb_access.c	/^void getChroma4x4Neighbour (int curr_mb_nr, int block_x, int block_y, int rel_x, int rel_y, PixelPos *pix)$/;"	f
getDpbSize	mbuffer.c	/^int getDpbSize()$/;"	f
getLuma4x4Neighbour	mb_access.c	/^void getLuma4x4Neighbour (int curr_mb_nr, int block_x, int block_y, int rel_x, int rel_y, PixelPos *pix)$/;"	f
getNeighbour	mb_access.c	/^void getNeighbour(int curr_mb_nr, int xN, int yN, int luma, PixelPos *pix)$/;"	f
getNonAffNeighbour	mb_access.c	/^void getNonAffNeighbour(unsigned int curr_mb_nr, int xN, int yN, int luma, PixelPos *pix)$/;"	f
get_LeakyBucketRate	leaky_bucket.c	/^int get_LeakyBucketRate(unsigned long NumberLeakyBuckets, unsigned long *Rmin)$/;"	f
get_long_term_pic	mbuffer.c	/^static StorablePicture*  get_long_term_pic(int LongtermPicNum)$/;"	f	file:
get_mb_block_pos	mb_access.c	/^void get_mb_block_pos (int mb_addr, int *x, int*y)$/;"	f
get_mb_pos	mb_access.c	/^void get_mb_pos (int mb_addr, int *x, int*y)$/;"	f
get_mem2D	memalloc.c	/^int get_mem2D(byte ***array2D, int rows, int columns)$/;"	f
get_mem2Dint	memalloc.c	/^int get_mem2Dint(int ***array2D, int rows, int columns)$/;"	f
get_mem2Dint64	memalloc.c	/^int get_mem2Dint64(int64 ***array2D, int rows, int columns)$/;"	f
get_mem2Dpel	memalloc.c	/^int get_mem2Dpel(imgpel ***array2D, int rows, int columns)$/;"	f
get_mem2Dshort	memalloc.c	/^int get_mem2Dshort(short ***array2D, int rows, int columns)$/;"	f
get_mem3D	memalloc.c	/^int get_mem3D(byte ****array3D, int frames, int rows, int columns)$/;"	f
get_mem3Dint	memalloc.c	/^int get_mem3Dint(int ****array3D, int frames, int rows, int columns)$/;"	f
get_mem3Dint64	memalloc.c	/^int get_mem3Dint64(int64 ****array3D, int frames, int rows, int columns)$/;"	f
get_mem3Dpel	memalloc.c	/^int get_mem3Dpel(imgpel ****array3D, int frames, int rows, int columns)$/;"	f
get_mem3Dshort	memalloc.c	/^int get_mem3Dshort(short ****array3D, int frames, int rows, int columns)$/;"	f
get_mem4Dint	memalloc.c	/^int get_mem4Dint(int *****array4D, int idx, int frames, int rows, int columns )$/;"	f
get_mem4Dshort	memalloc.c	/^int get_mem4Dshort(short *****array4D, int idx, int frames, int rows, int columns )$/;"	f
get_mem_ACcoeff	lencod.c	/^int get_mem_ACcoeff (int***** cofAC)$/;"	f
get_mem_DCcoeff	lencod.c	/^int get_mem_DCcoeff (int**** cofDC)$/;"	f
get_mem_FME	fast_me.c	/^int get_mem_FME()$/;"	f
get_mem_bwmincost	fast_me.c	/^int get_mem_bwmincost (int****** mv)$/;"	f
get_mem_mincost	fast_me.c	/^int get_mem_mincost (int****** mv)$/;"	f
get_mem_mv	lencod.c	/^int get_mem_mv (short ******* mv)$/;"	f
get_pic_num_x	mbuffer.c	/^static int get_pic_num_x (StorablePicture *p, int difference_of_pic_nums_minus1)$/;"	f	file:
get_picture_type	header.c	/^int get_picture_type()$/;"	f
get_short_term_pic	mbuffer.c	/^static StorablePicture*  get_short_term_pic(int picNum)$/;"	f	file:
get_smallest_poc	mbuffer.c	/^static void get_smallest_poc(int *poc,int * pos)$/;"	f	file:
glob_abs_diff_pic_num_minus1_l0	global.h	/^int glob_abs_diff_pic_num_minus1_l0[20];$/;"	v
glob_abs_diff_pic_num_minus1_l0	lencod.c	/^int glob_abs_diff_pic_num_minus1_l0[20];$/;"	v
glob_abs_diff_pic_num_minus1_l1	global.h	/^int glob_abs_diff_pic_num_minus1_l1[20];$/;"	v
glob_abs_diff_pic_num_minus1_l1	lencod.c	/^int glob_abs_diff_pic_num_minus1_l1[20];$/;"	v
glob_long_term_pic_idx_l0	global.h	/^int glob_long_term_pic_idx_l0[20];$/;"	v
glob_long_term_pic_idx_l0	lencod.c	/^int glob_long_term_pic_idx_l0[20];$/;"	v
glob_long_term_pic_idx_l1	global.h	/^int glob_long_term_pic_idx_l1[20]; $/;"	v
glob_long_term_pic_idx_l1	lencod.c	/^int glob_long_term_pic_idx_l1[20];$/;"	v
glob_remapping_of_pic_nums_idc_l0	global.h	/^int glob_remapping_of_pic_nums_idc_l0[20];$/;"	v
glob_remapping_of_pic_nums_idc_l0	lencod.c	/^int glob_remapping_of_pic_nums_idc_l0[20];$/;"	v
glob_remapping_of_pic_nums_idc_l1	global.h	/^int glob_remapping_of_pic_nums_idc_l1[20];$/;"	v
glob_remapping_of_pic_nums_idc_l1	lencod.c	/^int glob_remapping_of_pic_nums_idc_l1[20];$/;"	v
gop_pyramid	explicit_gop.c	/^void gop_pyramid(int level, int frm_no, int frames, GOP_DATA *pyramid_structure)$/;"	f
gop_structure	global.h	/^GOP_DATA *gop_structure;$/;"	v
gop_structure	lencod.c	/^GOP_DATA *gop_structure;$/;"	v
hadamard	global.h	/^  int hadamard;                 \/*!< 0: 'normal' SAD in sub pixel search.  1: use 4x4 Hadamard transform and '$/;"	m	struct:__anon39
hadamardqpel	global.h	/^  int hadamardqpel;             \/\/!< Use Hadamard transform only for quarter pel positions.$/;"	m	struct:__anon39
height	global.h	/^  int height;                  \/\/!< Number of lines$/;"	m	struct:__anon40
height_cr	global.h	/^  int height_cr;               \/\/!< Number of lines  chroma$/;"	m	struct:__anon40
height_cr_frame	global.h	/^  int height_cr_frame;         \/\/!< Number of lines  chroma frame$/;"	m	struct:__anon40
hor_offset	block.h	/^const unsigned char hor_offset[4][4][4] =$/;"	v
hrd_parameters_t	parsetcommon.h	/^} hrd_parameters_t;$/;"	t	typeref:struct:__anon2
i16offset	global.h	/^  int    i16offset;$/;"	m	struct:__anon42
i16offset	global.h	/^  int i16offset;$/;"	m	struct:__anon40
idr_enable	global.h	/^  int idr_enable;				\/\/!< Encode intra slices as IDR$/;"	m	struct:__anon39
idr_flag	global.h	/^  int   idr_flag;$/;"	m	struct:__anon36
idr_memory_management	mbuffer.c	/^static void idr_memory_management(StorablePicture* p)$/;"	f	file:
images	lencod.c	/^ImageParameters images,      *img   = &images;$/;"	v
img	lencod.c	/^ImageParameters images,      *img   = &images;$/;"	v
img2buf	output.c	/^void img2buf (imgpel** imgX, unsigned char* buf, int size_x, int size_y, int symbol_size_in_bytes, int crop_left, int crop_right, int crop_top, int crop_bottom)$/;"	f
img4Y_tmp	global.h	/^int    **img4Y_tmp;          \/\/!< for quarter pel interpolation$/;"	v
img4Y_tmp	lencod.c	/^int    **img4Y_tmp;          \/\/!< for quarter pel interpolation$/;"	v
imgUV	mbuffer.h	/^  imgpel ***  imgUV;         \/\/!< U and V picture components$/;"	m	struct:storable_picture
imgUV_com	global.h	/^imgpel  ***imgUV_com;              \/\/!< Encoded croma images$/;"	v
imgUV_com	lencod.c	/^imgpel  ***imgUV_com;          \/\/!< Encoded croma images$/;"	v
imgUV_org	global.h	/^imgpel ***imgUV_org;         \/\/!< Reference chroma image$/;"	v
imgUV_org	lencod.c	/^imgpel ***imgUV_org;         \/\/!< Reference chroma image$/;"	v
imgUV_org_bot	global.h	/^imgpel  ***imgUV_org_bot;$/;"	v
imgUV_org_bot	lencod.c	/^imgpel  ***imgUV_org_bot;$/;"	v
imgUV_org_frm	global.h	/^imgpel  ***imgUV_org_frm;$/;"	v
imgUV_org_frm	lencod.c	/^imgpel  ***imgUV_org_frm;$/;"	v
imgUV_org_top	global.h	/^imgpel  ***imgUV_org_top;$/;"	v
imgUV_org_top	lencod.c	/^imgpel  ***imgUV_org_top;$/;"	v
imgY	mbuffer.h	/^  imgpel **   imgY;          \/\/!< Y picture component$/;"	m	struct:storable_picture
imgY_11	mbuffer.h	/^  imgpel *    imgY_11;       \/\/!< Y picture component with padded borders$/;"	m	struct:storable_picture
imgY_11_w	mbuffer.h	/^  imgpel *    imgY_11_w;     \/\/!< Y picture component with padded borders for weighted prediction$/;"	m	struct:storable_picture
imgY_com	global.h	/^imgpel   **imgY_com;               \/\/!< Encoded luma images$/;"	v
imgY_com	lencod.c	/^imgpel   **imgY_com;           \/\/!< Encoded luma images$/;"	v
imgY_org	global.h	/^imgpel **imgY_org;           \/\/!< Reference luma image$/;"	v
imgY_org	lencod.c	/^imgpel **imgY_org;           \/\/!< Reference luma image$/;"	v
imgY_org_bot	global.h	/^imgpel   **imgY_org_bot;$/;"	v
imgY_org_bot	lencod.c	/^imgpel   **imgY_org_bot;$/;"	v
imgY_org_frm	global.h	/^imgpel   **imgY_org_frm;$/;"	v
imgY_org_frm	lencod.c	/^imgpel   **imgY_org_frm;$/;"	v
imgY_org_top	global.h	/^imgpel   **imgY_org_top;$/;"	v
imgY_org_top	lencod.c	/^imgpel   **imgY_org_top;$/;"	v
imgY_ups	mbuffer.h	/^  imgpel **   imgY_ups;      \/\/!< Y picture component upsampled (Quarter pel)$/;"	m	struct:storable_picture
imgY_ups_w	mbuffer.h	/^  imgpel **   imgY_ups_w;    \/\/!< Y picture component upsampled (Quarter pel) for weighted prediction$/;"	m	struct:storable_picture
img_height	global.h	/^  int img_height;               \/\/!< image height (must be a multiple of 16 pels)$/;"	m	struct:__anon39
img_height_cr	global.h	/^  int img_height_cr;$/;"	m	struct:__anon39
img_width	global.h	/^  int img_width;                \/\/!< image width  (must be a multiple of 16 pels)$/;"	m	struct:__anon39
img_width_cr	global.h	/^  int img_width_cr;$/;"	m	struct:__anon39
imgpel	global.h	92;"	d
imgtr_last_P_fld	global.h	/^  int imgtr_last_P_fld;$/;"	m	struct:__anon40
imgtr_last_P_frm	global.h	/^  int imgtr_last_P_frm;$/;"	m	struct:__anon40
imgtr_next_P_fld	global.h	/^  int imgtr_next_P_fld;$/;"	m	struct:__anon40
imgtr_next_P_frm	global.h	/^  int imgtr_next_P_frm;$/;"	m	struct:__anon40
inf	global.h	/^  int                 inf;            \/\/!< info part of UVLC code$/;"	m	struct:syntaxelement
infile	global.h	/^  char infile[FILE_NAME_SIZE];             \/\/!< YUV 4:2:0 input format$/;"	m	struct:__anon39
infile_header	global.h	/^  int  infile_header;           \/\/!< If input file has a header set this to the length of the header$/;"	m	struct:__anon39
information_init	lencod.c	/^void information_init()$/;"	f
init_contexts	context_ini.c	/^void init_contexts ()$/;"	f
init_dec_ref_pic_marking_buffer	image.c	/^static void init_dec_ref_pic_marking_buffer()$/;"	f	file:
init_done	mbuffer.h	/^  int           init_done;$/;"	m	struct:decoded_picture_buffer
init_dpb	mbuffer.c	/^void init_dpb()$/;"	f
init_field	image.c	/^static void init_field ()$/;"	f	file:
init_frame	image.c	/^static void init_frame ()$/;"	f	file:
init_global_buffers	lencod.c	/^int init_global_buffers()$/;"	f
init_gop_structure	explicit_gop.c	/^void init_gop_structure()$/;"	f
init_img	lencod.c	/^void init_img()$/;"	f
init_lists	mbuffer.c	/^void init_lists(int currSliceType, PictureStructure currPicStructure)$/;"	f
init_mbaff_lists	mbuffer.c	/^void init_mbaff_lists()$/;"	f
init_orig_buffers	lencod.c	/^int init_orig_buffers()$/;"	f
init_out_buffer	output.c	/^void init_out_buffer()$/;"	f
init_poc	lencod.c	/^void init_poc()$/;"	f
init_rdopt	rdopt.c	/^void init_rdopt ()$/;"	f
init_ref_pic_list_reordering	slice.c	/^void init_ref_pic_list_reordering()$/;"	f
init_slice	slice.c	/^static void init_slice (int start_mb_addr)$/;"	f	file:
init_top_bot_planes	memalloc.c	/^int init_top_bot_planes(imgpel **imgFrame, int rows, int columns, imgpel ***imgTopField, imgpel ***imgBotField)$/;"	f
initial_Bframes	lencod.c	/^int initial_Bframes = 0;$/;"	v
initial_cpb_removal_delay_length_minus1	parsetcommon.h	/^  unsigned  initial_cpb_removal_delay_length_minus1;          \/\/ u(5)$/;"	m	struct:__anon2
initialized	context_ini.c	/^int***                  initialized;$/;"	v
input	lencod.c	/^InputParameters inputs,      *input = &inputs;$/;"	v
inputs	lencod.c	/^InputParameters inputs,      *input = &inputs;$/;"	v
insert_picture_in_dpb	mbuffer.c	/^static void insert_picture_in_dpb(FrameStore* fs, StorablePicture* p)$/;"	f	file:
int64	global.h	/^  typedef __int64   int64;$/;"	t
int64	global.h	/^  typedef int64_t int64;$/;"	t
int64	global.h	/^  typedef long long int64;$/;"	t
interpret_gop_structure	explicit_gop.c	/^void interpret_gop_structure()$/;"	f
intra_block	global.h	/^  int *intra_block;$/;"	m	struct:__anon40
intra_chroma_mode	global.h	/^  int   intra_chroma_mode[4];$/;"	m	struct:__anon41
intra_period	global.h	/^  int intra_period;             \/\/!< Random Access period though intra$/;"	m	struct:__anon39
intra_pred_modes	global.h	/^  int                 intra_pred_modes[BLOCK_MULTIPLE*BLOCK_MULTIPLE];$/;"	m	struct:macroblock
intra_pred_modes	global.h	/^  int    intra_pred_modes[16];$/;"	m	struct:__anon42
intra_pred_modes8x8	global.h	/^  int                 intra_pred_modes8x8[BLOCK_MULTIPLE*BLOCK_MULTIPLE];                             \/\/!< four 8x8 blocks in a macroblock$/;"	m	struct:macroblock
intra_upd	global.h	/^  int intra_upd;                \/*!< For error robustness. 0: no special action. 1: One GOB\/frame is intra coded$/;"	m	struct:__anon39
intrapred_luma	block.c	/^void intrapred_luma(int img_x,int img_y, int *left_available, int *up_available, int *all_available)$/;"	f
intrapred_luma8x8	transform8x8.c	/^void intrapred_luma8x8(int img_x,int img_y, int *left_available, int *up_available, int *all_available)$/;"	f
intrapred_luma_16x16	block.c	/^void intrapred_luma_16x16()$/;"	f
intras	global.h	/^int intras;         \/\/!< Counts the intra updates in each frame.$/;"	v
intras	lencod.c	/^int intras;         \/\/!< Counts the intra updates in each frame.$/;"	v
ipr_contexts	global.h	/^  BiContextType  ipr_contexts [NUM_IPR_CTX]; $/;"	m	struct:__anon33
ipredmode	global.h	/^  int    **ipredmode;$/;"	m	struct:__anon42
ipredmode	global.h	/^  int **ipredmode;             \/\/!< intra prediction mode$/;"	m	struct:__anon40
ipredmode8x8	global.h	/^  int **ipredmode8x8;          \/\/!< help storage for 8x8 modes, inserted by YV$/;"	m	struct:__anon40
is_intra_block	global.h	/^  int is_intra_block;$/;"	m	struct:__anon40
is_long_ref	mbuffer.c	/^int is_long_ref(StorablePicture *s)$/;"	f
is_long_term	mbuffer.h	/^  int         is_long_term;$/;"	m	struct:colocated_params
is_long_term	mbuffer.h	/^  int         is_long_term;$/;"	m	struct:storable_picture
is_long_term	mbuffer.h	/^  int       is_long_term;           \/\/!< 0=not used for ref; 1=top used; 2=bottom used; 3=both fields (or frame) used$/;"	m	struct:frame_store
is_long_term_reference	mbuffer.c	/^static int is_long_term_reference(FrameStore* fs)$/;"	f	file:
is_non_existent	mbuffer.h	/^  int       is_non_existent;$/;"	m	struct:frame_store
is_orig_reference	mbuffer.h	/^  int       is_orig_reference;      \/\/!< original marking by nal_ref_idc: 0=not used for ref; 1=top used; 2=bottom used; 3=both fields (or frame) used$/;"	m	struct:frame_store
is_output	mbuffer.h	/^  int         is_output;$/;"	m	struct:storable_picture
is_output	mbuffer.h	/^  int       is_output;$/;"	m	struct:frame_store
is_reference	mbuffer.h	/^  int       is_reference;           \/\/!< 0=not used for ref; 1=top used; 2=bottom used; 3=both fields (or frame) used$/;"	m	struct:frame_store
is_short_ref	mbuffer.c	/^int is_short_ref(StorablePicture *s)$/;"	f
is_short_term_reference	mbuffer.c	/^static int is_short_term_reference(FrameStore* fs)$/;"	f	file:
is_used	mbuffer.h	/^  int       is_used;                \/\/!< 0=empty; 1=top; 2=bottom; 3=both fields (or frame)$/;"	m	struct:frame_store
is_used_for_reference	mbuffer.c	/^static int is_used_for_reference(FrameStore* fs)$/;"	f	file:
is_v_block	global.h	/^  int is_v_block;$/;"	m	struct:__anon40
itu_t_t35_country_code	sei.h	/^  int itu_t_t35_country_code;$/;"	m	struct:__anon15
itu_t_t35_country_code_extension_byte	sei.h	/^  int itu_t_t35_country_code_extension_byte;$/;"	m	struct:__anon15
jumpd	global.h	/^  int jumpd;                    \/\/!< number of frames to skip in input sequence (e.g 2 takes frame 0,3,6,9...)$/;"	m	struct:__anon39
k	global.h	/^  int                 k;              \/\/!< CABAC context for coeff_count,uv$/;"	m	struct:syntaxelement
last_P_no	image.c	/^int *last_P_no;$/;"	v
last_P_no_fld	image.c	/^int *last_P_no_fld;$/;"	v
last_P_no_frm	image.c	/^int *last_P_no_frm;$/;"	v
last_contexts	global.h	/^  BiContextType  last_contexts[NUM_BLOCK_TYPES][NUM_LAST_CTX];$/;"	m	struct:__anon33
last_dquant	cabac.c	/^int last_dquant = 0;$/;"	v
last_frame	global.h	/^  int last_frame;$/;"	m	struct:__anon39
last_has_mmco_5	global.h	/^  int last_has_mmco_5;$/;"	m	struct:__anon40
last_output_poc	mbuffer.h	/^  int           last_output_poc;$/;"	m	struct:decoded_picture_buffer
last_pic_bottom_field	global.h	/^  int last_pic_bottom_field;$/;"	m	struct:__anon40
last_picture	mbuffer.h	/^  FrameStore   *last_picture;$/;"	m	struct:decoded_picture_buffer
last_picture_flag	sei.h	/^  unsigned int last_picture_flag;$/;"	m	struct:__anon9
layer	global.h	/^  int layer;             \/\/!< which layer this picture belonged to$/;"	m	struct:__anon40
layer_number	sei.h	/^  int layer_number;$/;"	m	struct:__anon10
len	global.h	/^  int                 len;            \/\/!< length of code$/;"	m	struct:syntaxelement
len	nalucommon.h	/^  unsigned len;                 \/\/! Length of the NAL unit (Excluding the start code, which does not belong to the NALU)$/;"	m	struct:__anon18
level_idc	parsetcommon.h	/^  unsigned  level_idc;                                        \/\/ u(8)$/;"	m	struct:__anon5
levrun_linfo_c2x2	vlc.c	/^void levrun_linfo_c2x2(int level,int run,int *len,int *info)$/;"	f
levrun_linfo_inter	vlc.c	/^void levrun_linfo_inter(int level,int run,int *len,int *info)$/;"	f
levrun_linfo_intra	vlc.c	/^void levrun_linfo_intra(int level,int run,int *len,int *info)$/;"	f
lf_alpha_c0_offset	global.h	/^  int                 lf_alpha_c0_offset;$/;"	m	struct:macroblock
lf_beta_offset	global.h	/^  int                 lf_beta_offset;$/;"	m	struct:macroblock
lf_disable	global.h	/^  int                 lf_disable;$/;"	m	struct:macroblock
line	refbuf.c	/^static pel_t line[16];$/;"	v	file:
listX	mbuffer.c	/^StorablePicture **listX[6];$/;"	v
listXsize	mbuffer.c	/^int listXsize[6];$/;"	v
log2_max_frame_num_minus4	global.h	/^unsigned int log2_max_frame_num_minus4;$/;"	v
log2_max_frame_num_minus4	lencod.c	/^unsigned int log2_max_frame_num_minus4;$/;"	v
log2_max_frame_num_minus4	parsetcommon.h	/^  unsigned  log2_max_frame_num_minus4;                        \/\/ ue(v)$/;"	m	struct:__anon5
log2_max_mv_length_horizontal	parsetcommon.h	/^    unsigned  log2_max_mv_length_horizontal;                  \/\/ ue(v)$/;"	m	struct:__anon3
log2_max_mv_length_vertical	parsetcommon.h	/^    unsigned  log2_max_mv_length_vertical;                    \/\/ ue(v)$/;"	m	struct:__anon3
log2_max_pic_order_cnt_lsb_minus4	global.h	/^unsigned int log2_max_pic_order_cnt_lsb_minus4;$/;"	v
log2_max_pic_order_cnt_lsb_minus4	lencod.c	/^unsigned int log2_max_pic_order_cnt_lsb_minus4;$/;"	v
log2_max_pic_order_cnt_lsb_minus4	parsetcommon.h	/^  unsigned log2_max_pic_order_cnt_lsb_minus4;                 \/\/ ue(v)$/;"	m	struct:__anon5
long_term_frame_idx	global.h	/^  int long_term_frame_idx;$/;"	m	struct:DecRefPicMarking_s
long_term_frame_idx	mbuffer.h	/^  int         long_term_frame_idx;$/;"	m	struct:storable_picture
long_term_frame_idx	mbuffer.h	/^  int       long_term_frame_idx;$/;"	m	struct:frame_store
long_term_pic_idx_l0	global.h	/^  int                 *long_term_pic_idx_l0;$/;"	m	struct:__anon35
long_term_pic_idx_l1	global.h	/^  int                 *long_term_pic_idx_l1;$/;"	m	struct:__anon35
long_term_pic_num	global.h	/^  int long_term_pic_num;$/;"	m	struct:DecRefPicMarking_s
long_term_pic_num	mbuffer.h	/^  int         long_term_pic_num;$/;"	m	struct:storable_picture
long_term_reference_flag	global.h	/^  int long_term_reference_flag;$/;"	m	struct:__anon40
lossless_qpprime_flag	global.h	/^  int lossless_qpprime_flag;$/;"	m	struct:__anon40
lossless_qpprime_y_zero_flag	global.h	/^  int lossless_qpprime_y_zero_flag;$/;"	m	struct:__anon39
low_delay_hrd_flag	parsetcommon.h	/^    Boolean      low_delay_hrd_flag;                             \/\/ u(1)$/;"	m	struct:__anon3
lseek	global.h	73;"	d
ltref_frames_in_buffer	mbuffer.h	/^  unsigned      ltref_frames_in_buffer;$/;"	m	struct:decoded_picture_buffer
luma_log_weight_denom	global.h	/^int luma_log_weight_denom;$/;"	v
luma_log_weight_denom	lencod.c	/^int luma_log_weight_denom;$/;"	v
luma_transform_size_8x8_flag	global.h	/^  int                 luma_transform_size_8x8_flag;$/;"	m	struct:macroblock
luma_transform_size_8x8_flag	global.h	/^  int    luma_transform_size_8x8_flag;$/;"	m	struct:__anon42
luma_transform_size_8x8_flag	rdopt.c	/^int   luma_transform_size_8x8_flag;$/;"	v
m	rtp.h	/^  unsigned int m;          \/\/!< Marker bit$/;"	m	struct:__anon17
m7	global.h	/^  int m7[16][16];              \/\/!< the diff pixel values between orginal image and prediction$/;"	m	struct:__anon40
m_Hp	ratectl.c	/^int m_Hp;$/;"	v
m_Hp	ratectl.h	/^int m_Hp;$/;"	v
m_Qc	ratectl.c	/^int m_Qc;$/;"	v
m_Qc	ratectl.h	/^int m_Qc;$/;"	v
m_Qp	ratectl.c	/^int m_Qp;$/;"	v
m_Qp	ratectl.h	/^int m_Qp;$/;"	v
m_Qstep	ratectl.c	/^double m_Qstep;$/;"	v
m_Qstep	ratectl.h	/^double m_Qstep;$/;"	v
m_X1	ratectl.c	/^double m_X1;$/;"	v
m_X1	ratectl.h	/^double m_X1;$/;"	v
m_X2	ratectl.c	/^double m_X2;$/;"	v
m_X2	ratectl.h	/^double m_X2;$/;"	v
m_rgQp	ratectl.c	/^double  m_rgQp[21];$/;"	v
m_rgQp	ratectl.h	/^double  m_rgQp[21];$/;"	v
m_rgRejected	ratectl.c	/^Boolean   m_rgRejected[21];$/;"	v
m_rgRejected	ratectl.h	/^Boolean   m_rgRejected[21];$/;"	v
m_rgRp	ratectl.c	/^double m_rgRp[21];$/;"	v
m_rgRp	ratectl.h	/^double m_rgRp[21];$/;"	v
m_windowSize	ratectl.c	/^int m_windowSize;$/;"	v
m_windowSize	ratectl.h	/^int m_windowSize;$/;"	v
macroblock	global.h	/^typedef struct macroblock$/;"	s
main	lencod.c	/^int main(int argc,char **argv)$/;"	f
malloc_picture	lencod.c	/^Picture *malloc_picture()$/;"	f
malloc_slice	slice.c	/^static Slice *malloc_slice()$/;"	f	file:
map_contexts	global.h	/^  BiContextType  map_contexts [NUM_BLOCK_TYPES][NUM_MAP_CTX];$/;"	m	struct:__anon33
mapping	global.h	/^  void    (*mapping)(int value1, int value2, int* len_ptr, int* info_ptr);$/;"	m	struct:syntaxelement
mark_pic_long_term	mbuffer.c	/^static void mark_pic_long_term(StorablePicture* p, int long_term_frame_idx, int picNumX)$/;"	f	file:
matrix4x4_check	q_matrix.c	/^int matrix4x4_check[6] = {0, 0, 0, 0, 0, 0};$/;"	v
matrix8x8_check	q_matrix.c	/^int matrix8x8_check[2] = {0, 0};$/;"	v
matrix_coefficients	parsetcommon.h	/^      unsigned  matrix_coefficients;                          \/\/ u(8)$/;"	m	struct:__anon3
max	minmax.h	14;"	d
max	transform8x8.c	36;"	d	file:
max_bits_per_mb_denom	parsetcommon.h	/^    unsigned  max_bits_per_mb_denom;                          \/\/ ue(v)$/;"	m	struct:__anon3
max_bytes_per_pic_denom	parsetcommon.h	/^    unsigned  max_bytes_per_pic_denom;                        \/\/ ue(v)$/;"	m	struct:__anon3
max_c2	cabac.c	/^static const int max_c2       [] = { 4,  4,  4,  4,  4,  4,  3,  4,  3,  3}; \/\/ 9$/;"	v	file:
max_dec_frame_buffering	parsetcommon.h	/^    unsigned  max_dec_frame_buffering;                        \/\/ ue(v)$/;"	m	struct:__anon3
max_dec_frame_reordering	parsetcommon.h	/^    unsigned  max_dec_frame_reordering;                       \/\/ ue(v)$/;"	m	struct:__anon3
max_imgpel_value	global.h	/^  int max_imgpel_value;         \/\/!< max value that one picture element (pixel) can take (depends on pic_unit_bitdepth)$/;"	m	struct:__anon40
max_imgpel_value_uv	global.h	/^  int max_imgpel_value_uv;$/;"	m	struct:__anon40
max_limit	configfile.h	/^  double max_limit;$/;"	m	struct:__anon44
max_long_term_frame_idx_plus1	global.h	/^  int max_long_term_frame_idx_plus1;$/;"	m	struct:DecRefPicMarking_s
max_long_term_pic_idx	mbuffer.h	/^  int           max_long_term_pic_idx;$/;"	m	struct:decoded_picture_buffer
max_mvd	mv-search.c	/^int     max_mvd;$/;"	v
max_num_references	global.h	/^  int max_num_references;      \/\/!< maximum number of reference pictures that may occur$/;"	m	struct:__anon40
max_part_nr	global.h	/^  int                 max_part_nr;  \/\/!< number of different partitions$/;"	m	struct:__anon35
max_search_range	mv-search.c	/^static int  **max_search_range;$/;"	v	file:
max_size	nalucommon.h	/^  unsigned max_size;            \/\/! Nal Unit Buffer size$/;"	m	struct:__anon18
maxpos	cabac.c	/^static const int maxpos       [] = {16, 15, 64, 32, 32, 16,  4, 15,  8, 16};$/;"	v	file:
mbAddrA	global.h	/^  int mbAddrA, mbAddrB, mbAddrC, mbAddrD;$/;"	m	struct:macroblock
mbAddrB	global.h	/^  int mbAddrA, mbAddrB, mbAddrC, mbAddrD;$/;"	m	struct:macroblock
mbAddrC	global.h	/^  int mbAddrA, mbAddrB, mbAddrC, mbAddrD;$/;"	m	struct:macroblock
mbAddrD	global.h	/^  int mbAddrA, mbAddrB, mbAddrC, mbAddrD;$/;"	m	struct:macroblock
mbAvailA	global.h	/^  int mbAvailA, mbAvailB, mbAvailC, mbAvailD;$/;"	m	struct:macroblock
mbAvailB	global.h	/^  int mbAvailA, mbAvailB, mbAvailC, mbAvailD;$/;"	m	struct:macroblock
mbAvailC	global.h	/^  int mbAvailA, mbAvailB, mbAvailC, mbAvailD;$/;"	m	struct:macroblock
mbAvailD	global.h	/^  int mbAvailA, mbAvailB, mbAvailC, mbAvailD;$/;"	m	struct:macroblock
mb_adaptive	global.h	/^int  mb_adaptive;       \/\/!< For MB level field\/frame coding tools$/;"	v
mb_adaptive	lencod.c	/^int  mb_adaptive;       \/\/!< For MB level field\/frame coding tools$/;"	v
mb_adaptive_frame_field_flag	mbuffer.h	/^  int         mb_adaptive_frame_field_flag;$/;"	m	struct:colocated_params
mb_adaptive_frame_field_flag	parsetcommon.h	/^    Boolean   mb_adaptive_frame_field_flag;                   \/\/ u(1)$/;"	m	struct:__anon5
mb_addr	global.h	/^  int mb_addr;$/;"	m	struct:pix_pos
mb_aff_contexts	global.h	/^  BiContextType mb_aff_contexts     [NUM_MB_AFF_CTX];$/;"	m	struct:__anon32
mb_available_left	global.h	/^  struct macroblock   *mb_available_left; \/\/!< pointer to neighboring MB (CABAC)$/;"	m	struct:macroblock	typeref:struct:macroblock::macroblock
mb_available_up	global.h	/^  struct macroblock   *mb_available_up;   \/\/!< pointer to neighboring MB (CABAC)$/;"	m	struct:macroblock	typeref:struct:macroblock::macroblock
mb_cr_size_x	global.h	/^  int mb_cr_size_x;$/;"	m	struct:__anon40
mb_cr_size_y	global.h	/^  int mb_cr_size_y;$/;"	m	struct:__anon40
mb_data	global.h	/^  Macroblock    *mb_data;                                   \/\/!< array containing all MBs of a whole frame$/;"	m	struct:__anon40
mb_field	global.h	/^  int                 mb_field;$/;"	m	struct:macroblock
mb_field	mbuffer.h	/^  byte *      mb_field;      \/\/!< field macroblock indicator$/;"	m	struct:storable_picture
mb_is_available	mb_access.c	/^int mb_is_available(int mbAddr, int currMbAddr)$/;"	f
mb_type	global.h	/^  int                 mb_type;$/;"	m	struct:macroblock
mb_type	global.h	/^  int    mb_type;$/;"	m	struct:__anon42
mb_type_contexts	global.h	/^  BiContextType mb_type_contexts [3][NUM_MB_TYPE_CTX];$/;"	m	struct:__anon32
mb_x	global.h	/^  int mb_x;                    \/\/!< current MB horizontal$/;"	m	struct:__anon40
mb_y	global.h	/^  int mb_y;                    \/\/!< current MB vertical$/;"	m	struct:__anon40
mb_y_intra	global.h	/^  int mb_y_intra;              \/\/!< which GOB to intra code$/;"	m	struct:__anon40
mb_y_upd	global.h	/^  int mb_y_upd;$/;"	m	struct:__anon40
me_time	global.h	/^int  me_tot_time,me_time;$/;"	v
me_time	lencod.c	/^int  me_tot_time,me_time;$/;"	v
me_tot_time	global.h	/^int  me_tot_time,me_time;$/;"	v
me_tot_time	lencod.c	/^int  me_tot_time,me_time;$/;"	v
memory_management_control_operation	global.h	/^  int memory_management_control_operation;$/;"	m	struct:DecRefPicMarking_s
min	minmax.h	15;"	d
min	transform8x8.c	37;"	d	file:
min_limit	configfile.h	/^  double min_limit;$/;"	m	struct:__anon44
min_rdcost	global.h	/^  double min_rdcost;$/;"	m	struct:__anon42
mixedModeEdgeFlag	loopFilter.c	/^byte mixedModeEdgeFlag, fieldModeFilteringFlag;$/;"	v
mm_assign_long_term_frame_idx	mbuffer.c	/^static void mm_assign_long_term_frame_idx(StorablePicture* p, int difference_of_pic_nums_minus1, int long_term_frame_idx)$/;"	f	file:
mm_mark_current_picture_long_term	mbuffer.c	/^static void mm_mark_current_picture_long_term(StorablePicture *p, int long_term_frame_idx)$/;"	f	file:
mm_unmark_all_long_term_for_reference	mbuffer.c	/^static void mm_unmark_all_long_term_for_reference ()$/;"	f	file:
mm_unmark_all_short_term_for_reference	mbuffer.c	/^static void mm_unmark_all_short_term_for_reference ()$/;"	f	file:
mm_unmark_long_term_for_reference	mbuffer.c	/^static void mm_unmark_long_term_for_reference(StorablePicture *p, int long_term_pic_num)$/;"	f	file:
mm_unmark_short_term_for_reference	mbuffer.c	/^static void mm_unmark_short_term_for_reference(StorablePicture *p, int difference_of_pic_nums_minus1)$/;"	f	file:
mm_update_max_long_term_frame_idx	mbuffer.c	/^void mm_update_max_long_term_frame_idx(int max_long_term_frame_idx_plus1)$/;"	f
mode	global.h	/^  int    mode;$/;"	m	struct:__anon42
mode_use	global.h	/^  int   mode_use            [NUM_PIC_TYPE][MAXMODE]; \/\/!< Macroblock mode usage for Intra frames$/;"	m	struct:__anon41
mode_use_Bframe	global.h	/^  int   *mode_use_Bframe;$/;"	m	struct:__anon41
mode_use_transform_4x4	global.h	/^  int   mode_use_transform_4x4[NUM_PIC_TYPE][MAXMODE];$/;"	m	struct:__anon41
mode_use_transform_8x8	global.h	/^  int   mode_use_transform_8x8[NUM_PIC_TYPE][MAXMODE];$/;"	m	struct:__anon41
model_number	context_ini.c	/^int***                  model_number;$/;"	v
model_number	global.h	/^  int model_number;$/;"	m	struct:__anon39
model_number	global.h	/^  int model_number;$/;"	m	struct:__anon40
modify_redundant_pic_cnt	slice.c	/^void modify_redundant_pic_cnt(unsigned char *buffer)$/;"	f
mot_ctx	global.h	/^  MotionInfoContexts  *mot_ctx;     \/\/!< pointer to struct of context models for use in CABAC$/;"	m	struct:__anon35
mot_ctx	rdopt_coding_state.h	/^  MotionInfoContexts   *mot_ctx;$/;"	m	struct:__anon19
motion_cost	mv-search.c	/^int**** motion_cost;$/;"	v
motion_vectors_over_pic_boundaries_flag	parsetcommon.h	/^    Boolean      motion_vectors_over_pic_boundaries_flag;        \/\/ u(1)$/;"	m	struct:__anon3
moving_block	mbuffer.h	/^  byte **     moving_block;$/;"	m	struct:colocated_params
moving_block	mbuffer.h	/^  byte **     moving_block;$/;"	m	struct:storable_picture
mpr	global.h	/^  imgpel mpr[16][16];          \/\/!< current best prediction mode$/;"	m	struct:__anon40
mpr8x8	rdopt.c	/^imgpel   mpr8x8[16][16];$/;"	v
mprRGB	global.h	/^int mprRGB[3][16][16];$/;"	v
mprRGB	lencod.c	/^int mprRGB[3][16][16];$/;"	v
mprRGB_8x8	rdopt.c	/^int   mprRGB_8x8[3][16][16], mprRGB_8x8ts[3][16][16];$/;"	v
mprRGB_8x8ts	rdopt.c	/^int   mprRGB_8x8[3][16][16], mprRGB_8x8ts[3][16][16];$/;"	v
mpr_8x8ts	rdopt.c	/^imgpel   mpr_8x8ts[16][16];$/;"	v
mprr	global.h	/^  imgpel mprr[9][16][16];      \/\/!< all 9 prediction modes? \/\/ enlarged from 4 to 16 for ABT (is that neccessary?)$/;"	m	struct:__anon40
mprr_2	global.h	/^  imgpel mprr_2[5][16][16];    \/\/!< all 4 new intra prediction modes$/;"	m	struct:__anon40
mprr_3	global.h	/^  imgpel mprr_3[9][8][8];      \/\/!< all 9 prediction modes for 8x8 transformation$/;"	m	struct:__anon40
mprr_c	global.h	/^  imgpel mprr_c[2][4][16][16]; \/\/!< chroma intra prediction modes$/;"	m	struct:__anon40
mv	mbuffer.h	/^  short ****  mv;            \/\/!< motion vector       [list][subblock_x][subblock_y][component]  $/;"	m	struct:colocated_params
mv	mbuffer.h	/^  short ****  mv;            \/\/!< motion vector       [list][subblock_x][subblock_y][component]$/;"	m	struct:storable_picture
mv8x8	rdopt.c	/^short mv8x8[2][4][4][2];              \/\/[LIST][block_x][block_y][MVx\/MVy]$/;"	v
mv_res_contexts	global.h	/^  BiContextType mv_res_contexts  [2][NUM_MV_RES_CTX];$/;"	m	struct:__anon32
mvbits	mv-search.c	/^int*    mvbits;$/;"	v
mvd	global.h	/^  int                 mvd[2][BLOCK_MULTIPLE][BLOCK_MULTIPLE][2];          \/\/!< indices correspond to [forw,backw][block_y][block_x][x,y]$/;"	m	struct:macroblock
mvd	rdopt_coding_state.h	/^  int                   mvd[2][BLOCK_MULTIPLE][BLOCK_MULTIPLE][2];$/;"	m	struct:__anon19
mvscale	global.h	/^  int mvscale[6][MAX_REFERENCE_PICTURES];$/;"	m	struct:__anon40
nal_hrd_parameters	parsetcommon.h	/^    hrd_parameters_t nal_hrd_parameters;                      \/\/ hrd_paramters_t$/;"	m	struct:__anon3
nal_hrd_parameters_present_flag	parsetcommon.h	/^  Boolean      nal_hrd_parameters_present_flag;                  \/\/ u(1)$/;"	m	struct:__anon3
nal_reference_idc	global.h	/^  int nal_reference_idc;$/;"	m	struct:__anon40
nal_reference_idc	nalucommon.h	/^  int nal_reference_idc;        \/\/! NALU_PRIORITY_xxxx$/;"	m	struct:__anon18
nal_unit_type	nalucommon.h	/^  int nal_unit_type;            \/\/! NALU_TYPE_xxxx$/;"	m	struct:__anon18
nb_references	global.h	/^  int nb_references;$/;"	m	struct:__anon40
nextP_tr_fld	global.h	/^int  frame_no, nextP_tr_fld, nextP_tr_frm;$/;"	v
nextP_tr_fld	lencod.c	/^int  frame_no, nextP_tr_fld, nextP_tr_frm;$/;"	v
nextP_tr_frm	global.h	/^int  frame_no, nextP_tr_fld, nextP_tr_frm;$/;"	v
nextP_tr_frm	lencod.c	/^int  frame_no, nextP_tr_fld, nextP_tr_frm;$/;"	v
no_frames	global.h	/^  int no_frames;                \/\/!< number of frames to be encoded$/;"	m	struct:__anon39
no_mem_exit	memalloc.c	/^void no_mem_exit(char *where)$/;"	f
no_output_of_prior_pics_flag	global.h	/^  int no_output_of_prior_pics_flag;$/;"	m	struct:__anon40
no_part	rdopt_coding_state.h	/^  int                   no_part;$/;"	m	struct:__anon19
no_slices	global.h	/^  int   no_slices;$/;"	m	struct:__anon36
nobskip	global.h	/^  int nobskip;$/;"	m	struct:__anon39
non_existing	mbuffer.h	/^  int         non_existing;$/;"	m	struct:storable_picture
num_blk8x8_uv	global.h	/^  int num_blk8x8_uv;$/;"	m	struct:__anon40
num_cdc_coeff	global.h	/^  int num_cdc_coeff;$/;"	m	struct:__anon40
num_mb	global.h	/^  int                 num_mb;       \/\/!< number of MBs in the slice$/;"	m	struct:__anon35
num_mb_per_slice	context_ini.c	/^int                     num_mb_per_slice;$/;"	v
num_ref_frames	global.h	/^  int num_ref_frames;           \/\/!< number of reference frames to be used$/;"	m	struct:__anon39
num_ref_frames	global.h	/^  int num_ref_frames;          \/\/!< number of reference frames to be used$/;"	m	struct:__anon40
num_ref_frames	parsetcommon.h	/^  unsigned  num_ref_frames;                                   \/\/ ue(v)$/;"	m	struct:__anon5
num_ref_frames_in_pic_order_cnt_cycle	global.h	/^  unsigned int num_ref_frames_in_pic_order_cnt_cycle;$/;"	m	struct:__anon40
num_ref_frames_in_pic_order_cnt_cycle	parsetcommon.h	/^    unsigned  num_ref_frames_in_pic_order_cnt_cycle;          \/\/ ue(v)$/;"	m	struct:__anon5
num_ref_idx_l0_active	global.h	/^  int num_ref_idx_l0_active;$/;"	m	struct:__anon40
num_ref_idx_l0_active_minus1	parsetcommon.h	/^  int       num_ref_idx_l0_active_minus1;                     \/\/ ue(v)$/;"	m	struct:__anon4
num_ref_idx_l1_active	global.h	/^  int num_ref_idx_l1_active;$/;"	m	struct:__anon40
num_ref_idx_l1_active_minus1	parsetcommon.h	/^  int       num_ref_idx_l1_active_minus1;                     \/\/ ue(v)$/;"	m	struct:__anon4
num_referenced_subseqs	sei.h	/^  int num_referenced_subseqs;$/;"	m	struct:__anon11
num_slice_groups_minus1	global.h	/^  int num_slice_groups_minus1;           \/\/!< "FmoNumSliceGroups" in encoder.cfg, same as FmoNumSliceGroups, which should be erased later$/;"	m	struct:__anon39
num_slice_groups_minus1	parsetcommon.h	/^  unsigned  num_slice_groups_minus1;                          \/\/ ue(v)$/;"	m	struct:__anon4
num_spare_pics	sei.h	/^  int num_spare_pics;$/;"	m	struct:__anon8
num_units_in_tick	parsetcommon.h	/^    unsigned  num_units_in_tick;                              \/\/ u(32)$/;"	m	struct:__anon3
number	global.h	/^  int number;                  \/\/!< current image number to be encoded$/;"	m	struct:__anon40
number_of_slices	context_ini.c	/^int                     number_of_slices;$/;"	v
nz_coeff	global.h	/^  int ***nz_coeff;             \/\/!< number of coefficients per block (CAVLC)$/;"	m	struct:__anon40
of_mode	global.h	/^  int of_mode;                  \/\/!< Specifies the mode of the output file$/;"	m	struct:__anon39
offset4x4_check	q_offsets.c	/^int offset4x4_check[6] = {0, 0, 0, 0, 0, 0};$/;"	v
offset8x8_check	q_offsets.c	/^int offset8x8_check[2] = {0, 0};$/;"	v
offset_for_non_ref_pic	global.h	/^           int offset_for_non_ref_pic;$/;"	m	struct:__anon40
offset_for_non_ref_pic	parsetcommon.h	/^    int     offset_for_non_ref_pic;                         \/\/ se(v)$/;"	m	struct:__anon5
offset_for_ref_frame	global.h	/^           int offset_for_ref_frame[1];  \/\/ MAX_LENGTH_POC_CYCLE in decoder$/;"	m	struct:__anon40
offset_for_ref_frame	parsetcommon.h	/^      int   offset_for_ref_frame[MAXnum_ref_frames_in_pic_order_cnt_cycle];   \/\/ se(v)$/;"	m	struct:__anon5
offset_for_top_to_bottom_field	global.h	/^           int offset_for_top_to_bottom_field;$/;"	m	struct:__anon40
offset_for_top_to_bottom_field	parsetcommon.h	/^    int     offset_for_top_to_bottom_field;                 \/\/ se(v)$/;"	m	struct:__anon5
old_layer	global.h	/^  int old_layer;         \/\/!< old layer number$/;"	m	struct:__anon40
one_contexts	global.h	/^  BiContextType  one_contexts [NUM_BLOCK_TYPES][NUM_ONE_CTX];$/;"	m	struct:__anon33
open	global.h	69;"	d
opix_c_x	global.h	/^  int opix_c_x;                 \/\/!< current original picture pixel chroma horizontal$/;"	m	struct:__anon40
opix_c_y	global.h	/^  int opix_c_y;                 \/\/!< current original picture pixel chroma vertical$/;"	m	struct:__anon40
opix_x	global.h	/^  int opix_x;                   \/\/!< current original picture pixel horizontal$/;"	m	struct:__anon40
opix_y	global.h	/^  int opix_y;                   \/\/!< current original picture pixel vertical$/;"	m	struct:__anon40
order_num	mbuffer.h	/^  int         order_num;$/;"	m	struct:storable_picture
out_buffer	output.c	/^FrameStore* out_buffer;$/;"	v
outfile	global.h	/^  char outfile[FILE_NAME_SIZE];            \/\/!< H.264 compressed output bitstream$/;"	m	struct:__anon39
output_one_frame_from_dpb	mbuffer.c	/^static void output_one_frame_from_dpb()$/;"	f	file:
overscan_appropriate_flag	parsetcommon.h	/^    Boolean      overscan_appropriate_flag;                      \/\/ u(1)$/;"	m	struct:__anon3
overscan_info_present_flag	parsetcommon.h	/^  Boolean      overscan_info_present_flag;                       \/\/ u(1)$/;"	m	struct:__anon3
p	rtp.h	/^  unsigned int p;          \/\/!< Padding bit, Padding MUST NOT be used$/;"	m	struct:__anon17
p_dec	global.h	/^int  p_dec;                      \/\/!< decoded image file handle$/;"	v
p_dec	lencod.c	/^int  p_dec;                      \/\/!< decoded image file handle$/;"	v
p_in	global.h	/^int  p_in;                       \/\/!< original YUV file handle$/;"	v
p_in	lencod.c	/^int  p_in;                       \/\/!< original YUV file handle$/;"	v
p_interval	global.h	/^  int p_interval;$/;"	m	struct:__anon40
p_log	global.h	/^FILE *p_log;                     \/\/!< SNR file$/;"	v
p_log	lencod.c	/^FILE *p_log;                     \/\/!< SNR file$/;"	v
p_stat	global.h	/^FILE *p_stat;                    \/\/!< status file for the last encoding session$/;"	v
p_stat	lencod.c	/^FILE *p_stat;                    \/\/!< status file for the last encoding session$/;"	v
p_trace	global.h	/^FILE *p_trace;                   \/\/!< Trace file$/;"	v
p_trace	lencod.c	/^FILE *p_trace;                   \/\/!< Trace file$/;"	v
packet	rtp.h	/^  byte *       packet;     \/\/!< complete packet including header and payload$/;"	m	struct:__anon17
packlen	rtp.h	/^  unsigned int packlen;    \/\/!< length of packet, typically paylen+12$/;"	m	struct:__anon17
pan_scan_rect_bottom_offset	sei.h	/^  int pan_scan_rect_bottom_offset;$/;"	m	struct:__anon13
pan_scan_rect_id	sei.h	/^  int pan_scan_rect_id; $/;"	m	struct:__anon13
pan_scan_rect_left_offset	sei.h	/^  int pan_scan_rect_left_offset;$/;"	m	struct:__anon13
pan_scan_rect_right_offset	sei.h	/^  int pan_scan_rect_right_offset;$/;"	m	struct:__anon13
pan_scan_rect_top_offset	sei.h	/^  int pan_scan_rect_top_offset;$/;"	m	struct:__anon13
panscanrect_information_struct	sei.h	/^} panscanrect_information_struct;$/;"	t	typeref:struct:__anon13
param_limits	configfile.h	/^  int param_limits; \/\/! 0: no limits, 1: both min and max, 2: only min (i.e. no negatives), 3: specialcase for QPs since min needs bitdepth_qp_scale$/;"	m	struct:__anon44
part8x8bwref	rdopt.c	/^short part8x8bwref[4];$/;"	v
part8x8fwref	rdopt.c	/^short part8x8fwref[4];$/;"	v
part8x8mode	rdopt.c	/^int      part8x8mode[4];$/;"	v
part8x8pdir	rdopt.c	/^short part8x8pdir[4];$/;"	v
partArr	global.h	/^  DataPartition       *partArr;     \/\/!< array of partitions$/;"	m	struct:__anon35
part_size	global.h	/^  int part_size[8][2];          \/\/!< array for different partition sizes$/;"	m	struct:__anon39
partition_mode	global.h	/^  int partition_mode;           \/\/!< Specifies the mode of data partitioning$/;"	m	struct:__anon39
paylen	rtp.h	/^  unsigned int paylen;     \/\/!< length of payload in bytes$/;"	m	struct:__anon17
payload	rtp.h	/^  byte *       payload;    \/\/!< the payload including payload headers$/;"	m	struct:__anon17
payloadSize	sei.h	/^  int payloadSize;$/;"	m	struct:__anon10
payloadSize	sei.h	/^  int payloadSize;$/;"	m	struct:__anon11
payloadSize	sei.h	/^  int payloadSize;$/;"	m	struct:__anon12
payloadSize	sei.h	/^  int payloadSize;$/;"	m	struct:__anon13
payloadSize	sei.h	/^  int payloadSize;$/;"	m	struct:__anon14
payloadSize	sei.h	/^  int payloadSize;$/;"	m	struct:__anon15
payloadSize	sei.h	/^  int payloadSize;$/;"	m	struct:__anon16
payloadSize	sei.h	/^  int payloadSize;$/;"	m	struct:__anon7
payloadSize	sei.h	/^  int payloadSize;$/;"	m	struct:__anon8
payloadSize	sei.h	/^  int payloadSize;$/;"	m	struct:__anon9
pel_t	global.h	93;"	d
pic_height_in_map_units_minus1	parsetcommon.h	/^  unsigned  pic_height_in_map_units_minus1;                   \/\/ ue(v)$/;"	m	struct:__anon5
pic_init_qp_minus26	parsetcommon.h	/^  int       pic_init_qp_minus26;                              \/\/ se(v)$/;"	m	struct:__anon4
pic_init_qs_minus26	parsetcommon.h	/^  int       pic_init_qs_minus26;                              \/\/ se(v)$/;"	m	struct:__anon4
pic_num	mbuffer.h	/^  int         pic_num;$/;"	m	struct:storable_picture
pic_order_cnt_lsb	global.h	/^  unsigned int pic_order_cnt_lsb;$/;"	m	struct:__anon40
pic_order_cnt_type	global.h	/^  int pic_order_cnt_type;   \/\/ POC200301$/;"	m	struct:__anon39
pic_order_cnt_type	global.h	/^  unsigned int pic_order_cnt_type;$/;"	m	struct:__anon40
pic_order_cnt_type	parsetcommon.h	/^  unsigned pic_order_cnt_type;$/;"	m	struct:__anon5
pic_order_present_flag	global.h	/^  unsigned int pic_order_present_flag; \/\/ ????????$/;"	m	struct:__anon40
pic_order_present_flag	parsetcommon.h	/^  Boolean      pic_order_present_flag;                           \/\/ u(1)$/;"	m	struct:__anon4
pic_parameter_set_id	parsetcommon.h	/^  unsigned  pic_parameter_set_id;                             \/\/ ue(v)$/;"	m	struct:__anon4
pic_parameter_set_rbsp_t	parsetcommon.h	/^} pic_parameter_set_rbsp_t;$/;"	t	typeref:struct:__anon4
pic_scaling_list_present_flag	parsetcommon.h	/^  int       pic_scaling_list_present_flag[8];                 \/\/ u(1)$/;"	m	struct:__anon4
pic_scaling_matrix_present_flag	parsetcommon.h	/^  Boolean   pic_scaling_matrix_present_flag;                  \/\/ u(1)$/;"	m	struct:__anon4
pic_size_in_map_units_minus1	parsetcommon.h	/^      unsigned  pic_size_in_map_units_minus1;	                \/\/ ue(v)$/;"	m	struct:__anon4
pic_unit_size_on_disk	global.h	/^  int pic_unit_size_on_disk;$/;"	m	struct:__anon40
pic_width_in_mbs_minus1	parsetcommon.h	/^  unsigned  pic_width_in_mbs_minus1;                          \/\/ ue(v)$/;"	m	struct:__anon5
picture_coding_decision	rdpicdecision.c	/^int picture_coding_decision (Picture *picture1, Picture *picture2, int qp)$/;"	f
picture_id	global.h	/^  int                 picture_id;$/;"	m	struct:__anon35
picture_structure_decision	image.c	/^static int picture_structure_decision (Picture *frame, Picture *top, Picture *bot)$/;"	f	file:
picture_type	global.h	/^  int                 picture_type; \/\/!< picture type$/;"	m	struct:__anon35
pix_c_x	global.h	/^  int pix_c_x;                 \/\/!< current pixel chroma horizontal$/;"	m	struct:__anon40
pix_c_y	global.h	/^  int pix_c_y;                 \/\/!< current pixel chroma vertical$/;"	m	struct:__anon40
pix_pos	global.h	/^typedef struct pix_pos$/;"	s
pix_x	global.h	/^  int pix_x;                   \/\/!< current pixel horizontal$/;"	m	struct:__anon40
pix_y	global.h	/^  int pix_y;                   \/\/!< current pixel vertical$/;"	m	struct:__anon40
pixel_map	global.h	/^byte **pixel_map;   \/\/!< Shows the latest reference frame that is reliable for each pixel$/;"	v
pixel_map	lencod.c	/^byte **pixel_map;   \/\/!< Shows the latest reference frame that is reliable for each pixel$/;"	v
pn	global.h	/^  int pn;                      \/\/!< picture number$/;"	m	struct:__anon40
poc	mbuffer.h	/^  int         poc;$/;"	m	struct:storable_picture
poc	mbuffer.h	/^  int       poc;$/;"	m	struct:frame_store
poc_based_ref_management	explicit_gop.c	/^void poc_based_ref_management(int current_pic_num)$/;"	f
poc_ref_pic_reorder	slice.c	/^void poc_ref_pic_reorder(StorablePicture **list, unsigned num_ref_idx_lX_active, int *remapping_of_pic_nums_idc, int *abs_diff_pic_num_minus1, int *long_term_pic_idx, int weighted_prediction, int list_no)$/;"	f
pos2ctx_last	cabac.c	/^static const int* pos2ctx_last    [] = {pos2ctx_last4x4, pos2ctx_last4x4, pos2ctx_last8x8, pos2ctx_last8x4,$/;"	v	file:
pos2ctx_last2x4c	cabac.c	/^static const int  pos2ctx_last2x4c[] = { 0,  0,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2}; \/\/ 15 CTX$/;"	v	file:
pos2ctx_last4x4	cabac.c	/^static const int  pos2ctx_last4x4 [] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15}; \/\/ 15 CTX$/;"	v	file:
pos2ctx_last4x4c	cabac.c	/^static const int  pos2ctx_last4x4c[] = { 0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2}; \/\/ 15 CTX$/;"	v	file:
pos2ctx_last8x4	cabac.c	/^static const int  pos2ctx_last8x4 [] = { 0,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,$/;"	v	file:
pos2ctx_last8x8	cabac.c	/^static const int  pos2ctx_last8x8 [] = { 0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,$/;"	v	file:
pos2ctx_map	cabac.c	/^static const int* pos2ctx_map    [] = {pos2ctx_map4x4, pos2ctx_map4x4, pos2ctx_map8x8, pos2ctx_map8x4,$/;"	v	file:
pos2ctx_map2x4c	cabac.c	/^static const int  pos2ctx_map2x4c[] = { 0,  0,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2}; \/\/ 15 CTX$/;"	v	file:
pos2ctx_map4x4	cabac.c	/^static const int  pos2ctx_map4x4 [] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 14}; \/\/ 15 CTX$/;"	v	file:
pos2ctx_map4x4c	cabac.c	/^static const int  pos2ctx_map4x4c[] = { 0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2}; \/\/ 15 CTX$/;"	v	file:
pos2ctx_map4x8i	cabac.c	/^static const int  pos2ctx_map4x8i[] = { 0,  1,  1,  1,  2,  3,  3,  4,  4,  4,  5,  6,  2,  7,  7,  8,$/;"	v	file:
pos2ctx_map8x4	cabac.c	/^static const int  pos2ctx_map8x4 [] = { 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11,  9,  8,  6,  7,  8,$/;"	v	file:
pos2ctx_map8x4i	cabac.c	/^static const int  pos2ctx_map8x4i[] = { 0,  1,  2,  3,  4,  5,  6,  3,  4,  5,  6,  3,  4,  7,  6,  8,$/;"	v	file:
pos2ctx_map8x8	cabac.c	/^static const int  pos2ctx_map8x8 [] = { 0,  1,  2,  3,  4,  5,  5,  4,  4,  3,  3,  4,  4,  4,  5,  5,$/;"	v	file:
pos2ctx_map8x8i	cabac.c	/^static const int  pos2ctx_map8x8i[] = { 0,  1,  1,  2,  2,  3,  3,  4,  5,  6,  7,  7,  7,  8,  4,  5,$/;"	v	file:
pos2ctx_map_int	cabac.c	/^static const int* pos2ctx_map_int[] = {pos2ctx_map4x4, pos2ctx_map4x4, pos2ctx_map8x8i,pos2ctx_map8x4i,$/;"	v	file:
pos_00	mv-search.c	/^static int  **pos_00;             \/\/!< position of (0,0) vector$/;"	v	file:
pos_x	global.h	/^  int pos_x;$/;"	m	struct:pix_pos
pos_y	global.h	/^  int pos_y;$/;"	m	struct:pix_pos
pre_frame_num	global.h	/^  int pre_frame_num;$/;"	m	struct:__anon40
pred	rdopt.c	/^static int pred[16][16];$/;"	v	file:
pred_MV_ref	fast_me.c	/^int pred_MV_time[2],pred_MV_ref[2],pred_MV_uplayer[2];\/\/pred motion vector by space or temporal correlation,Median is provided$/;"	v
pred_MV_ref	fast_me.h	/^int pred_MV_time[2],pred_MV_ref[2],pred_MV_uplayer[2];\/\/pred motion vector by space or temporal correlation,Median is provided$/;"	v
pred_MV_time	fast_me.c	/^int pred_MV_time[2],pred_MV_ref[2],pred_MV_uplayer[2];\/\/pred motion vector by space or temporal correlation,Median is provided$/;"	v
pred_MV_time	fast_me.h	/^int pred_MV_time[2],pred_MV_ref[2],pred_MV_uplayer[2];\/\/pred motion vector by space or temporal correlation,Median is provided$/;"	v
pred_MV_uplayer	fast_me.c	/^int pred_MV_time[2],pred_MV_ref[2],pred_MV_uplayer[2];\/\/pred motion vector by space or temporal correlation,Median is provided$/;"	v
pred_MV_uplayer	fast_me.h	/^int pred_MV_time[2],pred_MV_ref[2],pred_MV_uplayer[2];\/\/pred motion vector by space or temporal correlation,Median is provided$/;"	v
pred_SAD_ref	fast_me.c	/^int pred_SAD_space,pred_SAD_time,pred_SAD_ref,pred_SAD_uplayer;\/\/SAD prediction$/;"	v
pred_SAD_ref	fast_me.h	/^int pred_SAD_space,pred_SAD_time,pred_SAD_ref,pred_SAD_uplayer;\/\/SAD prediction$/;"	v
pred_SAD_space	fast_me.c	/^int pred_SAD_space,pred_SAD_time,pred_SAD_ref,pred_SAD_uplayer;\/\/SAD prediction$/;"	v
pred_SAD_space	fast_me.h	/^int pred_SAD_space,pred_SAD_time,pred_SAD_ref,pred_SAD_uplayer;\/\/SAD prediction$/;"	v
pred_SAD_time	fast_me.c	/^int pred_SAD_space,pred_SAD_time,pred_SAD_ref,pred_SAD_uplayer;\/\/SAD prediction$/;"	v
pred_SAD_time	fast_me.h	/^int pred_SAD_space,pred_SAD_time,pred_SAD_ref,pred_SAD_uplayer;\/\/SAD prediction$/;"	v
pred_SAD_uplayer	fast_me.c	/^int pred_SAD_space,pred_SAD_time,pred_SAD_ref,pred_SAD_uplayer;\/\/SAD prediction$/;"	v
pred_SAD_uplayer	fast_me.h	/^int pred_SAD_space,pred_SAD_time,pred_SAD_ref,pred_SAD_uplayer;\/\/SAD prediction$/;"	v
pred_mv	global.h	/^  short  ******pred_mv;        \/\/!< predicted motion vectors$/;"	m	struct:__anon42
pred_mv	global.h	/^  short****** pred_mv;                 \/\/!< motion vector predictors for all block types and all reference frames$/;"	m	struct:__anon40
pred_mv8x8	rdopt.c	/^short pred_mv8x8[2][2][4][4][2];$/;"	v
pred_weight_table	header.c	/^static int pred_weight_table()$/;"	f	file:
predict_error	global.h	/^  int                 predict_error;$/;"	m	struct:macroblock
predict_error	macroblock.c	/^int predict_error,dq;$/;"	v
predict_nnz	macroblock.c	/^int predict_nnz(int i,int j)$/;"	f
predict_nnz_chroma	macroblock.c	/^int predict_nnz_chroma(int i,int j)$/;"	f
predict_qp	global.h	/^  int                 predict_qp;$/;"	m	struct:macroblock
prev_cbp	global.h	/^  int                 prev_cbp;$/;"	m	struct:macroblock
prev_delta_qp	global.h	/^  int                 prev_delta_qp;$/;"	m	struct:macroblock
prev_delta_qp	global.h	/^  int    prev_delta_qp;$/;"	m	struct:__anon42
prev_qp	global.h	/^  int                 prev_qp;$/;"	m	struct:macroblock
prev_qp	global.h	/^  int    prev_qp;$/;"	m	struct:__anon42
probability	context_ini.c	/^double probability[128] =$/;"	v
proceed2nextMacroblock	macroblock.c	/^void proceed2nextMacroblock()$/;"	f
process_2nd_IGOP	lencod.c	/^void process_2nd_IGOP()$/;"	f
profile_idc	parsetcommon.h	/^  unsigned  profile_idc;                                      \/\/ u(8)$/;"	m	struct:__anon5
pstruct_next_P	global.h	/^  int pstruct_next_P;$/;"	m	struct:__anon40
pt	rtp.h	/^  unsigned int pt;         \/\/!< 7 bits, Payload Type, dynamically established$/;"	m	struct:__anon17
put_buffer_bot	image.c	/^static void put_buffer_bot()$/;"	f	file:
put_buffer_frame	image.c	/^static void put_buffer_frame()$/;"	f	file:
put_buffer_top	image.c	/^static void put_buffer_top()$/;"	f	file:
put_byte	biariencode.c	30;"	d	file:
put_one_bit	biariencode.c	39;"	d	file:
put_one_bit_plus_outstanding	biariencode.c	45;"	d	file:
pyramidPocDelta	global.h	/^  int pyramidPocDelta;  \/\/! Currently unused$/;"	m	struct:__anon43
pyramid_layer	global.h	/^  int pyramid_layer;    \/\/! Pyramid layer (used with GOP Pyramid option 2$/;"	m	struct:__anon43
qp	global.h	/^  int                 qp ;$/;"	m	struct:macroblock
qp	global.h	/^  int                 qp;$/;"	m	struct:__anon35
qp	global.h	/^  int    qp;$/;"	m	struct:__anon42
qp	global.h	/^  int qp;                      \/\/!< quant for the current frame$/;"	m	struct:__anon40
qp0	global.h	/^  int qp0;                      \/\/!< QP of first frame$/;"	m	struct:__anon39
qp02	global.h	/^  int qp02, qpBRS2Offset;$/;"	m	struct:__anon39
qp2start	global.h	/^  int qpN2, qpB2, qp2start;$/;"	m	struct:__anon39
qpB	global.h	/^  int qpB;                      \/\/!< QP for non-reference B slice coded pictures$/;"	m	struct:__anon39
qpB2	global.h	/^  int qpN2, qpB2, qp2start;$/;"	m	struct:__anon39
qpBRS2Offset	global.h	/^  int qp02, qpBRS2Offset;$/;"	m	struct:__anon39
qpBRSOffset	global.h	/^  int qpBRSOffset;                     \/\/!< QP for reference B slice coded pictures$/;"	m	struct:__anon39
qpN	global.h	/^  int qpN;                      \/\/!< QP of remaining frames$/;"	m	struct:__anon39
qpN2	global.h	/^  int qpN2, qpB2, qp2start;$/;"	m	struct:__anon39
qpsp	global.h	/^  int                 qpsp ;$/;"	m	struct:macroblock
qpsp	global.h	/^  int qpsp;                     \/\/!< SP Picture QP for prediction error$/;"	m	struct:__anon39
qpsp	global.h	/^  int qpsp;                    \/\/!< quant for the prediction frame of SP-frame$/;"	m	struct:__anon40
qpsp_pred	global.h	/^  int qpsp_pred;                \/\/!< SP Picture QP for predicted block$/;"	m	struct:__anon39
quad	global.h	/^  int *quad;               \/\/!< Array containing square values,used for snr computation  *\/                                         \/* Values are limited to 5000 for pixel differences over 70 (sqr(5000)).$/;"	m	struct:__anon40
quant0	global.h	/^  int   quant0;                 \/\/!< quant for the first frame$/;"	m	struct:__anon41
quant1	global.h	/^  int   quant1;                 \/\/!< average quant for the remaining frames$/;"	m	struct:__anon41
quant_coef	block.c	/^const int quant_coef[6][4][4] = {$/;"	v
quant_coef	fast_me.c	/^static const int quant_coef[6][4][4] = {$/;"	v	file:
quant_coef8	transform8x8.c	/^const int quant_coef8[6][8][8] = $/;"	v
rLPS_table_64x4	biariencode.h	/^const byte rLPS_table_64x4[64][4]=$/;"	v
randomaccess_information_struct	sei.h	/^} randomaccess_information_struct;$/;"	t	typeref:struct:__anon16
rc_alloc	ratectl.c	/^void rc_alloc()$/;"	f
rc_free	ratectl.c	/^void rc_free()$/;"	f
rc_init_GOP	ratectl.c	/^void rc_init_GOP(int np, int nb)$/;"	f
rc_init_pict	ratectl.c	/^void rc_init_pict(int fieldpic,int topfield,int targetcomputation)$/;"	f
rc_init_seq	ratectl.c	/^void rc_init_seq()$/;"	f
rc_update_pict	ratectl.c	/^void rc_update_pict(int nbits)$/;"	f
rc_update_pict_frame	ratectl.c	/^void rc_update_pict_frame(int nbits)$/;"	f
rdPictureCoding	image.c	/^static void rdPictureCoding()$/;"	f	file:
rd_pass	global.h	/^  unsigned int rd_pass;$/;"	m	struct:__anon40
rd_pic_decision	rdpicdecision.c	/^int rd_pic_decision(double snrY_version1, double snrY_version2, int bits_version1, int bits_version2, double lambda_picture)$/;"	f
rddata_bot_field_mb	global.h	/^RD_DATA rddata_top_field_mb, rddata_bot_field_mb; \/\/!< For MB level field\/frame coding tools$/;"	v
rddata_bot_field_mb	lencod.c	/^RD_DATA rddata_top_field_mb, rddata_bot_field_mb; \/\/!< For MB level field\/frame coding tools$/;"	v
rddata_bot_frame_mb	global.h	/^RD_DATA rddata_top_frame_mb, rddata_bot_frame_mb; \/\/!< For MB level field\/frame coding tools$/;"	v
rddata_bot_frame_mb	lencod.c	/^RD_DATA rddata_top_frame_mb, rddata_bot_frame_mb; \/\/!< For MB level field\/frame coding tools$/;"	v
rddata_top_field_mb	global.h	/^RD_DATA rddata_top_field_mb, rddata_bot_field_mb; \/\/!< For MB level field\/frame coding tools$/;"	v
rddata_top_field_mb	lencod.c	/^RD_DATA rddata_top_field_mb, rddata_bot_field_mb; \/\/!< For MB level field\/frame coding tools$/;"	v
rddata_top_frame_mb	global.h	/^RD_DATA rddata_top_frame_mb, rddata_bot_frame_mb; \/\/!< For MB level field\/frame coding tools$/;"	v
rddata_top_frame_mb	lencod.c	/^RD_DATA rddata_top_frame_mb, rddata_bot_frame_mb; \/\/!< For MB level field\/frame coding tools$/;"	v
rdopt	global.h	/^  int rdopt;$/;"	m	struct:__anon39
rdopt	global.h	/^RD_DATA *rdopt; $/;"	v
rdopt	lencod.c	/^RD_DATA *rdopt;$/;"	v
read	global.h	71;"	d
rec_mbU	global.h	/^  int    rec_mbU[16][16], rec_mbV[16][16]; $/;"	m	struct:__anon42
rec_mbU	rdopt.c	/^imgpel   rec_mbY[16][16], rec_mbU[16][16], rec_mbV[16][16], rec_mbY8x8[16][16];    \/\/ reconstruction values$/;"	v
rec_mbV	global.h	/^  int    rec_mbU[16][16], rec_mbV[16][16]; $/;"	m	struct:__anon42
rec_mbV	rdopt.c	/^imgpel   rec_mbY[16][16], rec_mbU[16][16], rec_mbV[16][16], rec_mbY8x8[16][16];    \/\/ reconstruction values$/;"	v
rec_mbY	global.h	/^  int    rec_mbY[16][16];       \/\/ hold the Y component of reconstructed MB$/;"	m	struct:__anon42
rec_mbY	rdopt.c	/^imgpel   rec_mbY[16][16], rec_mbU[16][16], rec_mbV[16][16], rec_mbY8x8[16][16];    \/\/ reconstruction values$/;"	v
rec_mbY8x8	rdopt.c	/^imgpel   rec_mbY[16][16], rec_mbU[16][16], rec_mbV[16][16], rec_mbY8x8[16][16];    \/\/ reconstruction values$/;"	v
rec_mbY_8x8ts	rdopt.c	/^imgpel   rec_mbY_8x8ts[16][16];$/;"	v
rec_resB	global.h	/^int rec_resR[16][16], rec_resG[16][16], rec_resB[16][16];$/;"	v
rec_resB	lencod.c	/^int rec_resR[16][16], rec_resG[16][16], rec_resB[16][16];$/;"	v
rec_resG	global.h	/^int rec_resR[16][16], rec_resG[16][16], rec_resB[16][16];$/;"	v
rec_resG	lencod.c	/^int rec_resR[16][16], rec_resG[16][16], rec_resB[16][16];$/;"	v
rec_resG_8x8	rdopt.c	/^int   rec_resG_8x8[16][16], resTrans_R_8x8[16][16], resTrans_B_8x8[16][16];$/;"	v
rec_resG_8x8ts	rdopt.c	/^int   rec_resG_8x8ts[16][16], resTrans_R_8x8ts[16][16], resTrans_B_8x8ts[16][16];$/;"	v
rec_resR	global.h	/^int rec_resR[16][16], rec_resG[16][16], rec_resB[16][16];$/;"	v
rec_resR	lencod.c	/^int rec_resR[16][16], rec_resG[16][16], rec_resB[16][16];$/;"	v
recovery_point_flag	sei.h	/^  unsigned char recovery_point_flag;$/;"	m	struct:__anon16
redundant_pic_cnt	global.h	/^  int redundant_pic_cnt; \/\/ JVT-D101$/;"	m	struct:__anon40
redundant_pic_cnt_present_flag	parsetcommon.h	/^  Boolean   redundant_pic_cnt_present_flag;                   \/\/ u(1)$/;"	m	struct:__anon4
redundant_slice_flag	global.h	/^  int redundant_slice_flag; \/\/! whether redundant slices exist,  JVT-D101$/;"	m	struct:__anon39
ref8x8	rdopt.c	/^short ref8x8[2][4][4];                \/\/[LIST][block_x][block_y]$/;"	v
ref_frames_in_buffer	mbuffer.h	/^  unsigned      ref_frames_in_buffer;$/;"	m	struct:decoded_picture_buffer
ref_id	mbuffer.h	/^  int64 ***   ref_id;    \/\/!< reference picture identifier [list][subblock_x][subblock_y]$/;"	m	struct:storable_picture
ref_idx	mbuffer.h	/^  short ***   ref_idx;       \/\/!< reference picture   [list][subblock_x][subblock_y]$/;"	m	struct:colocated_params
ref_idx	mbuffer.h	/^  short ***   ref_idx;       \/\/!< reference picture   [list][subblock_x][subblock_y]$/;"	m	struct:storable_picture
ref_no_contexts	global.h	/^  BiContextType ref_no_contexts  [2][NUM_REF_NO_CTX];$/;"	m	struct:__anon32
ref_pic_id	mbuffer.h	/^  int64 ***   ref_pic_id;    \/\/!< reference picture identifier [list][subblock_x][subblock_y]$/;"	m	struct:colocated_params
ref_pic_id	mbuffer.h	/^  int64 ***   ref_pic_id;    \/\/!< reference picture identifier [list][subblock_x][subblock_y]$/;"	m	struct:storable_picture
ref_pic_list_reordering	header.c	/^static int ref_pic_list_reordering()$/;"	f	file:
ref_pic_list_reordering_flag_l0	global.h	/^  int                 ref_pic_list_reordering_flag_l0;$/;"	m	struct:__anon35
ref_pic_list_reordering_flag_l1	global.h	/^  int                 ref_pic_list_reordering_flag_l1;$/;"	m	struct:__anon35
ref_pic_num	mbuffer.h	/^  int64       ref_pic_num[6][MAX_LIST_SIZE];  $/;"	m	struct:colocated_params
ref_pic_num	mbuffer.h	/^  int64       ref_pic_num[6][MAX_LIST_SIZE];$/;"	m	struct:storable_picture
ref_subseq_id	sei.h	/^  int ref_subseq_id[MAX_DEPENDENT_SUBSEQ];$/;"	m	struct:__anon11
ref_subseq_layer_num	sei.h	/^  int ref_subseq_layer_num[MAX_DEPENDENT_SUBSEQ];$/;"	m	struct:__anon11
refar	global.h	/^  short  refar[2][4][4];       \/\/!< reference frame array [list][x][y]$/;"	m	struct:__anon42
refbits	mv-search.c	/^int*    refbits;$/;"	v
reference_idc	global.h	/^  int reference_idc;    \/\/! Is reference?$/;"	m	struct:__anon43
refresh_map	global.h	/^byte **refresh_map; \/\/!< Stores the new values for pixel_map  $/;"	v
refresh_map	lencod.c	/^byte **refresh_map; \/\/!< Stores the new values for pixel_map  $/;"	v
remapping_of_pic_nums_idc_l0	global.h	/^  int                 *remapping_of_pic_nums_idc_l0;$/;"	m	struct:__anon35
remapping_of_pic_nums_idc_l1	global.h	/^  int                 *remapping_of_pic_nums_idc_l1;$/;"	m	struct:__anon35
remove_frame_from_dpb	mbuffer.c	/^static void remove_frame_from_dpb(int pos)$/;"	f	file:
remove_unused_frame_from_dpb	mbuffer.c	/^static int remove_unused_frame_from_dpb()$/;"	f	file:
reorder_long_term	mbuffer.c	/^static void reorder_long_term(StorablePicture **RefPicListX, int num_ref_idx_lX_active_minus1, int LongTermPicNum, int *refIdxLX)$/;"	f	file:
reorder_ref_pic_list	mbuffer.c	/^void reorder_ref_pic_list(StorablePicture **list, int *list_size, int num_ref_idx_lX_active_minus1, int *remapping_of_pic_nums_idc, int *abs_diff_pic_num_minus1, int *long_term_pic_idx)$/;"	f
reorder_short_term	mbuffer.c	/^static void reorder_short_term(StorablePicture **RefPicListX, int num_ref_idx_lX_active_minus1, int picNumLX, int *refIdxLX)$/;"	f	file:
replace_top_pic_with_frame	mbuffer.c	/^void replace_top_pic_with_frame(StorablePicture* p)$/;"	f
report	lencod.c	/^void report()$/;"	f
report_frame_statistic	lencod.c	/^void report_frame_statistic()$/;"	f
report_stats_on_error	lencod.c	/^void report_stats_on_error()$/;"	f
resTrans_B	global.h	/^int resTrans_R[16][16], resTrans_G[16][16], resTrans_B[16][16];$/;"	v
resTrans_B	lencod.c	/^int resTrans_R[16][16], resTrans_G[16][16], resTrans_B[16][16];$/;"	v
resTrans_B_8x8	rdopt.c	/^int   rec_resG_8x8[16][16], resTrans_R_8x8[16][16], resTrans_B_8x8[16][16];$/;"	v
resTrans_B_8x8ts	rdopt.c	/^int   rec_resG_8x8ts[16][16], resTrans_R_8x8ts[16][16], resTrans_B_8x8ts[16][16];$/;"	v
resTrans_G	global.h	/^int resTrans_R[16][16], resTrans_G[16][16], resTrans_B[16][16];$/;"	v
resTrans_G	lencod.c	/^int resTrans_R[16][16], resTrans_G[16][16], resTrans_B[16][16];$/;"	v
resTrans_R	global.h	/^int resTrans_R[16][16], resTrans_G[16][16], resTrans_B[16][16];$/;"	v
resTrans_R	lencod.c	/^int resTrans_R[16][16], resTrans_G[16][16], resTrans_B[16][16];$/;"	v
resTrans_R_8x8	rdopt.c	/^int   rec_resG_8x8[16][16], resTrans_R_8x8[16][16], resTrans_B_8x8[16][16];$/;"	v
resTrans_R_8x8ts	rdopt.c	/^int   rec_resG_8x8ts[16][16], resTrans_R_8x8ts[16][16], resTrans_B_8x8ts[16][16];$/;"	v
resY	global.h	/^  int  **resY;               \/\/!< Residue of Luminance$/;"	m	struct:__anon37
reset_coding_state	rdopt_coding_state.c	/^reset_coding_state (CSptr cs)$/;"	f
reset_coding_state_cs_cm	rdopt.c	/^void reset_coding_state_cs_cm()$/;"	f
residue_transform_flag	global.h	/^  int residue_transform_flag;$/;"	m	struct:__anon39
residue_transform_flag	global.h	/^  int residue_transform_flag;$/;"	m	struct:__anon40
rgb_input_flag	global.h	/^  int rgb_input_flag;$/;"	m	struct:__anon39
rmpni_buffer	global.h	/^  RMPNIbuffer_t        *rmpni_buffer; \/\/!< stores the slice temporary buffer remapping commands$/;"	m	struct:__anon35
rpc_bits_to_go	global.h	/^int rpc_bits_to_go;$/;"	v
rpc_bits_to_go	lencod.c	/^int rpc_bits_to_go;$/;"	v
rpc_bytes_to_go	global.h	/^int rpc_bytes_to_go;$/;"	v
rpc_bytes_to_go	lencod.c	/^int rpc_bytes_to_go;$/;"	v
run_length_minus1	global.h	/^  int *run_length_minus1;                \/\/!< run_length_minus1 is for slice group type being 0$/;"	m	struct:__anon39
run_length_minus1	parsetcommon.h	/^      unsigned  run_length_minus1[MAXnum_slice_groups_minus1]; \/\/ ue(v)$/;"	m	struct:__anon4
sar_height	parsetcommon.h	/^      unsigned  sar_height;                                   \/\/ u(16)$/;"	m	struct:__anon3
sar_width	parsetcommon.h	/^      unsigned  sar_width;                                    \/\/ u(16)$/;"	m	struct:__anon3
scene_id	sei.h	/^  int scene_id;$/;"	m	struct:__anon12
scene_information_struct	sei.h	/^} scene_information_struct;$/;"	t	typeref:struct:__anon12
scene_transition_type	sei.h	/^  int scene_transition_type;$/;"	m	struct:__anon12
se_linfo	vlc.c	/^void se_linfo(int se, int dummy, int *len,int *info)$/;"	f
se_v	vlc.c	/^int se_v (char *tracestring, int value, DataPartition *part)$/;"	f
search_center_x	mv-search.c	/^static int  **search_center_x;    \/\/!< absolute search center for fast full motion search$/;"	v	file:
search_center_y	mv-search.c	/^static int  **search_center_y;    \/\/!< absolute search center for fast full motion search$/;"	v	file:
search_range	global.h	/^  int search_range;             \/*!< search range - integer pel search and 16x16 blocks.  The search window is$/;"	m	struct:__anon39
search_setup_done	mv-search.c	/^static int  **search_setup_done;  \/\/!< flag if all block SAD's have been calculated yet$/;"	v	file:
second_scene_id	sei.h	/^  int second_scene_id;$/;"	m	struct:__anon12
seedi	specrand.c	/^static int seedi;$/;"	v	file:
seiHasBuffering_period	sei.c	/^Boolean seiHasBuffering_period=FALSE;$/;"	v
seiHasClock_timestamp	sei.c	/^Boolean seiHasClock_timestamp=FALSE;$/;"	v
seiHasFiller_payload	sei.c	/^Boolean seiHasFiller_payload=FALSE;$/;"	v
seiHasHrd_picture	sei.c	/^Boolean seiHasHrd_picture=FALSE;$/;"	v
seiHasPanScanRectInfo	sei.c	/^Boolean seiHasPanScanRectInfo = FALSE;$/;"	v
seiHasPanscan_rect	sei.c	/^Boolean seiHasPanscan_rect=FALSE;$/;"	v
seiHasRandomAccess_info	sei.c	/^Boolean seiHasRandomAccess_info;$/;"	v
seiHasRandomAccess_info	sei.h	/^Boolean seiHasRandomAccess_info;$/;"	v
seiHasRandom_access_point	sei.c	/^Boolean seiHasRandom_access_point=FALSE;$/;"	v
seiHasRef_pic_buffer_management_repetition	sei.c	/^Boolean seiHasRef_pic_buffer_management_repetition=FALSE;$/;"	v
seiHasSceneInformation	sei.c	/^Boolean seiHasSceneInformation=FALSE; \/\/ JVT-D099$/;"	v
seiHasSparePicture	sei.c	/^Boolean seiHasSparePicture = FALSE;$/;"	v
seiHasSpare_picture	sei.c	/^Boolean seiHasSpare_picture=FALSE;$/;"	v
seiHasSubseqChar	sei.c	/^Boolean seiHasSubseqChar = FALSE;$/;"	v
seiHasSubseqInfo	sei.c	/^Boolean seiHasSubseqInfo = FALSE;$/;"	v
seiHasSubseqLayerInfo	sei.c	/^Boolean seiHasSubseqLayerInfo = FALSE;$/;"	v
seiHasSubseq_characteristics	sei.c	/^Boolean seiHasSubseq_characteristics=FALSE;$/;"	v
seiHasSubseq_information	sei.c	/^Boolean seiHasSubseq_information=FALSE;$/;"	v
seiHasSubseq_layer_characteristics	sei.c	/^Boolean seiHasSubseq_layer_characteristics=FALSE;$/;"	v
seiHasTemporal_reference	sei.c	/^Boolean seiHasTemporal_reference=FALSE;$/;"	v
seiHasUser_data_registered_itu_t_t35	sei.c	/^Boolean seiHasUser_data_registered_itu_t_t35=FALSE;$/;"	v
seiHasUser_data_registered_itu_t_t35_info	sei.c	/^Boolean seiHasUser_data_registered_itu_t_t35_info;$/;"	v
seiHasUser_data_registered_itu_t_t35_info	sei.h	/^Boolean seiHasUser_data_registered_itu_t_t35_info;$/;"	v
seiHasUser_data_unregistered	sei.c	/^Boolean seiHasUser_data_unregistered=FALSE;$/;"	v
seiHasUser_data_unregistered_info	sei.c	/^Boolean seiHasUser_data_unregistered_info;$/;"	v
seiHasUser_data_unregistered_info	sei.h	/^Boolean seiHasUser_data_unregistered_info;$/;"	v
seiPanScanRectInfo	sei.c	/^panscanrect_information_struct seiPanScanRectInfo;$/;"	v
seiRandomAccess	sei.c	/^randomaccess_information_struct seiRandomAccess;$/;"	v
seiRandomAccess	sei.h	/^randomaccess_information_struct seiRandomAccess;$/;"	v
seiSceneInformation	sei.c	/^scene_information_struct seiSceneInformation;$/;"	v
seiSparePicturePayload	sei.c	/^spare_picture_struct seiSparePicturePayload;$/;"	v
seiSubseqChar	sei.c	/^subseq_char_information_struct seiSubseqChar;$/;"	v
seiSubseqInfo	sei.c	/^subseq_information_struct seiSubseqInfo[MAX_LAYER_NUMBER];$/;"	v
seiSubseqLayerInfo	sei.c	/^subseq_layer_information_struct seiSubseqLayerInfo;$/;"	v
seiUser_data_registered_itu_t_t35	sei.c	/^user_data_registered_itu_t_t35_information_struct seiUser_data_registered_itu_t_t35;$/;"	v
seiUser_data_registered_itu_t_t35	sei.h	/^user_data_registered_itu_t_t35_information_struct seiUser_data_registered_itu_t_t35;$/;"	v
seiUser_data_unregistered	sei.c	/^user_data_unregistered_information_struct seiUser_data_unregistered;$/;"	v
seiUser_data_unregistered	sei.h	/^user_data_unregistered_information_struct seiUser_data_unregistered;$/;"	v
sei_message	sei.c	/^sei_struct sei_message[2];$/;"	v
sei_struct	sei.h	/^} sei_struct;$/;"	t	typeref:struct:__anon7
seq	rtp.h	/^  unsigned int seq;        \/*!< RTP sequence number, incremented by one for $/;"	m	struct:__anon17
seq_parameter_set_id	parsetcommon.h	/^  unsigned  seq_parameter_set_id;                             \/\/ ue(v)$/;"	m	struct:__anon4
seq_parameter_set_id	parsetcommon.h	/^  unsigned  seq_parameter_set_id;                             \/\/ ue(v)$/;"	m	struct:__anon5
seq_parameter_set_rbsp_t	parsetcommon.h	/^} seq_parameter_set_rbsp_t;$/;"	t	typeref:struct:__anon5
seq_scaling_list_present_flag	parsetcommon.h	/^  int       seq_scaling_list_present_flag[8];                 \/\/ u(1)$/;"	m	struct:__anon5
seq_scaling_matrix_present_flag	parsetcommon.h	/^  Boolean   seq_scaling_matrix_present_flag;                  \/\/ u(1)$/;"	m	struct:__anon5
set_MB_parameters	macroblock.c	/^void set_MB_parameters (int mb_addr)$/;"	f
set_last_dquant	macroblock.c	/^void set_last_dquant()$/;"	f
set_mbaff_parameters	rdopt.c	/^void set_mbaff_parameters()$/;"	f
set_ref_pic_num	slice.c	/^void set_ref_pic_num()$/;"	f
set_stored_macroblock_parameters	rdopt.c	/^void set_stored_macroblock_parameters ()$/;"	f
setbitscount	ratectl.c	/^void setbitscount(int nbits)$/;"	f
sign	mv-search.c	/^int sign(int a,int b)$/;"	f
size	mbuffer.h	/^  unsigned      size;$/;"	m	struct:decoded_picture_buffer
size_x	mbuffer.h	/^  int         size_x, size_y, size_x_cr, size_y_cr;$/;"	m	struct:storable_picture
size_x	mbuffer.h	/^  int         size_x, size_y;$/;"	m	struct:colocated_params
size_x_cr	mbuffer.h	/^  int         size_x, size_y, size_x_cr, size_y_cr;$/;"	m	struct:storable_picture
size_y	mbuffer.h	/^  int         size_x, size_y, size_x_cr, size_y_cr;$/;"	m	struct:storable_picture
size_y	mbuffer.h	/^  int         size_x, size_y;$/;"	m	struct:colocated_params
size_y_cr	mbuffer.h	/^  int         size_x, size_y, size_x_cr, size_y_cr;$/;"	m	struct:storable_picture
skip_flag	global.h	/^  int                 skip_flag;$/;"	m	struct:macroblock
skip_intrabk_SAD	fast_me.c	/^void skip_intrabk_SAD(int best_mode, int ref_max)$/;"	f
slice_argument	global.h	/^  int slice_argument;           \/\/!< Argument to the specified slice algorithm$/;"	m	struct:__anon39
slice_group_change_cycle	global.h	/^  int slice_group_change_cycle;$/;"	m	struct:__anon39
slice_group_change_cycle	global.h	/^  int slice_group_change_cycle;$/;"	m	struct:__anon40
slice_group_change_direction_flag	global.h	/^  int slice_group_change_direction_flag;$/;"	m	struct:__anon39
slice_group_change_direction_flag	parsetcommon.h	/^      Boolean   slice_group_change_direction_flag;            \/\/ u(1)$/;"	m	struct:__anon4
slice_group_change_rate_minus1	global.h	/^  int slice_group_change_rate_minus1;$/;"	m	struct:__anon39
slice_group_change_rate_minus1	parsetcommon.h	/^      unsigned  slice_group_change_rate_minus1;               \/\/ ue(v)$/;"	m	struct:__anon4
slice_group_id	global.h	/^  byte *slice_group_id;                   \/\/!< slice_group_id is for slice group type being 6  $/;"	m	struct:__anon39
slice_group_id	parsetcommon.h	/^      byte      *slice_group_id;                              \/\/ complete MBAmap u(v)$/;"	m	struct:__anon4
slice_group_map_type	global.h	/^  int slice_group_map_type; $/;"	m	struct:__anon39
slice_group_map_type	parsetcommon.h	/^    unsigned  slice_group_map_type;                        \/\/ ue(v)$/;"	m	struct:__anon4
slice_mode	global.h	/^  int slice_mode;               \/\/!< Indicate what algorithm to use for setting slices$/;"	m	struct:__anon39
slice_nr	global.h	/^  int                 slice_nr;$/;"	m	struct:macroblock
slice_qp	global.h	/^  int slice_qp;         \/\/! Assigned QP$/;"	m	struct:__anon43
slice_too_big	global.h	/^  Boolean             (*slice_too_big)(int bits_slice); \/\/!< for use of callback functions$/;"	m	struct:__anon35
slice_too_big	macroblock.c	/^ int slice_too_big(int rlc_bits)$/;"	f
slice_type	global.h	/^  int slice_type;       \/\/! Slice type$/;"	m	struct:__anon43
slices	global.h	/^  Slice *slices[MAXSLICEPERPICTURE];$/;"	m	struct:__anon36
sliding_window_memory_management	mbuffer.c	/^static void sliding_window_memory_management(StorablePicture* p)$/;"	f	file:
snprintf	global.h	44;"	d
snprintf	global.h	68;"	d
snr	lencod.c	/^SNRParameters   snrs,        *snr   = &snrs;$/;"	v
snr_u	global.h	/^  float snr_u;               \/\/!< current U SNR$/;"	m	struct:__anon38
snr_u1	global.h	/^  float snr_u1;              \/\/!< SNR U(dB) first frame$/;"	m	struct:__anon38
snr_ua	global.h	/^  float snr_ua;              \/\/!< Average SNR U(dB) remaining frames$/;"	m	struct:__anon38
snr_ut	global.h	/^  float snr_ut[3];             \/\/!< SNR U(dB) based on frame type$/;"	m	struct:__anon38
snr_v	global.h	/^  float snr_v;               \/\/!< current V SNR$/;"	m	struct:__anon38
snr_v1	global.h	/^  float snr_v1;              \/\/!< SNR V(dB) first frame$/;"	m	struct:__anon38
snr_va	global.h	/^  float snr_va;              \/\/!< Average SNR V(dB) remaining frames$/;"	m	struct:__anon38
snr_vt	global.h	/^  float snr_vt[3];             \/\/!< SNR V(dB) based on frame type$/;"	m	struct:__anon38
snr_y	global.h	/^  float snr_y;               \/\/!< current Y SNR$/;"	m	struct:__anon38
snr_y1	global.h	/^  float snr_y1;              \/\/!< SNR Y(dB) first frame$/;"	m	struct:__anon38
snr_ya	global.h	/^  float snr_ya;               \/\/!< Average SNR Y(dB) remaining frames$/;"	m	struct:__anon38
snr_yt	global.h	/^  float snr_yt[3];             \/\/!< SNR Y(dB) based on frame type$/;"	m	struct:__anon38
snrs	lencod.c	/^SNRParameters   snrs,        *snr   = &snrs;$/;"	v
sp_periodicity	global.h	/^  int sp_periodicity;           \/\/!< The periodicity of SP-pictures$/;"	m	struct:__anon39
spare_picture_struct	sei.h	/^} spare_picture_struct;$/;"	t	typeref:struct:__anon8
spec_rand	specrand.c	/^double spec_rand(void)$/;"	f
spec_srand	specrand.c	/^void spec_srand(int seed) {$/;"	f
spiral_search_x	mv-search.c	/^int*    spiral_search_x;$/;"	v
spiral_search_y	mv-search.c	/^int*    spiral_search_y;$/;"	v
ssrc	rtp.h	/^  unsigned int ssrc;       \/\/!< Synchronization Source, chosen randomly$/;"	m	struct:__anon17
start_frame	global.h	/^  int start_frame;				\/\/!< Encode sequence starting from Frame start_frame$/;"	m	struct:__anon39
start_frame_no_in_this_IGOP	lencod.c	/^int    start_frame_no_in_this_IGOP = 0;$/;"	v
start_macroblock	macroblock.c	/^void start_macroblock(int mb_addr, int mb_field)$/;"	f
start_mb_nr	global.h	/^  int                 start_mb_nr;$/;"	m	struct:__anon35
start_sequence	filehandle.c	/^int start_sequence()$/;"	f
start_slice	slice.c	/^int start_slice()$/;"	f
start_tr_in_this_IGOP	lencod.c	/^int    start_tr_in_this_IGOP = 0;$/;"	v
startcodeprefix_len	nalucommon.h	/^  int startcodeprefix_len;      \/\/! 4 for parameter sets and first slice in picture, 3 for everything else (suggested)$/;"	m	struct:__anon18
state	global.h	/^  unsigned short state;         \/\/ index into state-table CP  $/;"	m	struct:__anon31
statistics	lencod.c	/^StatParameters  statistics,  *stats = &statistics;$/;"	v
stats	lencod.c	/^StatParameters  statistics,  *stats = &statistics;$/;"	v
status_map	global.h	/^  byte **status_map;$/;"	m	struct:__anon37
storable_picture	mbuffer.h	/^typedef struct storable_picture$/;"	s
store_coding_state	rdopt_coding_state.c	/^store_coding_state (CSptr cs)$/;"	f
store_coding_state_cs_cm	rdopt.c	/^void store_coding_state_cs_cm()$/;"	f
store_contexts	context_ini.c	/^void store_contexts ()$/;"	f
store_macroblock_parameters	rdopt.c	/^void store_macroblock_parameters (int mode)$/;"	f
store_picture_in_dpb	mbuffer.c	/^void store_picture_in_dpb(StorablePicture* p)$/;"	f
stored_bits_to_go	global.h	/^  int             stored_bits_to_go;  \/\/!< storage for bitcounter$/;"	m	struct:__anon34
stored_byte_buf	global.h	/^  byte            stored_byte_buf;    \/\/!< storage for buffer of last written byte$/;"	m	struct:__anon34
stored_byte_pos	global.h	/^  int             stored_byte_pos;    \/\/!< storage for position in bitstream;$/;"	m	struct:__anon34
stored_frame_cnt	sei.h	/^  unsigned int stored_frame_cnt;$/;"	m	struct:__anon9
streamBuffer	global.h	/^  byte            *streamBuffer;      \/\/!< actual buffer for written bytes$/;"	m	struct:__anon34
structure	global.h	/^  int structure;               \/\/!< picture structure$/;"	m	struct:__anon40
structure	mbuffer.h	/^  PictureStructure structure;$/;"	m	struct:storable_picture
subPacketType	sei.h	/^  unsigned char subPacketType;$/;"	m	struct:__anon7
subblk_offset_x	macroblock.h	/^const unsigned char subblk_offset_x[3][8][4] =$/;"	v
subblk_offset_y	macroblock.h	/^const unsigned char subblk_offset_y[3][8][4] =$/;"	v
subblock_x	global.h	/^  int subblock_x;              \/\/!< current subblock horizontal$/;"	m	struct:__anon40
subblock_y	global.h	/^  int subblock_y;              \/\/!< current subblock vertical$/;"	m	struct:__anon40
subseq_char_information_struct	sei.h	/^} subseq_char_information_struct;$/;"	t	typeref:struct:__anon11
subseq_duration	sei.h	/^  unsigned int subseq_duration;$/;"	m	struct:__anon11
subseq_id	sei.h	/^  int subseq_id;$/;"	m	struct:__anon11
subseq_id	sei.h	/^  int subseq_id;$/;"	m	struct:__anon9
subseq_information_struct	sei.h	/^} subseq_information_struct;$/;"	t	typeref:struct:__anon9
subseq_layer_information_struct	sei.h	/^} subseq_layer_information_struct;$/;"	t	typeref:struct:__anon10
subseq_layer_num	sei.h	/^  int subseq_layer_num;$/;"	m	struct:__anon11
subseq_layer_num	sei.h	/^  int subseq_layer_num;$/;"	m	struct:__anon9
successive_Bframe	global.h	/^  int successive_Bframe;        \/\/!< number of B frames that will be used$/;"	m	struct:__anon39
symbol2uvlc	vlc.c	/^int symbol2uvlc(SyntaxElement *sym)$/;"	f
symbol2vlc	vlc.c	/^int symbol2vlc(SyntaxElement *sym)$/;"	f
symbol_mode	global.h	/^  int symbol_mode;              \/\/!< Specifies the mode the symbols are mapped on bits$/;"	m	struct:__anon39
symbol_mode	rdopt_coding_state.h	/^  int                   symbol_mode;$/;"	m	struct:__anon19
syntaxelement	global.h	/^typedef struct syntaxelement$/;"	s
target_frame_num	sei.h	/^  int target_frame_num;$/;"	m	struct:__anon8
temp_imgU	rdopt.c	/^imgpel temp_imgU[16][16];$/;"	v
temp_imgV	rdopt.c	/^imgpel temp_imgV[16][16];$/;"	v
temp_imgY	rdopt.c	/^imgpel temp_imgY[16][16]; \/\/ to temp store the Y data for 8x8 transform$/;"	v
terminate_macroblock	macroblock.c	/^void terminate_macroblock(Boolean *end_of_slice, Boolean *recode_macroblock)$/;"	f
terminate_sequence	filehandle.c	/^int terminate_sequence()$/;"	f
terminate_slice	slice.c	/^int terminate_slice()$/;"	f
testEndian	output.c	/^int testEndian()$/;"	f
test_wp_B_slice	weighted_prediction.c	/^int test_wp_B_slice(int select_method)$/;"	f
test_wp_P_slice	weighted_prediction.c	/^int test_wp_P_slice(int select_offset)$/;"	f
tex_ctx	global.h	/^  TextureInfoContexts *tex_ctx;     \/\/!< pointer to struct of context models for use in CABAC$/;"	m	struct:__anon35
tex_ctx	rdopt_coding_state.h	/^  TextureInfoContexts  *tex_ctx;$/;"	m	struct:__anon19
time_offset_length	parsetcommon.h	/^  unsigned  time_offset_length;                               \/\/ u(5)$/;"	m	struct:__anon2
time_scale	parsetcommon.h	/^    unsigned  time_scale;                                     \/\/ u(32)$/;"	m	struct:__anon3
timestamp	rtp.h	/^  unsigned int timestamp;  \/\/!< timestamp, 27 MHz for H.264$/;"	m	struct:__anon17
timing_info_present_flag	parsetcommon.h	/^  Boolean      timing_info_present_flag;                         \/\/ u(1)$/;"	m	struct:__anon3
tmp_bit_use_cbp	global.h	/^  int   tmp_bit_use_cbp     [NUM_PIC_TYPE];$/;"	m	struct:__anon41
top_field	global.h	/^  int top_field;      \/\/!< For MB level field\/frame -- top field flag$/;"	m	struct:__anon40
top_field	mbuffer.h	/^  StorablePicture *top_field;$/;"	m	struct:frame_store
top_field	mbuffer.h	/^  struct storable_picture *top_field;     \/\/ for mb aff, if frame for referencing the top field$/;"	m	struct:storable_picture	typeref:struct:storable_picture::storable_picture
top_left	global.h	/^  int *top_left;                         \/\/!< top_left and bottom_right store values indicating foregrounds$/;"	m	struct:__anon39
top_left	parsetcommon.h	/^      unsigned  top_left[MAXnum_slice_groups_minus1];         \/\/ ue(v)$/;"	m	struct:__anon4
top_moving_block	mbuffer.h	/^  byte **     top_moving_block;$/;"	m	struct:colocated_params
top_mv	mbuffer.h	/^  short ****  top_mv;            \/\/!< motion vector       [list][subblock_x][subblock_y][component]  $/;"	m	struct:colocated_params
top_pic	global.h	/^Picture *top_pic;$/;"	v
top_pic	lencod.c	/^Picture *top_pic;$/;"	v
top_poc	mbuffer.h	/^  int         top_poc;$/;"	m	struct:storable_picture
top_ref_idx	mbuffer.h	/^  short ***   top_ref_idx;       \/\/!< reference picture   [list][subblock_x][subblock_y]$/;"	m	struct:colocated_params
top_ref_pic_id	mbuffer.h	/^  int64 ***   top_ref_pic_id;    \/\/!< reference picture identifier [list][subblock_x][subblock_y]$/;"	m	struct:colocated_params
top_ref_pic_num	mbuffer.h	/^  int64       top_ref_pic_num[6][MAX_LIST_SIZE];  $/;"	m	struct:colocated_params
top_ref_pic_num	mbuffer.h	/^  int64       top_ref_pic_num[6][MAX_LIST_SIZE];$/;"	m	struct:storable_picture
toppoc	global.h	/^    signed int toppoc;      \/\/!< poc for this frame or field$/;"	m	struct:__anon40
tot_time	global.h	/^int  tot_time;$/;"	v
tot_time	lencod.c	/^int  tot_time;$/;"	v
total_byte	sei.h	/^  int total_byte;$/;"	m	struct:__anon14
total_byte	sei.h	/^  int total_byte;$/;"	m	struct:__anon15
total_frame_buffer	leaky_bucket.c	/^unsigned long total_frame_buffer = 0;$/;"	v
total_number_mb	global.h	/^  int total_number_mb;$/;"	m	struct:__anon40
tr	global.h	/^  int tr;$/;"	m	struct:__anon40
trace2out	vlc.c	/^void trace2out(SyntaxElement *sym)$/;"	f
tracestring	global.h	/^  char                tracestring[TRACESTRING_SIZE];  \/\/!< trace string$/;"	m	struct:syntaxelement
transfer_characteristics	parsetcommon.h	/^      unsigned  transfer_characteristics;                     \/\/ u(8)$/;"	m	struct:__anon3
transform_8x8_mode_flag	parsetcommon.h	/^  Boolean   transform_8x8_mode_flag;                          \/\/ u(1)$/;"	m	struct:__anon4
transform_size_contexts	global.h	/^  BiContextType transform_size_contexts   [NUM_TRANSFORM_SIZE_CTX];$/;"	m	struct:__anon32
type	global.h	/^  int                 type;           \/\/!< type of syntax element for data part.$/;"	m	struct:syntaxelement
type	global.h	/^  int type;$/;"	m	struct:__anon40
type2ctx_abs	cabac.c	/^static const int type2ctx_abs [] = { 0,  1,  2,  3,  3,  4,  5,  6,  5,  5}; \/\/ 7$/;"	v	file:
type2ctx_bcbp	cabac.c	/^static const int type2ctx_bcbp[] = { 0,  1,  2,  2,  3,  4,  5,  6,  5,  5}; \/\/ 7$/;"	v	file:
type2ctx_last	cabac.c	/^static const int type2ctx_last[] = { 0,  1,  2,  3,  4,  5,  6,  7,  6,  6}; \/\/ 8$/;"	v	file:
type2ctx_map	cabac.c	/^static const int type2ctx_map [] = { 0,  1,  2,  3,  4,  5,  6,  7,  6,  6}; \/\/ 8$/;"	v	file:
type2ctx_one	cabac.c	/^static const int type2ctx_one [] = { 0,  1,  2,  3,  3,  4,  5,  6,  5,  5}; \/\/ 7$/;"	v	file:
u_1	vlc.c	/^int u_1 (char *tracestring, int value, DataPartition *part)$/;"	f
u_v	vlc.c	/^int u_v (int n, char *tracestring, int value, DataPartition *part)$/;"	f
ue_linfo	vlc.c	/^void ue_linfo(int ue, int dummy, int *len,int *info)$/;"	f
ue_v	vlc.c	/^int ue_v (char *tracestring, int value, DataPartition *part)$/;"	f
unary_bin_encode	cabac.c	/^void unary_bin_encode(EncodingEnvironmentPtr eep_dp,$/;"	f
unary_bin_max_encode	cabac.c	/^void unary_bin_max_encode(EncodingEnvironmentPtr eep_dp,$/;"	f
unary_exp_golomb_level_encode	cabac.c	/^void unary_exp_golomb_level_encode( EncodingEnvironmentPtr eep_dp,$/;"	f
unary_exp_golomb_mv_encode	cabac.c	/^void unary_exp_golomb_mv_encode(EncodingEnvironmentPtr eep_dp,$/;"	f
uninit_out_buffer	output.c	/^void uninit_out_buffer()$/;"	f
unmark_for_long_term_reference	mbuffer.c	/^static void unmark_for_long_term_reference(FrameStore* fs)$/;"	f	file:
unmark_for_reference	mbuffer.c	/^static void unmark_for_reference(FrameStore* fs)$/;"	f	file:
unmark_long_term_field_for_reference_by_frame_idx	mbuffer.c	/^static void unmark_long_term_field_for_reference_by_frame_idx(PictureStructure structure, int long_term_frame_idx, int mark_current, unsigned curr_frame_num, int curr_pic_num)$/;"	f	file:
unmark_long_term_frame_for_reference_by_frame_idx	mbuffer.c	/^static void unmark_long_term_frame_for_reference_by_frame_idx(int long_term_frame_idx)$/;"	f	file:
updateMADModel	ratectl.c	/^void updateMADModel ()$/;"	f
updateQuantizationParameter	ratectl.c	/^int updateQuantizationParameter(int topfield)$/;"	f
updateRCModel	ratectl.c	/^void updateRCModel ()$/;"	f
update_field_frame_contexts	context_ini.c	/^void update_field_frame_contexts (int field)$/;"	f
update_ltref_list	mbuffer.c	/^void update_ltref_list()$/;"	f
update_ref_list	mbuffer.c	/^void update_ref_list()$/;"	f
used_for_reference	mbuffer.h	/^  int         used_for_reference;$/;"	m	struct:storable_picture
used_size	mbuffer.h	/^  unsigned      used_size;$/;"	m	struct:decoded_picture_buffer
user_data_registered_itu_t_t35_information_struct	sei.h	/^} user_data_registered_itu_t_t35_information_struct;$/;"	t	typeref:struct:__anon15
user_data_unregistered_information_struct	sei.h	/^} user_data_unregistered_information_struct;$/;"	t	typeref:struct:__anon14
v	rtp.h	/^  unsigned int v;          \/\/!< Version, 2 bits, MUST be 0x2$/;"	m	struct:__anon17
value1	global.h	/^  int                 value1;         \/\/!< numerical value of syntax element$/;"	m	struct:syntaxelement
value2	global.h	/^  int                 value2;         \/\/!< for blocked symbols, e.g. run\/level$/;"	m	struct:syntaxelement
vbr_cbr_flag	parsetcommon.h	/^    unsigned  vbr_cbr_flag[MAXIMUMVALUEOFcpb_cnt];            \/\/ u(1)$/;"	m	struct:__anon2
vcl_hrd_parameters	parsetcommon.h	/^    hrd_parameters_t vcl_hrd_parameters;                      \/\/ hrd_paramters_t$/;"	m	struct:__anon3
vcl_hrd_parameters_present_flag	parsetcommon.h	/^  Boolean      vcl_hrd_parameters_present_flag;                  \/\/ u(1)$/;"	m	struct:__anon3
ver_offset	block.h	/^const unsigned char ver_offset[4][4][4] =$/;"	v
video_format	parsetcommon.h	/^    unsigned  video_format;                                   \/\/ u(3)$/;"	m	struct:__anon3
video_full_range_flag	parsetcommon.h	/^    Boolean      video_full_range_flag;                          \/\/ u(1)$/;"	m	struct:__anon3
video_signal_type_present_flag	parsetcommon.h	/^  Boolean      video_signal_type_present_flag;                   \/\/ u(1)$/;"	m	struct:__anon3
vui_parameters_present_flag	parsetcommon.h	/^  Boolean   vui_parameters_present_flag;                      \/\/ u(1)$/;"	m	struct:__anon5
vui_pic_parameters_flag	parsetcommon.h	/^  Boolean   vui_pic_parameters_flag;                          \/\/ u(1)$/;"	m	struct:__anon4
vui_seq_parameters	parsetcommon.h	/^    vui_seq_parameters_t vui_seq_parameters;                  \/\/ vui_seq_parameters_t$/;"	m	struct:__anon5
vui_seq_parameters_t	parsetcommon.h	/^} vui_seq_parameters_t;$/;"	t	typeref:struct:__anon3
wbp_weight	global.h	/^int ****wbp_weight;  \/\/ weight in [list][fwd_index][bwd_idx][component] order$/;"	v
wbp_weight	lencod.c	/^int ****wbp_weight;  \/\/ weight in [list][fwd_index][bwd_idx][component] order$/;"	v
weighted_bipred_idc	parsetcommon.h	/^  unsigned  weighted_bipred_idc;                              \/\/ u(2)$/;"	m	struct:__anon4
weighted_pred_flag	parsetcommon.h	/^  Boolean   weighted_pred_flag;                               \/\/ u(1)$/;"	m	struct:__anon4
width	global.h	/^  int width;                   \/\/!< Number of pels$/;"	m	struct:__anon40
width_cr	global.h	/^  int width_cr;                \/\/!< Number of pels chroma$/;"	m	struct:__anon40
wp_chroma_round	global.h	/^int wp_chroma_round;$/;"	v
wp_chroma_round	lencod.c	/^int wp_chroma_round;$/;"	v
wp_luma_round	global.h	/^int wp_luma_round;$/;"	v
wp_luma_round	lencod.c	/^int wp_luma_round;$/;"	v
wp_offset	global.h	/^int ***wp_offset;  \/\/ offset in [list][index][component] order$/;"	v
wp_offset	lencod.c	/^int ***wp_offset;  \/\/ offset in [list][index][component] order$/;"	v
wp_weight	global.h	/^int ***wp_weight;  \/\/ weight in [list][index][component] order$/;"	v
wp_weight	lencod.c	/^int ***wp_weight;  \/\/ weight in [list][index][component] order$/;"	v
write	global.h	72;"	d
writeB8_typeInfo_CABAC	cabac.c	/^void writeB8_typeInfo_CABAC(SyntaxElement *se, EncodingEnvironmentPtr eep_dp)$/;"	f
writeCBP_BIT_CABAC	cabac.c	/^void writeCBP_BIT_CABAC (int b8, int bit, int cbp, Macroblock* currMB, int inter, EncodingEnvironmentPtr eep_dp)$/;"	f
writeCBP_CABAC	cabac.c	/^void writeCBP_CABAC(SyntaxElement *se, EncodingEnvironmentPtr eep_dp)$/;"	f
writeCBPandLumaCoeff	macroblock.c	/^int writeCBPandLumaCoeff ()$/;"	f
writeCIPredMode_CABAC	cabac.c	/^void writeCIPredMode_CABAC(SyntaxElement *se, EncodingEnvironmentPtr eep_dp)$/;"	f
writeChromaCoeff	macroblock.c	/^int writeChromaCoeff ()$/;"	f
writeChromaIntraPredMode	macroblock.c	/^int writeChromaIntraPredMode()$/;"	f
writeCoeff4x4_CAVLC	macroblock.c	/^int writeCoeff4x4_CAVLC (int block_type, int b8, int b4, int param)$/;"	f
writeDquant_CABAC	cabac.c	/^void writeDquant_CABAC(SyntaxElement *se, EncodingEnvironmentPtr eep_dp)$/;"	f
writeFieldModeInfo_CABAC	cabac.c	/^void writeFieldModeInfo_CABAC(SyntaxElement *se, EncodingEnvironmentPtr eep_dp)$/;"	f
writeIntra4x4Modes	macroblock.c	/^int writeIntra4x4Modes(int only_this_block)$/;"	f
writeIntraPredMode_CABAC	cabac.c	/^void writeIntraPredMode_CABAC(SyntaxElement *se, EncodingEnvironmentPtr eep_dp)$/;"	f
writeLumaCoeff4x4_CABAC	macroblock.c	/^int writeLumaCoeff4x4_CABAC (int b8, int b4, int intra4x4mode)$/;"	f
writeLumaCoeff8x8	macroblock.c	/^int writeLumaCoeff8x8 (int block8x8, int block_mode, int transform_size_flag)$/;"	f
writeLumaCoeff8x8_CABAC	macroblock.c	/^int writeLumaCoeff8x8_CABAC (int b8, int intra_mode)$/;"	f
writeMBLayer	macroblock.c	/^int writeMBLayer (int rdopt)  \/\/ GB CHROMA !!!!!!!!$/;"	f
writeMB_skip_flagInfo_CABAC	cabac.c	/^void writeMB_skip_flagInfo_CABAC(SyntaxElement *se, EncodingEnvironmentPtr eep_dp)$/;"	f
writeMB_transform_size_CABAC	cabac.c	/^void writeMB_transform_size_CABAC(SyntaxElement *se, EncodingEnvironmentPtr eep_dp)$/;"	f
writeMB_typeInfo_CABAC	cabac.c	/^void writeMB_typeInfo_CABAC(SyntaxElement *se, EncodingEnvironmentPtr eep_dp)$/;"	f
writeMVD_CABAC	cabac.c	/^void writeMVD_CABAC(SyntaxElement *se, EncodingEnvironmentPtr eep_dp)$/;"	f
writeMotionInfo2NAL	macroblock.c	/^int writeMotionInfo2NAL ()$/;"	f
writeMotionVector8x8	macroblock.c	/^int writeMotionVector8x8 (int  i0,$/;"	f
writeRefFrame_CABAC	cabac.c	/^void writeRefFrame_CABAC(SyntaxElement *se, EncodingEnvironmentPtr eep_dp)$/;"	f
writeReferenceFrame	macroblock.c	/^int writeReferenceFrame (int mode, int i, int j, int fwd_flag, int  ref)$/;"	f
writeRunLevel_CABAC	cabac.c	/^void writeRunLevel_CABAC (SyntaxElement *se, EncodingEnvironmentPtr eep_dp)$/;"	f
writeSyntaxElement	global.h	/^  int                 (*writeSyntaxElement)(SyntaxElement *, struct datapartition *);$/;"	m	struct:datapartition
writeSyntaxElement2Buf_Fixed	vlc.c	/^int writeSyntaxElement2Buf_Fixed(SyntaxElement *se, Bitstream* this_streamBuffer )$/;"	f
writeSyntaxElement2Buf_UVLC	vlc.c	/^int writeSyntaxElement2Buf_UVLC(SyntaxElement *se, Bitstream* this_streamBuffer )$/;"	f
writeSyntaxElement_CABAC	cabac.c	/^int writeSyntaxElement_CABAC(SyntaxElement *se, DataPartition *this_dataPart)$/;"	f
writeSyntaxElement_Intra4x4PredictionMode	vlc.c	/^int writeSyntaxElement_Intra4x4PredictionMode(SyntaxElement *se, DataPartition *this_dataPart)$/;"	f
writeSyntaxElement_Level_VLC1	vlc.c	/^int writeSyntaxElement_Level_VLC1(SyntaxElement *se, DataPartition *this_dataPart)$/;"	f
writeSyntaxElement_Level_VLCN	vlc.c	/^int writeSyntaxElement_Level_VLCN(SyntaxElement *se, int vlc, DataPartition *this_dataPart)$/;"	f
writeSyntaxElement_NumCoeffTrailingOnes	vlc.c	/^int writeSyntaxElement_NumCoeffTrailingOnes(SyntaxElement *se, DataPartition *this_dataPart)$/;"	f
writeSyntaxElement_NumCoeffTrailingOnesChromaDC	vlc.c	/^int writeSyntaxElement_NumCoeffTrailingOnesChromaDC(SyntaxElement *se, DataPartition *this_dataPart)$/;"	f
writeSyntaxElement_Run	vlc.c	/^int writeSyntaxElement_Run(SyntaxElement *se, DataPartition *this_dataPart)$/;"	f
writeSyntaxElement_TotalZeros	vlc.c	/^int writeSyntaxElement_TotalZeros(SyntaxElement *se, DataPartition *this_dataPart)$/;"	f
writeSyntaxElement_TotalZerosChromaDC	vlc.c	/^int writeSyntaxElement_TotalZerosChromaDC(SyntaxElement *se, DataPartition *this_dataPart)$/;"	f
writeSyntaxElement_UVLC	vlc.c	/^int writeSyntaxElement_UVLC(SyntaxElement *se, DataPartition *this_dataPart)$/;"	f
writeSyntaxElement_VLC	vlc.c	/^int writeSyntaxElement_VLC(SyntaxElement *se, DataPartition *this_dataPart)$/;"	f
writeSyntaxElement_fixed	vlc.c	/^int writeSyntaxElement_fixed(SyntaxElement *se, DataPartition *this_dataPart)$/;"	f
writeUVLC2buffer	vlc.c	/^void  writeUVLC2buffer(SyntaxElement *se, Bitstream *currStream)$/;"	f
writeUnit	image.c	/^static void writeUnit(Bitstream* currStream,int partition)$/;"	f	file:
writeVlcByteAlign	vlc.c	/^void writeVlcByteAlign(Bitstream* currStream)$/;"	f
write_PPS	filehandle.c	/^int write_PPS(int len, int PPS_id)$/;"	f
write_and_store_CBP_block_bit	cabac.c	/^void write_and_store_CBP_block_bit (Macroblock* currMB, EncodingEnvironmentPtr eep_dp, int type, int cbp_bit)$/;"	f
write_buffer	leaky_bucket.c	/^void write_buffer(unsigned long NumberLeakyBuckets, unsigned long Rmin[], unsigned long Bmin[], unsigned long Fmin[])$/;"	f
write_flag	global.h	/^  int             write_flag;         \/\/!< Bitstream contains data and needs to be written$/;"	m	struct:__anon34
write_macroblock	global.h	/^  int write_macroblock;$/;"	m	struct:__anon40
write_macroblock_frame	global.h	/^  int write_macroblock_frame;$/;"	m	struct:__anon40
write_one_macroblock	macroblock.c	/^void write_one_macroblock (int eos_bit)$/;"	f
write_out_picture	output.c	/^void write_out_picture(StorablePicture *p, int p_out)$/;"	f
write_picture	output.c	/^void write_picture(StorablePicture *p, int p_out, int real_structure)$/;"	f
write_sei_message	sei.c	/^void write_sei_message(int id, byte* payload, int payload_size, int payload_type)$/;"	f
write_significance_map	cabac.c	/^void write_significance_map (Macroblock* currMB, EncodingEnvironmentPtr eep_dp, int type, int coeff[], int coeff_ctr)$/;"	f
write_significant_coefficients	cabac.c	/^void write_significant_coefficients (Macroblock* currMB, EncodingEnvironmentPtr eep_dp, int type, int coeff[])$/;"	f
write_stored_frame	output.c	/^void write_stored_frame( FrameStore *fs,int p_out)$/;"	f
write_terminating_bit	macroblock.c	/^void write_terminating_bit (short bit)$/;"	f
write_unpaired_field	output.c	/^void write_unpaired_field(FrameStore* fs, int p_out)$/;"	f
writeout_picture	image.c	/^static int writeout_picture(Picture *pic)$/;"	f	file:
writing	global.h	/^  void    (*writing)(struct syntaxelement *, EncodingEnvironmentPtr);$/;"	m	struct:syntaxelement
x	global.h	/^  int x;$/;"	m	struct:pix_pos
x	rtp.h	/^  unsigned int x;          \/\/!< Extension, MUST be zero *\/$/;"	m	struct:__anon17
y	global.h	/^  int y;$/;"	m	struct:pix_pos
yuv_format	global.h	/^  int yuv_format;               \/\/!< YUV format (0=4:0:0, 1=4:2:0, 2=4:2:2, 3=4:4:4)$/;"	m	struct:__anon39
yuv_format	global.h	/^  int yuv_format;$/;"	m	struct:__anon40

